<?xml version="1.0" encoding="utf-8"?>
<ManagementPack SchemaVersion="2.0" ContentReadable="true" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Manifest>
    <Identity>
      <ID>ABC.F5.BIGIP</ID>
      <Version>1.0.0.60</Version>
    </Identity>
    <Name>ABC.F5.BIGIP</Name>
    <References>
      <Reference Alias="SC">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Health">
        <ID>System.Health.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <EntityTypes>
      <ClassTypes>
        <ClassType ID="ABC.F5.BIGIP.System" Accessibility="Public" Abstract="false" Base="System!System.LogicalEntity" Hosted="false" Singleton="false" Extension="false">
          <Property ID="SystemNodeName" Type="string" AutoIncrement="false" Key="true" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="SystemRelease" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="SystemName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="ProductDate" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="ProductBuild" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="ProductName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="ProductVersion" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="IPAddress" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
        </ClassType>
        <ClassType ID="ABC.F5.BIGIP.CPU" Accessibility="Public" Abstract="false" Base="System!System.LogicalEntity" Hosted="false" Singleton="false" Extension="false">
          <Property ID="Id" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="SystemNodeName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="Key" Type="string" AutoIncrement="false" Key="true" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
        </ClassType>
        <ClassType ID="ABC.F5.BIGIP.Disk" Accessibility="Public" Abstract="false" Base="System!System.LogicalEntity" Hosted="false" Singleton="false" Extension="false">
          <Property ID="FullPathAttr" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="TotalSize" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="SystemNodeName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="Key" Type="string" AutoIncrement="false" Key="true" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
        </ClassType>
        <ClassType ID="ABC.F5.BIGIP.Memory" Accessibility="Public" Abstract="false" Base="System!System.LogicalEntity" Hosted="false" Singleton="false" Extension="false">
          <Property ID="MemoryTotal" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="SystemNodeName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="Key" Type="string" AutoIncrement="false" Key="true" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
        </ClassType>
        <ClassType ID="ABC.F5.BIGIP.MonitoringServer" Accessibility="Public" Abstract="false" Base="Windows!Microsoft.Windows.ComputerRole" Hosted="true" Singleton="false" Extension="false">
          <Property ID="FilePath" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
        </ClassType>
        <ClassType ID="ABC.F5.BIGIP.MonitoringServerRuntimeInfo" Accessibility="Public" Abstract="false" Base="System!System.LogicalEntity" Hosted="false" Singleton="false" Extension="false">
          <Property ID="RemotePath" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="Key" Type="string" AutoIncrement="false" Key="true" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
        </ClassType>
        <ClassType ID="ABC.F5.BIGIP.NodeAddress" Accessibility="Public" Abstract="false" Base="System!System.LogicalEntity" Hosted="false" Singleton="false" Extension="false">
          <Property ID="NodeAddressEnabledState" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="NodeAddressMonitorRule" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="NodeAddressSessionStatus" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="NodeAddressName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="Key" Type="string" AutoIncrement="false" Key="true" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="SystemNodeName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
        </ClassType>
        <ClassType ID="ABC.F5.BIGIP.PoolStatus" Accessibility="Public" Abstract="false" Base="System!System.LogicalEntity" Hosted="false" Singleton="false" Extension="false">
          <Property ID="PoolStatusEnabledState" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="PoolStatusName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="Key" Type="string" AutoIncrement="false" Key="true" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="SystemNodeName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
        </ClassType>
        <ClassType ID="ABC.F5.BIGIP.PoolStatus.Group" Base="System!System.Group" Accessibility="Public" Abstract="false" Hosted="false" Singleton="false">
          <Property ID="Key" Type="string" AutoIncrement="false" Key="true" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="SystemNodeName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
        </ClassType>
        <ClassType ID="ABC.F5.BIGIP.NodeAddress.Group" Accessibility="Public" Abstract="false" Base="System!System.Group" Hosted="false" Singleton="false" Extension="false">
          <Property ID="Key" Type="string" AutoIncrement="false" Key="true" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="SystemNodeName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
        </ClassType>
        <ClassType ID="ABC.F5.BIGIP.TrafficGroupItem" Accessibility="Public" Abstract="false" Base="System!System.LogicalEntity" Hosted="false" Singleton="false" Extension="false">
          <Property ID="DeviceName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="GroupName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="Key" Type="string" AutoIncrement="false" Key="true" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="SystemNodeName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
        </ClassType>
        <ClassType ID="ABC.F5.BIGIP.SyncStatusItem" Accessibility="Public" Abstract="false" Base="System!System.LogicalEntity" Hosted="false" Singleton="false" Extension="false">
          <Property ID="ItemName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="Key" Type="string" AutoIncrement="false" Key="true" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="SystemNodeName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
        </ClassType>
        <ClassType ID="ABC.F5.BIGIP.TrafficGroupItem.Group" Accessibility="Public" Abstract="false" Base="System!System.Group" Hosted="false" Singleton="false" Extension="false">
          <Property ID="GroupName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="Key" Type="string" AutoIncrement="false" Key="true" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="SystemNodeName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
        </ClassType>
        <ClassType ID="ABC.F5.BIGIP.SyncStatusItem.Group" Accessibility="Public" Abstract="false" Base="System!System.Group" Hosted="false" Singleton="false" Extension="false">
          <Property ID="GroupName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="Key" Type="string" AutoIncrement="false" Key="true" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="SystemNodeName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
        </ClassType>
      </ClassTypes>
      <RelationshipTypes>
        <RelationshipType ID="ABC.F5.BIGIP.SystemHostsCPU" Accessibility="Public" Abstract="false" Base="System!System.Containment">
          <Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="ABC.F5.BIGIP.System" />
          <Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="ABC.F5.BIGIP.CPU" />
        </RelationshipType>
        <RelationshipType ID="ABC.F5.BIGIP.SystemHostsDisk" Accessibility="Public" Abstract="false" Base="System!System.Containment">
          <Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="ABC.F5.BIGIP.System" />
          <Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="ABC.F5.BIGIP.Disk" />
        </RelationshipType>
        <RelationshipType ID="ABC.F5.BIGIP.SystemHostsMemory" Accessibility="Public" Abstract="false" Base="System!System.Containment">
          <Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="ABC.F5.BIGIP.System" />
          <Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="ABC.F5.BIGIP.Memory" />
        </RelationshipType>
        <RelationshipType ID="ABC.F5.BIGIP.PoolStatusGroupHostsPoolStatus" Accessibility="Public" Abstract="false" Base="System!System.Containment">
          <Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="ABC.F5.BIGIP.PoolStatus.Group" />
          <Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="ABC.F5.BIGIP.PoolStatus" />
        </RelationshipType>
        <RelationshipType ID="ABC.F5.BIGIP.SystemHostsPoolStatusGroup" Accessibility="Public" Abstract="false" Base="System!System.Containment">
          <Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="ABC.F5.BIGIP.System" />
          <Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="ABC.F5.BIGIP.PoolStatus.Group" />
        </RelationshipType>
        <RelationshipType ID="ABC.F5.BIGIP.NodeAddressGroupHostsNodeAddress" Accessibility="Public" Abstract="false" Base="System!System.Containment">
          <Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="ABC.F5.BIGIP.NodeAddress.Group" />
          <Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="ABC.F5.BIGIP.NodeAddress" />
        </RelationshipType>
        <RelationshipType ID="ABC.F5.BIGIP.SystemHostsNodeAddressGroup" Accessibility="Public" Abstract="false" Base="System!System.Containment">
          <Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="ABC.F5.BIGIP.System" />
          <Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="ABC.F5.BIGIP.NodeAddress.Group" />
        </RelationshipType>
        <RelationshipType ID="ABC.F5.BIGIP.TrafficGroupItemGroupHostsTrafficGroupItem" Accessibility="Public" Abstract="false" Base="System!System.Containment">
          <Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="ABC.F5.BIGIP.TrafficGroupItem.Group" />
          <Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="ABC.F5.BIGIP.TrafficGroupItem" />
        </RelationshipType>
        <RelationshipType ID="ABC.F5.BIGIP.SystemHostsTrafficGroupItemGroup" Accessibility="Public" Abstract="false" Base="System!System.Containment">
          <Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="ABC.F5.BIGIP.System" />
          <Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="ABC.F5.BIGIP.TrafficGroupItem.Group" />
        </RelationshipType>
        <RelationshipType ID="ABC.F5.BIGIP.SyncStatusItemGroupHostsSyncStatusItem" Accessibility="Public" Abstract="false" Base="System!System.Containment">
          <Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="ABC.F5.BIGIP.SyncStatusItem.Group" />
          <Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="ABC.F5.BIGIP.SyncStatusItem" />
        </RelationshipType>
        <RelationshipType ID="ABC.F5.BIGIP.SystemHostsSyncStatusItemGroup" Accessibility="Public" Abstract="false" Base="System!System.Containment">
          <Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="ABC.F5.BIGIP.System" />
          <Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="ABC.F5.BIGIP.SyncStatusItem.Group" />
        </RelationshipType>
      </RelationshipTypes>
    </EntityTypes>
    <ModuleTypes>
      <DataSourceModuleType ID="ABC.F5.BIGIP.SystemHardware.Test.PropertyBag.Filtered" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="MonitorItem" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Key" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Threshold" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="Threshold" Selector="$Config/Threshold$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="DS" TypeID="ABC.F5.BIGIP.SystemHardware.Test.PropertyBag">
                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                <SyncTime>$Config/SyncTime$</SyncTime>
                <MonitorItem>$Config/MonitorItem$</MonitorItem>
                <Threshold>$Config/Threshold$</Threshold>
                <Key>$Config/Key$</Key>
              </DataSource>
              <ConditionDetection ID="Filter" TypeID="System!System.ExpressionFilter">
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Property[@Name="Key"]</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">$Config/Key$</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="Filter">
                <Node ID="DS" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="ABC.F5.BIGIP.Applications.Test.PropertyBag.Filtered" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="MonitorItem" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Key" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Threshold" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="Threshold" Selector="$Config/Threshold$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="DS" TypeID="ABC.F5.BIGIP.Applications.Test.PropertyBag">
                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                <SyncTime>$Config/SyncTime$</SyncTime>
                <MonitorItem>$Config/MonitorItem$</MonitorItem>
                <Threshold>$Config/Threshold$</Threshold>
                <Key>$Config/Key$</Key>
              </DataSource>
              <ConditionDetection ID="Filter" TypeID="System!System.ExpressionFilter">
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Property[@Name="Key"]</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">$Config/Key$</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="Filter">
                <Node ID="DS" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="ABC.F5.BIGIP.SystemHardware.Test.PropertyBag" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="MonitorItem" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Threshold" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Key" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="Threshold" Selector="$Config/Threshold$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Schedule" TypeID="System!System.SimpleScheduler">
                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                <SyncTime>$Config/SyncTime$</SyncTime>
              </DataSource>
              <ProbeAction ID="Probe" TypeID="ABC.F5.BIGIP.SystemHardware.Probe">
                <MonitorItem>$Config/MonitorItem$</MonitorItem>
                <Threshold>$Config/Threshold$</Threshold>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="Probe">
                <Node ID="Schedule" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="ABC.F5.BIGIP.Applications.Test.PropertyBag" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="MonitorItem" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Threshold" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Key" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="Threshold" Selector="$Config/Threshold$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Schedule" TypeID="System!System.SimpleScheduler">
                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                <SyncTime>$Config/SyncTime$</SyncTime>
              </DataSource>
              <ProbeAction ID="Probe" TypeID="ABC.F5.BIGIP.Applications.Probe">
                <MonitorItem>$Config/MonitorItem$</MonitorItem>
                <Threshold>$Config/Threshold$</Threshold>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="Probe">
                <Node ID="Schedule" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <ProbeActionModuleType ID="ABC.F5.BIGIP.SystemHardware.Probe" Accessibility="Internal" Batching="false" PassThrough="false">
        <Configuration>
          <xsd:element name="MonitorItem" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Threshold" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <ProbeAction ID="PSScript" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>MonitorF5SystemHardware.ps1</ScriptName>
                <ScriptBody><![CDATA[param($MonitorItem, $Threshold)

$api = New-Object -ComObject 'MOM.ScriptAPI'

$Global:Error.Clear()
$script:ErrorView      = 'NormalView'
$ErrorActionPreference = 'Continue'

$classF5MonServerRuntimeInfo         = Get-SCOMClass -Name 'ABC.F5.BIGIP.MonitoringServerRuntimeInfo'
$classF5MonServerRuntimeInfoInstance = Get-SCOMClassInstance -Class $classF5MonServerRuntimeInfo
$tempPath                            = $classF5MonServerRuntimeInfoInstance.'[ABC.F5.BIGIP.MonitoringServerRuntimeInfo].RemotePath'.Value

$testedAt       = "Tested on: $(Get-Date -Format u) / $(([TimeZoneInfo]::Local).DisplayName)"

$F5BigIPHosts   = Import-Csv -Path $($tempPath + '\' + 'F5-BigIP-Hosts.csv')
$discoveryFiles = Get-ChildItem -Path $tempPath -Filter '*F5-Discovery-*.json' | Select-Object -ExpandProperty Name

 
foreach($f5HostItem in $F5BigIPHosts) {
  
	$f5HostName      = ''
	$f5HostIPAddress = ''
	$f5HostUrl       = ''

	if ($f5HostItem.HostName -match '[a-zA-Z0-9]{3,}') {
		$f5HostName = $f5HostItem.HostName
	}

	if ($f5HostItem.IPAddress -match '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}') {
		$f5HostIPAddress = $f5HostItem.IPAddress
	}

	if ($f5HostName -ne '') {
		if (Test-Connection -ComputerName $f5HostName -Count 2 -Quiet) {
			$f5HostUrl = $f5HostName
		}
	}
   
	if (($f5HostUrl -eq '') -and ($f5HostIPAddress -ne '')) {
		if (Test-Connection -ComputerName $f5HostIPAddress -Count 2 -Quiet) {     
			$f5HostUrl = $f5HostIPAddress
		} 
	}     
	
	if ($f5HostUrl -ne '') {

		if($discoveryItem -eq 'Info') {
			$discoveryFileContent = @()
			$discoveryFile = $discoveryFiles | Where-Object { ($_ -match $MonitorItem) -and ($_ -match $f5HostUrl)}
			foreach($dFile in $discoveryFile) {
				$discoveryFileContent += Get-Content -Path $($tempPath + '\' + $dFile) | ConvertFrom-Json
			}  
		} else {
			$discoveryFile        = $discoveryFiles | Where-Object { ($_ -match $MonitorItem) -and ($_ -match $f5HostUrl)}
			$discoveryFileContent = Get-Content -Path $($tempPath + '\' + $discoveryFile) | ConvertFrom-Json
		}

		$discoverySystemFile        = $discoveryFiles | Where-Object {($_ -match 'GeneralInfo') -and ($_ -match $f5HostUrl)}
		$discoverySystemFileContent = Get-Content -Path $($tempPath + '\' + $discoverySystemFile) | ConvertFrom-Json
		$systemNodeNameKey          = $($discoverySystemFileContent.GeneralInfo.SystemNodeName)
	
		if ($MonitorItem -eq 'CPU') {	

			$classF5CPU          = Get-SCOMClass -Name 'ABC.F5.BIGIP.CPU'
			$classF5CPUInstances = Get-SCOMClassInstance -Class $classF5CPU
	
			$classF5CPUInstances | Where-Object {$_.'[ABC.F5.BIGIP.CPU].SystemNodeName'.Value -eq $systemNodeNameKey} | ForEach-Object {						

				$f5CPU = $_

				[string]$cpuID = [string]$($f5CPU.'[ABC.F5.BIGIP.CPU].Id'.Value)
				[string]$key   = [string]$($f5CPU.'[ABC.F5.BIGIP.CPU].Key'.Value) 			
	
				$discoveryFileContent.F5CPU | Where-Object {$_.CPUId -eq $cpuID} | ForEach-Object {		  
					$cpuID   = $($_.CPUId).ToString()				
					$cpuIdle = $_.Idle
					$rawInfo = "Idle: $($_.Idle) User: $($_.User) System: $($_.System)"
					[int]$Threshold			

					$key = $systemNodeNameKey + 'F5-CPU' + $cpuID 			

					if (($Threshold -gt 50) -and ($Threshold -lt 99)) { 
						$cpuMaxThreshold = 100 - $Threshold  
						[int]$cpuIdle = [Math]::Abs($_.Idle)
						if ($cpuIdle -lt $cpuMaxThreshold) {
							$state       = 'Failure'
							$supplement  = "Threshold reached of: $Threshold from max: $cpuMaxThreshold"
							$supplement += "`n Idle: $($cpuIdle) " 
						} else {
							$state      = 'Success'
							$supplement = "Result within threshold of: $Threshold from max: $cpuMaxThreshold"
							$supplement += "`n Idle: $($cpuIdle) " 
						}      
					} else {
						[int]$cpuMaxThreshold = 90
						if ($cpuIdle -lt $cpuMaxThreshold) {
							$state      = 'Failure'
							$supplement = "Threshold reached of: $Threshold from default max: $cpuMaxThreshold"
						} else {
							$state      = 'Success'
							$supplement = "Result within threshold of: $Threshold default from max: $cpuMaxThreshold"
						}
					}			

					$raw = "CPUId: $($cpuID); Key: $($key); State: $($state); Supplement: $($supplement); testedAt: $($testedAt)"					

					$bag = $api.CreatePropertybag()					
					$bag.AddValue("cpuID",$cpuID)
					$bag.AddValue("Key",$key)		
					$bag.AddValue("State",$state)				
					$bag.AddValue("Supplement",$supplement)		
					$bag.AddValue("TestedAt",$testedAt)			
					$bag

				} 
		
			} 

		} elseif ($MonitorItem -eq 'Disks') {	

			$classF5Disk          = Get-SCOMClass -Name 'ABC.F5.BIGIP.Disk'
			$classF5DiskInstances = Get-SCOMClassInstance -Class $classF5Disk
	
			$classF5DiskInstances | Where-Object {$_.'[ABC.F5.BIGIP.Disk].SystemNodeName'.Value -eq $systemNodeNameKey} | ForEach-Object {						

				$f5Disk                     = $_				
				[string]$key                = [string]$($f5Disk.'[ABC.F5.BIGIP.Disk].Key'.Value) 	
				[string]$f5DiskFullPathAttr = [string]$($f5Disk.'[ABC.F5.BIGIP.Disk].FullPathAttr'.Value) 	

				$discoveryFileContent.F5Disks | Where-Object {$_.FullPath -eq $f5DiskFullPathAttr} | ForEach-Object {		  
			
					$FullPath      = $($_.FullPath).ToString()
					$TotalSize     = [float]$_.TotalSize	
					$freeSpace     = [float]$_.Free
					$usedSpace     = [float]$_.InUse
					$freeSpaceInGB = $freeSpace / 1024
					[float]$Threshold			

					if($freeSpace -eq $usedSpace) {			

						$state      = 'Success'
						$supplement = "Disk not in use. Fee: $($freeSpace) Used: $($usedSpace)"

					} else {

						$key = $systemNodeNameKey + 'F5-Disk' + $FullPath				

						if (($Threshold -gt 1) -and ($Threshold -lt 80)) { 
							[float]$diskMinFreePercent = $Threshold / 100
							[float]$diskMinFreeValue   = $TotalSize * $diskMinFreePercent

							if ($freeSpace -ge $diskMinFreeValue) {
								$state      = 'Success'
								$supplement = "Disk free: $($freeSpace) is more than the configured limit of: $($diskMinFreeValue) ; Configured limit in Percent = $($diskMinFreePercent); Threshold: $($Threshold); TotalSize: $($TotalSize) "
							} else {
								$state      = 'Failure'
								$supplement = "Disk free: $($freeSpace) is less than the configured limit of: $($diskMinFreeValue) ; Configured limit in Percent = $($diskMinFreePercent) ; Threshold: $($Threshold); TotalSize: $($TotalSize)"

							}
						} else {
							[float]$diskMinFreePercent = 10 / 100
							[float]$diskMinFreeValue   = $TotalSize * $diskMinFreePercent

							if ($freeSpace -ge $diskMinFreeValue) {
								$state      = 'Success'
								$supplement = "Disk free: $($freeSpace) is more than the configured limit of $($diskMinFreeValue) ; Default limit in Percent = 10%; Threshold: $($Threshold); TotalSize: $($TotalSize)"
							} else {
								$state      = 'Failure'
								$supplement = "Disk free: $($freeSpace) is less than the configured limit of $($diskMinFreeValue);  Default limit in Percent = 10%; Threshold: $($Threshold); TotalSize: $($TotalSize)"

							}
						}

					} 

					$bag = $api.CreatePropertybag()					
					$bag.AddValue("FullPath",$FullPath)
					$bag.AddValue("Key",$key)		
					$bag.AddValue("State",$state)				
					$bag.AddValue("Supplement",$supplement)		
					$bag.AddValue("TestedAt",$testedAt)			
					$bag

				} 
		
			} 		
				
	} elseif ($MonitorItem -eq 'Memory') {
		
		[int]$Threshold		

		$classF5Memory          = Get-SCOMClass -Name 'ABC.F5.BIGIP.Memory'
		$classF5MemoryInstances = Get-SCOMClassInstance -Class $classF5Memory	

		$classF5MemoryInstances | Where-Object {$_.'[ABC.F5.BIGIP.Memory].SystemNodeName'.Value -eq $systemNodeNameKey} | ForEach-Object {						

			$f5Memory    = $_
			[string]$key = [string]$($f5Memory.'[ABC.F5.BIGIP.Memory].Key'.Value) 	

			$discoveryFileContent.F5Memory | ForEach-Object {		
		
				[int]$MemoryTotal  = [int]($_.MemoryTotal / 1024000000)
				[int]$MemoryUsed   = [int]($_.MemoryUsed / 1024000000)
				$MemoryUsedPercent = [int]($_.MemoryUsedPercent)	
				$displayName       = 'F5-Memory' 

				if ($MemoryUsedPercent -le $Threshold) {
					$state      = 'Success'
					$supplement = "Memory percent Used $($MemoryUsedPercent) is less than than the configured limit of: $($Threshold) ; Total Memory in GB: $($MemoryTotal) / Used Memory in GB $($MemoryUsed)"
				} else {
					$state      = 'Failure'
					$supplement = "Memory percent Used $($MemoryUsedPercent) is more than than the configured limit of: $($Threshold) ; Total Memory in GB: $($MemoryTotal) / Used Memory in GB $($MemoryUsed)"
				}	
			
				$bag = $api.CreatePropertybag()								
				$bag.AddValue("Key",$key)		
				$bag.AddValue("State",$state)				
				$bag.AddValue("Supplement",$supplement)		
				$bag.AddValue("TestedAt",$testedAt)			
				$bag
		
			} 
	
		} 
						
	} elseif ($MonitorItem -eq 'Info') {		
	
		$generalInfo    = $($discoveryFileContent.GeneralInfo)
		$productInfo    = $($discoveryFileContent.ProductInfo)
		$productName    = $productInfo.ProductName
		$systemNodeName = $generalInfo.SystemNodeName	
		
		$displayName    = $productName + ' ' + $systemNodeName		

	} else {

	  $FOO = 'Undefined type!'

	}	

  } else {

		$api.LogScriptEvent('ABC.F5.BIGIP MonitorF5SystemHardware.ps1',403,1,"MonitorF5SystemHardwares - strange error")
  
  } 

}  ]]></ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>MonitorItem</Name>
                    <Value>$Config/MonitorItem$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>Threshold</Name>
                    <Value>$Config/Threshold$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>300</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PSScript" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </ProbeActionModuleType>
      <ProbeActionModuleType ID="ABC.F5.BIGIP.Applications.Probe" Accessibility="Internal" Batching="false" PassThrough="false">
        <Configuration>
          <xsd:element name="MonitorItem" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Threshold" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <ProbeAction ID="PSScript" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>MonitorF5Applications.ps1</ScriptName>
                <ScriptBody><![CDATA[param($MonitorItem, $Threshold)

$api = New-Object -ComObject 'MOM.ScriptAPI'

$Global:Error.Clear()
$script:ErrorView      = 'NormalView'
$ErrorActionPreference = 'Continue'

$classF5MonServerRuntimeInfo         = Get-SCOMClass -Name 'ABC.F5.BIGIP.MonitoringServerRuntimeInfo'
$classF5MonServerRuntimeInfoInstance = Get-SCOMClassInstance -Class $classF5MonServerRuntimeInfo

$tempPath = $classF5MonServerRuntimeInfoInstance.'[ABC.F5.BIGIP.MonitoringServerRuntimeInfo].RemotePath'.Value
$testedAt = "Tested on: $(Get-Date -Format u) / $(([TimeZoneInfo]::Local).DisplayName)"

$F5BigIPHosts   = Import-Csv -Path $($tempPath + '\' + 'F5-BigIP-Hosts.csv')
$discoveryFiles = Get-ChildItem -Path $tempPath -Filter '*F5-Discovery-*.json' | Select-Object -ExpandProperty Name

 
foreach($f5HostItem in $F5BigIPHosts) {
  
	$f5HostName      = ''
	$f5HostIPAddress = ''
	$f5HostUrl       = ''

	if ($f5HostItem.HostName -match '[a-zA-Z0-9]{3,}') {
		$f5HostName = $f5HostItem.HostName
	}

	if ($f5HostItem.IPAddress -match '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}') {
		$f5HostIPAddress = $f5HostItem.IPAddress
	}

	if ($f5HostName -ne '') {
		if (Test-Connection -ComputerName $f5HostName -Count 2 -Quiet) {
			$f5HostUrl = $f5HostName
		}
	}
   
	if (($f5HostUrl -eq '') -and ($f5HostIPAddress -ne '')) {
		if (Test-Connection -ComputerName $f5HostIPAddress -Count 2 -Quiet) {     
			$f5HostUrl = $f5HostIPAddress
		} 
	}     

	if ($f5HostUrl -ne '') {

		if($discoveryItem -eq 'Info') {
			$discoveryFileContent = @()
			$discoveryFile = $discoveryFiles | Where-Object { ($_ -match $MonitorItem) -and ($_ -match $f5HostUrl)}
			foreach($dFile in $discoveryFile) {
				$discoveryFileContent += Get-Content -Path $($tempPath + '\' + $dFile) | ConvertFrom-Json
			}  
		} else {
			$discoveryFile        = $discoveryFiles | Where-Object { ($_ -match $MonitorItem) -and ($_ -match $f5HostUrl)}
			$discoveryFileContent = Get-Content -Path $($tempPath + '\' + $discoveryFile) | ConvertFrom-Json
		}

		$discoverySystemFile        = $discoveryFiles | Where-Object {($_ -match 'GeneralInfo') -and ($_ -match $f5HostUrl)}
		$discoverySystemFileContent = Get-Content -Path $($tempPath + '\' + $discoverySystemFile) | ConvertFrom-Json
		$systemNodeNameKey          = $($discoverySystemFileContent.GeneralInfo.SystemNodeName)		
				
		if ($MonitorItem -eq 'PoolStatus') {

			$classF5PoolStatus          = Get-SCOMClass -Name 'ABC.F5.BIGIP.PoolStatus'
			$classF5PoolStatusInstances = Get-SCOMClassInstance -Class $classF5PoolStatus		

			$classF5PoolStatusInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus].SystemNodeName'.Value -eq $systemNodeNameKey} | ForEach-Object {						

				$f5PoolStatus = $_

				[string]$f5PoolStatusName = [string]$($f5PoolStatus.'[ABC.F5.BIGIP.PoolStatus].PoolStatusName'.Value)
				[string]$key              = [string]$($f5PoolStatus.'[ABC.F5.BIGIP.PoolStatus].Key'.Value) 				
							
				$discoveryFileContent.PoolStatus | Where-Object {$_.ltmPoolStatusName -eq $f5PoolStatusName} | ForEach-Object {		  
							
					$poolName         = $_.ltmPoolStatusName
					$displayName      = 'F5-Pool' + $poolName
					$key              = $systemNodeNameKey + $displayName
					$poolEnabledState = $_.ltmPoolStatusEnabledState
					$poolAvailStatus  = $_.ltmPoolStatusAvailState			
					$rawInfo          = "PoolName: $($poolName) Key: $($key) System: $($poolEnabledState)"			
				
					If($poolEnabledState -eq "Enabled" ) {
						if($poolAvailStatus -eq "green") {
							$state      = 'Green'
							$supplement = "PoolStatus is green."
						} elseif($poolAvailStatus -eq "blue")  {
							$state      = 'Green'
							$supplement = "PoolStatus is not green, but still ok. - Current color code: $($poolAvailStatus)"
						} elseif($poolAvailStatus -eq "yellow") {
							$state      = 'Yellow'
							$supplement = "PoolStatus is yellow. - Current color code: $($poolAvailStatus)"						
						} elseif($poolAvailStatus -eq "red")  {
							$state      = 'Red'
							$supplement = "PoolStatus is red. - Current color code: $($poolAvailStatus)"
						} else {
							$state      = 'Yellow'
							$supplement = "PoolStatus is not green. - Current color code: $($poolAvailStatus)"
						}
					} else {
						$state      = 'Green'
						$supplement = "PoolStatus not enabled. - Not in use, so also no problem."
					}							

					$bag = $api.CreatePropertybag()					
					$bag.AddValue("PoolName",$poolName)
					$bag.AddValue("Key",$key)		
					$bag.AddValue("State",$state)				
					$bag.AddValue("Supplement",$supplement)		
					$bag.AddValue("TestedAt",$testedAt)			
					$bag

				} 
		
			} 

		} elseif ($MonitorItem -eq 'NodeAddr') {	

			$classF5NodeAddr          = Get-SCOMClass -Name 'ABC.F5.BIGIP.NodeAddress'
			$classF5NodeAddrInstances = Get-SCOMClassInstance -Class $classF5NodeAddr			

			$classF5NodeAddrInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $systemNodeNameKey} | ForEach-Object {						
				
				$f5NodeAddr             = $_
				[string]$f5NodeAddrName = [string]$($f5NodeAddr.'[ABC.F5.BIGIP.NodeAddress].NodeAddressName'.Value)
				[string]$key            = [string]$($f5NodeAddr.'[ABC.F5.BIGIP.NodeAddress].Key'.Value) 			
							
				$discoveryFileContent.NodeAddrTable | Where-Object {$_.ltmNodeAddrName -eq $f5NodeAddrName} | ForEach-Object {		  		
							
					$nodeAddressName         = $_.ltmNodeAddrName
					$displayName             = 'F5-NodeAddress' + $nodeAddressName
					$key                     = $systemNodeNameKey + $displayName						
					$nodeAddressMonitorRule  = $_.ltmNodeAddrMonitorRule
					$nodeAddrMonitorStatus   = $_.ltmNodeAddrMonitorStatus
					$nodeAddressEnabledState = $_.ltmNodeAddrEnabledState			
					$nodeAddrSessionStatus   = $_.ltmNodeAddrSessionStatus
			
					$rawInfo                 = "NodeAddrName: $($nodeAddressName) Key: $($key) EnableState: $($nodeAddressEnabledState)"				

					If($nodeAddrSessionStatus -ieq "Enabled" ) {
						if($nodeAddrMonitorStatus -ieq "up") {
							$state      = 'Green'
							$supplement = "NodeAddr is up."
						} else {
							$state      = 'Red'
							$supplement = "NodeAddr is not up. - Current Status: $($nodeAddrMonitorStatus) "
						}
					} else {
						$state      = 'Green'
						$supplement = "NodeAddr not enabled. - Not in use, so also no problem."
					}							

					$bag = $api.CreatePropertybag()					
					$bag.AddValue("NodeAddrName",$nodeAddressName)
					$bag.AddValue("Key",$key)		
					$bag.AddValue("State",$state)				
					$bag.AddValue("Supplement",$supplement)		
					$bag.AddValue("TestedAt",$testedAt)			
					$bag

				} 		
		} 				
	
	} elseif ($MonitorItem -eq 'TrafficGroup') {
				
		[string]$Threshold		

		$classF5TrafficGroupItem          = Get-SCOMClass -Name 'ABC.F5.BIGIP.TrafficGroupItem'
		$classF5TrafficGroupItemInstances = Get-SCOMClassInstance -Class $classF5TrafficGroupItem	

		$classF5TrafficGroupItemInstances | Where-Object {$_.'[ABC.F5.BIGIP.TrafficGroupItem].SystemNodeName'.Value -eq $systemNodeNameKey} | ForEach-Object {						
					
			$discoveryFileContent.TrafficGroupStatusTable | ForEach-Object {		
		
				$groupDeviceName     = $_.sysCmTrafficGroupStatusDeviceName
				$groupFailoverStatus = $_.sysCmTrafficGroupStatusFailoverStatus
				$groupName           = $_.sysCmTrafficGroupStatusTrafficGroup			
					
				$displayName         = 'F5-Traffic Group Item ' + $groupName + '-' + $groupDeviceName + ' On ' + $systemNodeNameKey  
				$key                 = $systemNodeNameKey + 'F5-TrafficGroupItem' + $groupName + $groupDeviceName		
				$key                 = $key.replace('/','').replace('-','')		
				
				if($Threshold) {
					$Threshold += '|^active|^standby'
				} else {
					$Threshold  = '^active|^standby'
				}

				if ($groupFailoverStatus -match $Threshold) {
					$state      = 'Green'
					$supplement = "FailoverStatus: $($groupFailoverStatus) matches on state of $($Threshold) "
				} else {
					$state      = 'Red'
					$supplement = "FailoverStatus: $($groupFailoverStatus) not matches on state of $($Threshold) "
				}	
			
				$bag = $api.CreatePropertybag()								
				$bag.AddValue("Key",$key)		
				$bag.AddValue("State",$state)				
				$bag.AddValue("Supplement",$supplement)		
				$bag.AddValue("TestedAt",$testedAt)			
				$bag		
			} 
	
		} 		
	
	} elseif ($MonitorItem -eq 'SyncStatus') {
				
		[string]$Threshold		

		$classF5SyncStatusItem          = Get-SCOMClass -Name 'ABC.F5.BIGIP.SyncStatusItem'
		$classF5SyncStatusItemInstances = Get-SCOMClassInstance -Class $classF5SyncStatusItem	

		$classF5SyncStatusItemInstances | Where-Object {$_.'[ABC.F5.BIGIP.SyncStatusItem].SystemNodeName'.Value -eq $systemNodeNameKey} | ForEach-Object {									

			$discoveryFileContent.SyncStatusDetails | ForEach-Object {		
		
				$syncStateItemPart = $_.sysCmSyncStatusDetailsDetails				
				$syncItemName      = $syncStateItemPart.Substring(0, $syncStateItemPart.IndexOf(' ')).replace(':','')				
				$displayName       = 'F5-SyncStatus Item ' + $syncItemName  + ' On ' + $systemNodeNameKey  
				$key               = $systemNodeNameKey + 'F5-SyncStatusItem' + $syncItemName									
				$itemState         = $syncStateItemPart.Substring($syncStateItemPart.IndexOf(' '),$syncStateItemPart.Length - $syncStateItemPart.IndexOf(' '))
				$itemState         = $itemState.replace('(','').replace(')','').trim()				

				if($Threshold) {
					$Threshold += '|^connected|^in\s{1}sync'
				} else {
					$Threshold  = '^connected|^in\s{1}sync'
				}

				if ($itemState -imatch $Threshold) {
					$state      = 'Green'
					$supplement = "SyncStatus: $($itemState) matches on state of $($Threshold) "
				} else {
					$state      = 'Red'
					$supplement = "SyncStatus: $($itemState) not matches on state of $($Threshold) "
				}	
			
				$bag = $api.CreatePropertybag()								
				$bag.AddValue("Key",$key)		
				$bag.AddValue("State",$state)				
				$bag.AddValue("Supplement",$supplement)		
				$bag.AddValue("TestedAt",$testedAt)			
				$bag		
			} 
	
		} 		
									
	} elseif ($MonitorItem -eq 'Info') {
			
		$generalInfo    = $($discoveryFileContent.GeneralInfo)
		$productInfo    = $($discoveryFileContent.ProductInfo)
		$productName    = $productInfo.ProductName
		$systemNodeName = $generalInfo.SystemNodeName			
		$displayName    = $productName + ' ' + $systemNodeName		

	} else {

	  $FOO = 'Undefined type!'

	}	

  } else {

		$api.LogScriptEvent('ABC.F5.BIGIP Monitor F5Applications.ps1',403,1,"Monitor F5Applications - strange error")
  
  } 

} ]]></ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>MonitorItem</Name>
                    <Value>$Config/MonitorItem$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>Threshold</Name>
                    <Value>$Config/Threshold$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>300</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PSScript" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </ProbeActionModuleType>
    </ModuleTypes>
    <MonitorTypes>
      <UnitMonitorType ID="ABC.F5.BIGIP.SystemHardware.Test.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="Success" NoDetection="false" />
          <MonitorTypeState ID="Failure" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="MonitorItem" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Key" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Threshold" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="Threshold" Selector="$Config/Threshold$" ParameterType="string" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DataSource" TypeID="ABC.F5.BIGIP.SystemHardware.Test.PropertyBag.Filtered">
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <MonitorItem>$Config/MonitorItem$</MonitorItem>
              <Key>$Config/Key$</Key>
              <Threshold>$Config/Threshold$</Threshold>
            </DataSource>
            <ProbeAction ID="PassThru" TypeID="System!System.PassThroughProbe" />
            <ProbeAction ID="Probe" TypeID="ABC.F5.BIGIP.SystemHardware.Probe">
              <MonitorItem>$Config/MonitorItem$</MonitorItem>
              <Threshold>$Config/Threshold$</Threshold>
            </ProbeAction>
            <ConditionDetection ID="FilterSuccess" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='State']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">Success</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="FilterFailure" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='State']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">Failure</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="Success">
              <Node ID="FilterSuccess">
                <Node ID="DataSource" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="Failure">
              <Node ID="FilterFailure">
                <Node ID="DataSource" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="ABC.F5.BIGIP.Applications.Test.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="UnderThreshold" NoDetection="false" />
          <MonitorTypeState ID="OverWarningThreshold" NoDetection="false" />
          <MonitorTypeState ID="OverErrorThreshold" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="MonitorItem" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Key" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Threshold" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="Threshold" Selector="$Config/Threshold$" ParameterType="string" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DataSource" TypeID="ABC.F5.BIGIP.Applications.Test.PropertyBag.Filtered">
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <MonitorItem>$Config/MonitorItem$</MonitorItem>
              <Key>$Config/Key$</Key>
              <Threshold>$Config/Threshold$</Threshold>
            </DataSource>
            <ProbeAction ID="PassThru" TypeID="System!System.PassThroughProbe" />
            <ProbeAction ID="Probe" TypeID="ABC.F5.BIGIP.Applications.Probe">
              <MonitorItem>$Config/MonitorItem$</MonitorItem>
              <Threshold>$Config/Threshold$</Threshold>
            </ProbeAction>
            <ConditionDetection ID="FilterUnderThreshold" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='State']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">Green</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="FilterOverWarningThreshold" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='State']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">Yellow</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="FilterOverErrorThreshold" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='State']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">Red</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="UnderThreshold">
              <Node ID="FilterUnderThreshold">
                <Node ID="DataSource" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="OverWarningThreshold">
              <Node ID="FilterOverWarningThreshold">
                <Node ID="DataSource" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="OverErrorThreshold">
              <Node ID="FilterOverErrorThreshold">
                <Node ID="DataSource" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
    </MonitorTypes>
  </TypeDefinitions>
  <Categories>
    <Category ID="ABC.F5.BIGIP.F5CPU.Category" Target="ABC.F5.BIGIP.F5CPU.Icon" Value="System!System.Internal.ManagementPack.Images.DiagramIcon" />
    <Category ID="ABC.F5.BIGIP.F5Memory.Category" Target="ABC.F5.BIGIP.F5Memory.Icon" Value="System!System.Internal.ManagementPack.Images.DiagramIcon" />
    <Category ID="ABC.F5.BIGIP.F5Disk.Category" Target="ABC.F5.BIGIP.F5Disk.Icon" Value="System!System.Internal.ManagementPack.Images.DiagramIcon" />
    <Category ID="ABC.F5.BIGIP.F5Pool.Category" Target="ABC.F5.BIGIP.F5Pool.Icon" Value="System!System.Internal.ManagementPack.Images.DiagramIcon" />
    <Category ID="ABC.F5.BIGIP.F5Node.Category" Target="ABC.F5.BIGIP.F5Node.Icon" Value="System!System.Internal.ManagementPack.Images.DiagramIcon" />
    <Category ID="ABC.F5.BIGIP.F5System.Category" Target="ABC.F5.BIGIP.F5System.Icon" Value="System!System.Internal.ManagementPack.Images.DiagramIcon" />
    <Category ID="ABC.F5.BIGIP.F5PoolGroup.Category" Target="ABC.F5.BIGIP.F5PoolGroup.Icon" Value="System!System.Internal.ManagementPack.Images.DiagramIcon" />
    <Category ID="ABC.F5.BIGIP.F5NodeGroup.Category" Target="ABC.F5.BIGIP.F5NodeGroup.Icon" Value="System!System.Internal.ManagementPack.Images.DiagramIcon" />
    <Category ID="ABC.F5.BIGIP.F5TrafficGroupItem.Category" Target="ABC.F5.BIGIP.F5TrafficGroupItem.Icon" Value="System!System.Internal.ManagementPack.Images.DiagramIcon" />
    <Category ID="ABC.F5.BIGIP.F5TrafficGroupItemGroup.Category" Target="ABC.F5.BIGIP.F5TrafficGroupItemGroup.Icon" Value="System!System.Internal.ManagementPack.Images.DiagramIcon" />
    <Category ID="ABC.F5.BIGIP.F5SyncStatus.Category" Target="ABC.F5.BIGIP.F5SyncStatus.Icon" Value="System!System.Internal.ManagementPack.Images.DiagramIcon" />
    <Category ID="ABC.F5.BIGIP.F5SyncStatus.CategoryGroup" Target="ABC.F5.BIGIP.F5SyncStatusGroup.Icon" Value="System!System.Internal.ManagementPack.Images.DiagramIcon" />
  </Categories>
  <Monitoring>
    <Discoveries>
      <Discovery ID="ABC.F5.BIGIP.Discovery.F5.BIGIP.System.System" Target="ABC.F5.BIGIP.MonitoringServer" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="ABC.F5.BIGIP.System" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>21600</IntervalSeconds>
          <SyncTime />
          <ScriptName>DiscoverF5Systems.ps1</ScriptName>
          <ScriptBody><![CDATA[param($sourceId,$managedEntityId,$discoveryItem,$tempPath,$f5MonServer)

$api           = New-Object -ComObject 'MOM.ScriptAPI'
$discoveryData = $api.CreateDiscoveryData(0, $sourceId, $managedEntityId)

$Global:Error.Clear()
$script:ErrorView      = 'NormalView'
$ErrorActionPreference = 'Continue'

$F5BigIPHosts = Import-Csv -Path $($tempPath + '\' + 'F5-BigIP-Hosts.csv')
$discoveryFiles = Get-ChildItem -Path $tempPath -Filter '*F5-Discovery-*.json' | Select-Object -ExpandProperty Name


foreach($f5HostItem in $F5BigIPHosts) {
  
  $f5HostName      = ''
  $f5HostIPAddress = ''
  $f5HostUrl       = ''

	if ($f5HostItem.HostName -match '[a-zA-Z0-9]{3,}') {
	$f5HostName = $f5HostItem.HostName
	}

	if ($f5HostItem.IPAddress -match '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}') {
	$f5HostIPAddress = $f5HostItem.IPAddress
	}

	if ($f5HostName -ne '') {
		if (Test-Connection -ComputerName $f5HostName -Count 2 -Quiet) {
			$f5HostUrl = $f5HostName
		}
	}
   
	if (($f5HostUrl -eq '') -and ($f5HostIPAddress -ne '')) {
		if (Test-Connection -ComputerName $f5HostIPAddress -Count 2 -Quiet) {     
			$f5HostUrl = $f5HostIPAddress
		} 
	}     
  
	if ($f5HostUrl -ne '') {

		if($discoveryItem -eq 'Info') {
		  $discoveryFileContent = @()
		  $discoveryFile = $discoveryFiles | Where-Object { ($_ -match $discoveryItem) -and ($_ -match $f5HostUrl)}
		  foreach($dFile in $discoveryFile) {
			  $discoveryFileContent += Get-Content -Path $($tempPath + '\' + $dFile) | ConvertFrom-Json
		  }  
		} else {
		  $discoveryFile        = $discoveryFiles | Where-Object { ($_ -match $discoveryItem) -and ($_ -match $f5HostUrl)}
		  $discoveryFileContent = Get-Content -Path $($tempPath + '\' + $discoveryFile) | ConvertFrom-Json
		}		

		$discoverySystemFile        = $discoveryFiles | Where-Object {($_ -match 'GeneralInfo') -and ($_ -match $f5HostUrl)}
		$discoverySystemFileContent = Get-Content -Path $($tempPath + '\' + $discoverySystemFile) | ConvertFrom-Json
		$systemNodeNameKey          = $($discoverySystemFileContent.GeneralInfo.SystemNodeName)

		if ($discoveryItem -eq 'CPU') {			

			$discoveryFileContent.F5CPU | ForEach-Object {		  
				$cpuID       = $($_.CPUId).ToString()
				$displayName = 'F5-CPU ' + $cpuID + ' On ' + $systemNodeNameKey
				$key         = $systemNodeNameKey + 'F5-CPU' + $cpuID

				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.CPU']$")			
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.CPU']/Id$",$cpuID)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.CPU']/SystemNodeName$",$systemNodeNameKey)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.CPU']/Key$",$key)
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
				$discoveryData.AddInstance($instance)
			}	

		} elseif ($discoveryItem -eq 'RemotePath') { 
					
			$shares = Invoke-Expression -Command "net share"		
						
			if ($shares -like "*$tempPath*") {
				$foo = 'Not required to share directory; exiting to avoid empty discovery.'				
				Exit 				
			} else {
				$shareName = (New-Guid).ToString() + '$'			
				Invoke-Expression -Command "net share $shareName=$tempPath /GRANT:Everyone,READ "						
				#Eventually use icacls to permit domain computers read on the NTFS level.	
				$remotePath  = '\\' + $f5MonServer + '\' + $shareName	
				$displayName = 'F5 MonitoringServer RuntimeInfo for ' + $systemNodeNameKey
				$Key         = $displayName

				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.MonitoringServerRuntimeInfo']$")			
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.MonitoringServerRuntimeInfo']/RemotePath$",$remotePath)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.MonitoringServerRuntimeInfo']/Key$",$Key)	
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
				$discoveryData.AddInstance($instance)
				$discoveryData
			}	
		
		} elseif ($discoveryItem -eq 'Disks') {			

			$discoveryFileContent.F5Disks | ForEach-Object {		
				$FullPath    = $($_.FullPath).ToString()
				$TotalSize   = $([int]($_.TotalSize / 1024)).ToString()
				$displayName = 'F5-Disk ' + $FullPath + ' On ' + $systemNodeNameKey 
				$key         = $systemNodeNameKey + 'F5-Disk' + $FullPath

				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.Disk']$")			
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Disk']/FullPathAttr$",$FullPath)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Disk']/TotalSize$",$TotalSize)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Disk']/SystemNodeName$",$systemNodeNameKey)
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Disk']/Key$",$key)
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)
				$discoveryData.AddInstance($instance)
			}

		} elseif ($discoveryItem -eq 'Memory') {		

			$discoveryFileContent.F5Memory | ForEach-Object {		
				$MemoryTotal = $([int]($_.MemoryTotal / 1024000000)).ToString()		
				$displayName = 'F5-Memory On ' + $systemNodeNameKey  
				$key         = $systemNodeNameKey + 'F5-Memory'
		
				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.Memory']$")						
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Memory']/MemoryTotal$",$MemoryTotal)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Memory']/SystemNodeName$",$systemNodeNameKey)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Memory']/Key$",$key)	
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)	
				$discoveryData.AddInstance($instance)
			}

		} elseif ($discoveryItem -eq 'Info') {				
	
			$generalInfo    = $($discoveryFileContent.GeneralInfo)
			$productInfo    = $($discoveryFileContent.ProductInfo)
			$systemNodeName = $generalInfo.SystemNodeName
			$systemRelease  = $generalInfo.SystemRelease	
			$systemName     = $generalInfo.SystemName
			$productDate    = $productInfo.ProductDate
			$productBuild   = $productInfo.ProductBuild
			$productName    = $productInfo.ProductName
			$productVersion = $productInfo.ProductVersion
			$IPAddress      = [System.Net.Dns]::GetHostByName($systemNodeName).AddressList.IPAddressToString.ToString()

			$displayName    = $productName + ' ' + $systemNodeName + 'F5 System'

			$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")	
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$",$systemNodeName)				
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$",$systemRelease)	
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$",$systemName)				
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$",$productDate)			
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$",$productBuild)			
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$",$productName)			
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$",$productVersion)			
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$",$IPAddress)		
			$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)
			$discoveryData.AddInstance($instance)

		} else {

		  $FOO = 'Undefined type!'

		}	

	} else {
		
		$api.LogScriptEvent('ABC.F5.BIGIP DiscoveryF5Systems.ps1',403,1,"DiscoveryF5Systems something went wrong. Info No of Objects: $($discoveryFileContent.count)")
  
	} #	END if ($f5HostUrl -ne '') 

} #END foreach($f5HostItem in $F5BigIPHosts)


$discoveryData]]></ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceId</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityId</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>discoveryItem</Name>
              <Value>Info</Value>
            </Parameter>
            <Parameter>
              <Name>tempPath</Name>
              <Value>$Target/Property[Type="ABC.F5.BIGIP.MonitoringServer"]/FilePath$</Value>
            </Parameter>
            <Parameter>
              <Name>f5MonServer</Name>
              <Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>300</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="ABC.F5.BIGIP.Discovery.F5.BIGIP.System.RemotePath" Target="ABC.F5.BIGIP.MonitoringServer" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="ABC.F5.BIGIP.MonitoringServerRuntimeInfo" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>3600</IntervalSeconds>
          <SyncTime />
          <ScriptName>DiscoverF5Systems.ps1</ScriptName>
          <ScriptBody><![CDATA[param($sourceId,$managedEntityId,$discoveryItem,$tempPath,$f5MonServer)

$api           = New-Object -ComObject 'MOM.ScriptAPI'
$discoveryData = $api.CreateDiscoveryData(0, $sourceId, $managedEntityId)

$Global:Error.Clear()
$script:ErrorView      = 'NormalView'
$ErrorActionPreference = 'Continue'

$F5BigIPHosts = Import-Csv -Path $($tempPath + '\' + 'F5-BigIP-Hosts.csv')
$discoveryFiles = Get-ChildItem -Path $tempPath -Filter '*F5-Discovery-*.json' | Select-Object -ExpandProperty Name


foreach($f5HostItem in $F5BigIPHosts) {
  
  $f5HostName      = ''
  $f5HostIPAddress = ''
  $f5HostUrl       = ''

	if ($f5HostItem.HostName -match '[a-zA-Z0-9]{3,}') {
	$f5HostName = $f5HostItem.HostName
	}

	if ($f5HostItem.IPAddress -match '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}') {
	$f5HostIPAddress = $f5HostItem.IPAddress
	}

	if ($f5HostName -ne '') {
		if (Test-Connection -ComputerName $f5HostName -Count 2 -Quiet) {
			$f5HostUrl = $f5HostName
		}
	}
   
	if (($f5HostUrl -eq '') -and ($f5HostIPAddress -ne '')) {
		if (Test-Connection -ComputerName $f5HostIPAddress -Count 2 -Quiet) {     
			$f5HostUrl = $f5HostIPAddress
		} 
	}     
  
	if ($f5HostUrl -ne '') {

		if($discoveryItem -eq 'Info') {
		  $discoveryFileContent = @()
		  $discoveryFile = $discoveryFiles | Where-Object { ($_ -match $discoveryItem) -and ($_ -match $f5HostUrl)}
		  foreach($dFile in $discoveryFile) {
			  $discoveryFileContent += Get-Content -Path $($tempPath + '\' + $dFile) | ConvertFrom-Json
		  }  
		} else {
		  $discoveryFile        = $discoveryFiles | Where-Object { ($_ -match $discoveryItem) -and ($_ -match $f5HostUrl)}
		  $discoveryFileContent = Get-Content -Path $($tempPath + '\' + $discoveryFile) | ConvertFrom-Json
		}		

		$discoverySystemFile        = $discoveryFiles | Where-Object {($_ -match 'GeneralInfo') -and ($_ -match $f5HostUrl)}
		$discoverySystemFileContent = Get-Content -Path $($tempPath + '\' + $discoverySystemFile) | ConvertFrom-Json
		$systemNodeNameKey          = $($discoverySystemFileContent.GeneralInfo.SystemNodeName)

		if ($discoveryItem -eq 'CPU') {			

			$discoveryFileContent.F5CPU | ForEach-Object {		  
				$cpuID       = $($_.CPUId).ToString()
				$displayName = 'F5-CPU ' + $cpuID + ' On ' + $systemNodeNameKey
				$key         = $systemNodeNameKey + 'F5-CPU' + $cpuID

				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.CPU']$")			
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.CPU']/Id$",$cpuID)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.CPU']/SystemNodeName$",$systemNodeNameKey)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.CPU']/Key$",$key)
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
				$discoveryData.AddInstance($instance)
			}	

		} elseif ($discoveryItem -eq 'RemotePath') { 
					
			$shares = Invoke-Expression -Command "net share"		
						
			if ($shares -like "*$tempPath*") {
				$foo = 'Not required to share directory; exiting to avoid empty discovery.'				
				Exit 				
			} else {
				$shareName = (New-Guid).ToString() + '$'			
				Invoke-Expression -Command "net share $shareName=$tempPath /GRANT:Everyone,READ "						
				#Eventually use icacls to permit domain computers read on the NTFS level.	
				$remotePath  = '\\' + $f5MonServer + '\' + $shareName	
				$displayName = 'F5 MonitoringServer RuntimeInfo for ' + $systemNodeNameKey
				$Key         = $displayName

				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.MonitoringServerRuntimeInfo']$")			
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.MonitoringServerRuntimeInfo']/RemotePath$",$remotePath)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.MonitoringServerRuntimeInfo']/Key$",$Key)	
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
				$discoveryData.AddInstance($instance)
				$discoveryData
			}	
		
		} elseif ($discoveryItem -eq 'Disks') {			

			$discoveryFileContent.F5Disks | ForEach-Object {		
				$FullPath    = $($_.FullPath).ToString()
				$TotalSize   = $([int]($_.TotalSize / 1024)).ToString()
				$displayName = 'F5-Disk ' + $FullPath + ' On ' + $systemNodeNameKey 
				$key         = $systemNodeNameKey + 'F5-Disk' + $FullPath

				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.Disk']$")			
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Disk']/FullPathAttr$",$FullPath)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Disk']/TotalSize$",$TotalSize)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Disk']/SystemNodeName$",$systemNodeNameKey)
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Disk']/Key$",$key)
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)
				$discoveryData.AddInstance($instance)
			}

		} elseif ($discoveryItem -eq 'Memory') {		

			$discoveryFileContent.F5Memory | ForEach-Object {		
				$MemoryTotal = $([int]($_.MemoryTotal / 1024000000)).ToString()		
				$displayName = 'F5-Memory On ' + $systemNodeNameKey  
				$key         = $systemNodeNameKey + 'F5-Memory'
		
				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.Memory']$")						
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Memory']/MemoryTotal$",$MemoryTotal)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Memory']/SystemNodeName$",$systemNodeNameKey)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Memory']/Key$",$key)	
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)	
				$discoveryData.AddInstance($instance)
			}

		} elseif ($discoveryItem -eq 'Info') {				
	
			$generalInfo    = $($discoveryFileContent.GeneralInfo)
			$productInfo    = $($discoveryFileContent.ProductInfo)
			$systemNodeName = $generalInfo.SystemNodeName
			$systemRelease  = $generalInfo.SystemRelease	
			$systemName     = $generalInfo.SystemName
			$productDate    = $productInfo.ProductDate
			$productBuild   = $productInfo.ProductBuild
			$productName    = $productInfo.ProductName
			$productVersion = $productInfo.ProductVersion
			$IPAddress      = [System.Net.Dns]::GetHostByName($systemNodeName).AddressList.IPAddressToString.ToString()

			$displayName    = $productName + ' ' + $systemNodeName + 'F5 System'

			$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")	
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$",$systemNodeName)				
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$",$systemRelease)	
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$",$systemName)				
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$",$productDate)			
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$",$productBuild)			
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$",$productName)			
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$",$productVersion)			
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$",$IPAddress)		
			$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)
			$discoveryData.AddInstance($instance)

		} else {

		  $FOO = 'Undefined type!'

		}	

	} else {
		
		$api.LogScriptEvent('ABC.F5.BIGIP DiscoveryF5Systems.ps1',403,1,"DiscoveryF5Systems something went wrong. Info No of Objects: $($discoveryFileContent.count)")
  
	} #	END if ($f5HostUrl -ne '') 

} #END foreach($f5HostItem in $F5BigIPHosts)


$discoveryData]]></ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceId</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityId</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>discoveryItem</Name>
              <Value>RemotePath</Value>
            </Parameter>
            <Parameter>
              <Name>tempPath</Name>
              <Value>$Target/Property[Type="ABC.F5.BIGIP.MonitoringServer"]/FilePath$</Value>
            </Parameter>
            <Parameter>
              <Name>f5MonServer</Name>
              <Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>300</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="ABC.F5.BIGIP.Discovery.F5.BIGIP.System.Memory" Target="ABC.F5.BIGIP.MonitoringServer" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="ABC.F5.BIGIP.Memory" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>21600</IntervalSeconds>
          <SyncTime />
          <ScriptName>DiscoverF5Systems.ps1</ScriptName>
          <ScriptBody><![CDATA[param($sourceId,$managedEntityId,$discoveryItem,$tempPath,$f5MonServer)

$api           = New-Object -ComObject 'MOM.ScriptAPI'
$discoveryData = $api.CreateDiscoveryData(0, $sourceId, $managedEntityId)

$Global:Error.Clear()
$script:ErrorView      = 'NormalView'
$ErrorActionPreference = 'Continue'

$F5BigIPHosts = Import-Csv -Path $($tempPath + '\' + 'F5-BigIP-Hosts.csv')
$discoveryFiles = Get-ChildItem -Path $tempPath -Filter '*F5-Discovery-*.json' | Select-Object -ExpandProperty Name


foreach($f5HostItem in $F5BigIPHosts) {
  
  $f5HostName      = ''
  $f5HostIPAddress = ''
  $f5HostUrl       = ''

	if ($f5HostItem.HostName -match '[a-zA-Z0-9]{3,}') {
	$f5HostName = $f5HostItem.HostName
	}

	if ($f5HostItem.IPAddress -match '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}') {
	$f5HostIPAddress = $f5HostItem.IPAddress
	}

	if ($f5HostName -ne '') {
		if (Test-Connection -ComputerName $f5HostName -Count 2 -Quiet) {
			$f5HostUrl = $f5HostName
		}
	}
   
	if (($f5HostUrl -eq '') -and ($f5HostIPAddress -ne '')) {
		if (Test-Connection -ComputerName $f5HostIPAddress -Count 2 -Quiet) {     
			$f5HostUrl = $f5HostIPAddress
		} 
	}     
  
	if ($f5HostUrl -ne '') {

		if($discoveryItem -eq 'Info') {
		  $discoveryFileContent = @()
		  $discoveryFile = $discoveryFiles | Where-Object { ($_ -match $discoveryItem) -and ($_ -match $f5HostUrl)}
		  foreach($dFile in $discoveryFile) {
			  $discoveryFileContent += Get-Content -Path $($tempPath + '\' + $dFile) | ConvertFrom-Json
		  }  
		} else {
		  $discoveryFile        = $discoveryFiles | Where-Object { ($_ -match $discoveryItem) -and ($_ -match $f5HostUrl)}
		  $discoveryFileContent = Get-Content -Path $($tempPath + '\' + $discoveryFile) | ConvertFrom-Json
		}		

		$discoverySystemFile        = $discoveryFiles | Where-Object {($_ -match 'GeneralInfo') -and ($_ -match $f5HostUrl)}
		$discoverySystemFileContent = Get-Content -Path $($tempPath + '\' + $discoverySystemFile) | ConvertFrom-Json
		$systemNodeNameKey          = $($discoverySystemFileContent.GeneralInfo.SystemNodeName)

		if ($discoveryItem -eq 'CPU') {			

			$discoveryFileContent.F5CPU | ForEach-Object {		  
				$cpuID       = $($_.CPUId).ToString()
				$displayName = 'F5-CPU ' + $cpuID + ' On ' + $systemNodeNameKey
				$key         = $systemNodeNameKey + 'F5-CPU' + $cpuID

				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.CPU']$")			
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.CPU']/Id$",$cpuID)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.CPU']/SystemNodeName$",$systemNodeNameKey)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.CPU']/Key$",$key)
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
				$discoveryData.AddInstance($instance)
			}	

		} elseif ($discoveryItem -eq 'RemotePath') { 
					
			$shares = Invoke-Expression -Command "net share"		
						
			if ($shares -like "*$tempPath*") {
				$foo = 'Not required to share directory; exiting to avoid empty discovery.'				
				Exit 				
			} else {
				$shareName = (New-Guid).ToString() + '$'			
				Invoke-Expression -Command "net share $shareName=$tempPath /GRANT:Everyone,READ "						
				#Eventually use icacls to permit domain computers read on the NTFS level.	
				$remotePath  = '\\' + $f5MonServer + '\' + $shareName	
				$displayName = 'F5 MonitoringServer RuntimeInfo for ' + $systemNodeNameKey
				$Key         = $displayName

				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.MonitoringServerRuntimeInfo']$")			
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.MonitoringServerRuntimeInfo']/RemotePath$",$remotePath)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.MonitoringServerRuntimeInfo']/Key$",$Key)	
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
				$discoveryData.AddInstance($instance)
				$discoveryData
			}	
		
		} elseif ($discoveryItem -eq 'Disks') {			

			$discoveryFileContent.F5Disks | ForEach-Object {		
				$FullPath    = $($_.FullPath).ToString()
				$TotalSize   = $([int]($_.TotalSize / 1024)).ToString()
				$displayName = 'F5-Disk ' + $FullPath + ' On ' + $systemNodeNameKey 
				$key         = $systemNodeNameKey + 'F5-Disk' + $FullPath

				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.Disk']$")			
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Disk']/FullPathAttr$",$FullPath)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Disk']/TotalSize$",$TotalSize)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Disk']/SystemNodeName$",$systemNodeNameKey)
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Disk']/Key$",$key)
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)
				$discoveryData.AddInstance($instance)
			}

		} elseif ($discoveryItem -eq 'Memory') {		

			$discoveryFileContent.F5Memory | ForEach-Object {		
				$MemoryTotal = $([int]($_.MemoryTotal / 1024000000)).ToString()		
				$displayName = 'F5-Memory On ' + $systemNodeNameKey  
				$key         = $systemNodeNameKey + 'F5-Memory'
		
				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.Memory']$")						
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Memory']/MemoryTotal$",$MemoryTotal)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Memory']/SystemNodeName$",$systemNodeNameKey)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Memory']/Key$",$key)	
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)	
				$discoveryData.AddInstance($instance)
			}

		} elseif ($discoveryItem -eq 'Info') {				
	
			$generalInfo    = $($discoveryFileContent.GeneralInfo)
			$productInfo    = $($discoveryFileContent.ProductInfo)
			$systemNodeName = $generalInfo.SystemNodeName
			$systemRelease  = $generalInfo.SystemRelease	
			$systemName     = $generalInfo.SystemName
			$productDate    = $productInfo.ProductDate
			$productBuild   = $productInfo.ProductBuild
			$productName    = $productInfo.ProductName
			$productVersion = $productInfo.ProductVersion
			$IPAddress      = [System.Net.Dns]::GetHostByName($systemNodeName).AddressList.IPAddressToString.ToString()

			$displayName    = $productName + ' ' + $systemNodeName + 'F5 System'

			$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")	
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$",$systemNodeName)				
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$",$systemRelease)	
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$",$systemName)				
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$",$productDate)			
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$",$productBuild)			
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$",$productName)			
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$",$productVersion)			
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$",$IPAddress)		
			$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)
			$discoveryData.AddInstance($instance)

		} else {

		  $FOO = 'Undefined type!'

		}	

	} else {
		
		$api.LogScriptEvent('ABC.F5.BIGIP DiscoveryF5Systems.ps1',403,1,"DiscoveryF5Systems something went wrong. Info No of Objects: $($discoveryFileContent.count)")
  
	} #	END if ($f5HostUrl -ne '') 

} #END foreach($f5HostItem in $F5BigIPHosts)


$discoveryData]]></ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceId</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityId</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>discoveryItem</Name>
              <Value>Memory</Value>
            </Parameter>
            <Parameter>
              <Name>tempPath</Name>
              <Value>$Target/Property[Type="ABC.F5.BIGIP.MonitoringServer"]/FilePath$</Value>
            </Parameter>
            <Parameter>
              <Name>f5MonServer</Name>
              <Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>300</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="ABC.F5.BIGIP.Discovery.F5.BIGIP.System.HardwareRelations" Target="SC!Microsoft.SystemCenter.RootManagementServer" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="ABC.F5.BIGIP.SystemHostsCPU" />
          <DiscoveryRelationship TypeID="ABC.F5.BIGIP.SystemHostsDisk" />
          <DiscoveryRelationship TypeID="ABC.F5.BIGIP.SystemHostsMemory" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>21600</IntervalSeconds>
          <SyncTime />
          <ScriptName>DiscoverF5SystemHardwareRelations.ps1.ps1</ScriptName>
          <ScriptBody><![CDATA[param($sourceId,$managedEntityId,$tempPath)


$classF5MonServerRuntimeInfo = Get-SCOMClass -Name 'ABC.F5.BIGIP.MonitoringServerRuntimeInfo'
$classF5MonServerRuntimeInfoInstance = Get-SCOMClassInstance -Class $classF5MonServerRuntimeInfo
$tempPath = $classF5MonServerRuntimeInfoInstance.'[ABC.F5.BIGIP.MonitoringServerRuntimeInfo].RemotePath'.Value


$api           = New-Object -ComObject 'MOM.ScriptAPI'
$discoveryData = $api.CreateDiscoveryData(0,$sourceId,$managedEntityId)

$classF5System                    = Get-SCOMClass -Name 'ABC.F5.BIGIP.System'
$classF5SystemInstances           = Get-SCOMClassInstance -Class $classF5System

$classF5CPU                       = Get-SCOMClass -Name 'ABC.F5.BIGIP.CPU'
$classF5CPUInstances              = Get-SCOMClassInstance -Class $classF5CPU

$classF5Memory                    = Get-SCOMClass -Name 'ABC.F5.BIGIP.Memory'
$classF5MemoryInstances           = Get-SCOMClassInstance -Class $classF5Memory

$classF5Disk                      = Get-SCOMClass -Name 'ABC.F5.BIGIP.Disk'
$classF5DiskInstances             = Get-SCOMClassInstance -Class $classF5Disk


$classF5SystemInstances | ForEach-Object {	
	
	$classF5SystemInstance = $_

	if ($classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.value -eq '') {

		$foo = 'bar'

	} else {

		$f5SystemNodeName = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value
			
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	
		
		$classF5CPUInstances | Where-Object {$_.'[ABC.F5.BIGIP.CPU].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {						

			[string]$cpuID = [string]$($_.'[ABC.F5.BIGIP.CPU].Id'.Value)
			[string]$key   = [string]$($_.'[ABC.F5.BIGIP.CPU].Key'.Value) 			

			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.CPU']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.CPU']/Id$", $cpuID)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.CPU']/Key$", $key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.CPU']/SystemNodeName$", $f5SystemNodeName)			
			$discoveryData.AddInstance($targetInstance)
			
			$relInstance        = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsCPU']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		}

		$classF5DiskInstances | Where-Object {$_.'[ABC.F5.BIGIP.Disk].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {						

			[string]$totalSize = [string]$($_.'[ABC.F5.BIGIP.Disk].TotalSize'.Value) 	
			[string]$key       = [string]$($_.'[ABC.F5.BIGIP.Disk].Key'.Value) 	
			
			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.Disk']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Disk']/TotalSize$", $totalSize)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Disk']/FullPathAttr$", $_.'[ABC.F5.BIGIP.Disk].FullPathAttr'.Value)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Disk']/Key$", $key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Disk']/SystemNodeName$", $f5SystemNodeName)			
			$discoveryData.AddInstance($targetInstance)

			$relInstance        = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsDisk']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		}		

		$classF5MemoryInstances | Where-Object {$_.'[ABC.F5.BIGIP.Memory].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {						

			[string]$memoryTotal = [string]$($_.'[ABC.F5.BIGIP.Memory].MemoryTotal'.Value) 	
			[string]$key         = [string]$($_.'[ABC.F5.BIGIP.Memory].Key'.Value) 
			
			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.Memory']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Memory']/MemoryTotal$", $memoryTotal)			
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Memory']/Key$", $key)			
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Memory']/SystemNodeName$", $f5SystemNodeName)			
			$discoveryData.AddInstance($targetInstance)

			$relInstance        = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsMemory']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		}
	
	}
	
}

$discoveryData]]></ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceId</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityId</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>300</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="ABC.F5.BIGIP.Discovery.F5.BIGIP.System.Disks" Target="ABC.F5.BIGIP.MonitoringServer" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="ABC.F5.BIGIP.Disk" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>21600</IntervalSeconds>
          <SyncTime />
          <ScriptName>DiscoverF5Systems.ps1</ScriptName>
          <ScriptBody><![CDATA[param($sourceId,$managedEntityId,$discoveryItem,$tempPath,$f5MonServer)

$api           = New-Object -ComObject 'MOM.ScriptAPI'
$discoveryData = $api.CreateDiscoveryData(0, $sourceId, $managedEntityId)

$Global:Error.Clear()
$script:ErrorView      = 'NormalView'
$ErrorActionPreference = 'Continue'

$F5BigIPHosts = Import-Csv -Path $($tempPath + '\' + 'F5-BigIP-Hosts.csv')
$discoveryFiles = Get-ChildItem -Path $tempPath -Filter '*F5-Discovery-*.json' | Select-Object -ExpandProperty Name


foreach($f5HostItem in $F5BigIPHosts) {
  
  $f5HostName      = ''
  $f5HostIPAddress = ''
  $f5HostUrl       = ''

	if ($f5HostItem.HostName -match '[a-zA-Z0-9]{3,}') {
	$f5HostName = $f5HostItem.HostName
	}

	if ($f5HostItem.IPAddress -match '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}') {
	$f5HostIPAddress = $f5HostItem.IPAddress
	}

	if ($f5HostName -ne '') {
		if (Test-Connection -ComputerName $f5HostName -Count 2 -Quiet) {
			$f5HostUrl = $f5HostName
		}
	}
   
	if (($f5HostUrl -eq '') -and ($f5HostIPAddress -ne '')) {
		if (Test-Connection -ComputerName $f5HostIPAddress -Count 2 -Quiet) {     
			$f5HostUrl = $f5HostIPAddress
		} 
	}     
  
	if ($f5HostUrl -ne '') {

		if($discoveryItem -eq 'Info') {
		  $discoveryFileContent = @()
		  $discoveryFile = $discoveryFiles | Where-Object { ($_ -match $discoveryItem) -and ($_ -match $f5HostUrl)}
		  foreach($dFile in $discoveryFile) {
			  $discoveryFileContent += Get-Content -Path $($tempPath + '\' + $dFile) | ConvertFrom-Json
		  }  
		} else {
		  $discoveryFile        = $discoveryFiles | Where-Object { ($_ -match $discoveryItem) -and ($_ -match $f5HostUrl)}
		  $discoveryFileContent = Get-Content -Path $($tempPath + '\' + $discoveryFile) | ConvertFrom-Json
		}		

		$discoverySystemFile        = $discoveryFiles | Where-Object {($_ -match 'GeneralInfo') -and ($_ -match $f5HostUrl)}
		$discoverySystemFileContent = Get-Content -Path $($tempPath + '\' + $discoverySystemFile) | ConvertFrom-Json
		$systemNodeNameKey          = $($discoverySystemFileContent.GeneralInfo.SystemNodeName)

		if ($discoveryItem -eq 'CPU') {			

			$discoveryFileContent.F5CPU | ForEach-Object {		  
				$cpuID       = $($_.CPUId).ToString()
				$displayName = 'F5-CPU ' + $cpuID + ' On ' + $systemNodeNameKey
				$key         = $systemNodeNameKey + 'F5-CPU' + $cpuID

				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.CPU']$")			
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.CPU']/Id$",$cpuID)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.CPU']/SystemNodeName$",$systemNodeNameKey)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.CPU']/Key$",$key)
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
				$discoveryData.AddInstance($instance)
			}	

		} elseif ($discoveryItem -eq 'RemotePath') { 
					
			$shares = Invoke-Expression -Command "net share"		
						
			if ($shares -like "*$tempPath*") {
				$foo = 'Not required to share directory; exiting to avoid empty discovery.'				
				Exit 				
			} else {
				$shareName = (New-Guid).ToString() + '$'			
				Invoke-Expression -Command "net share $shareName=$tempPath /GRANT:Everyone,READ "						
				#Eventually use icacls to permit domain computers read on the NTFS level.	
				$remotePath  = '\\' + $f5MonServer + '\' + $shareName	
				$displayName = 'F5 MonitoringServer RuntimeInfo for ' + $systemNodeNameKey
				$Key         = $displayName

				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.MonitoringServerRuntimeInfo']$")			
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.MonitoringServerRuntimeInfo']/RemotePath$",$remotePath)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.MonitoringServerRuntimeInfo']/Key$",$Key)	
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
				$discoveryData.AddInstance($instance)
				$discoveryData
			}	
		
		} elseif ($discoveryItem -eq 'Disks') {			

			$discoveryFileContent.F5Disks | ForEach-Object {		
				$FullPath    = $($_.FullPath).ToString()
				$TotalSize   = $([int]($_.TotalSize / 1024)).ToString()
				$displayName = 'F5-Disk ' + $FullPath + ' On ' + $systemNodeNameKey 
				$key         = $systemNodeNameKey + 'F5-Disk' + $FullPath

				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.Disk']$")			
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Disk']/FullPathAttr$",$FullPath)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Disk']/TotalSize$",$TotalSize)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Disk']/SystemNodeName$",$systemNodeNameKey)
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Disk']/Key$",$key)
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)
				$discoveryData.AddInstance($instance)
			}

		} elseif ($discoveryItem -eq 'Memory') {		

			$discoveryFileContent.F5Memory | ForEach-Object {		
				$MemoryTotal = $([int]($_.MemoryTotal / 1024000000)).ToString()		
				$displayName = 'F5-Memory On ' + $systemNodeNameKey  
				$key         = $systemNodeNameKey + 'F5-Memory'
		
				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.Memory']$")						
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Memory']/MemoryTotal$",$MemoryTotal)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Memory']/SystemNodeName$",$systemNodeNameKey)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Memory']/Key$",$key)	
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)	
				$discoveryData.AddInstance($instance)
			}

		} elseif ($discoveryItem -eq 'Info') {				
	
			$generalInfo    = $($discoveryFileContent.GeneralInfo)
			$productInfo    = $($discoveryFileContent.ProductInfo)
			$systemNodeName = $generalInfo.SystemNodeName
			$systemRelease  = $generalInfo.SystemRelease	
			$systemName     = $generalInfo.SystemName
			$productDate    = $productInfo.ProductDate
			$productBuild   = $productInfo.ProductBuild
			$productName    = $productInfo.ProductName
			$productVersion = $productInfo.ProductVersion
			$IPAddress      = [System.Net.Dns]::GetHostByName($systemNodeName).AddressList.IPAddressToString.ToString()

			$displayName    = $productName + ' ' + $systemNodeName + 'F5 System'

			$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")	
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$",$systemNodeName)				
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$",$systemRelease)	
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$",$systemName)				
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$",$productDate)			
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$",$productBuild)			
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$",$productName)			
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$",$productVersion)			
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$",$IPAddress)		
			$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)
			$discoveryData.AddInstance($instance)

		} else {

		  $FOO = 'Undefined type!'

		}	

	} else {
		
		$api.LogScriptEvent('ABC.F5.BIGIP DiscoveryF5Systems.ps1',403,1,"DiscoveryF5Systems something went wrong. Info No of Objects: $($discoveryFileContent.count)")
  
	} #	END if ($f5HostUrl -ne '') 

} #END foreach($f5HostItem in $F5BigIPHosts)


$discoveryData]]></ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceId</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityId</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>discoveryItem</Name>
              <Value>Disks</Value>
            </Parameter>
            <Parameter>
              <Name>tempPath</Name>
              <Value>$Target/Property[Type="ABC.F5.BIGIP.MonitoringServer"]/FilePath$</Value>
            </Parameter>
            <Parameter>
              <Name>f5MonServer</Name>
              <Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>300</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="ABC.F5.BIGIP.Discovery.F5.BIGIP.System.CPU" Target="ABC.F5.BIGIP.MonitoringServer" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="ABC.F5.BIGIP.CPU" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>21600</IntervalSeconds>
          <SyncTime />
          <ScriptName>DiscoverF5Systems.ps1</ScriptName>
          <ScriptBody><![CDATA[param($sourceId,$managedEntityId,$discoveryItem,$tempPath,$f5MonServer)

$api           = New-Object -ComObject 'MOM.ScriptAPI'
$discoveryData = $api.CreateDiscoveryData(0, $sourceId, $managedEntityId)

$Global:Error.Clear()
$script:ErrorView      = 'NormalView'
$ErrorActionPreference = 'Continue'

$F5BigIPHosts = Import-Csv -Path $($tempPath + '\' + 'F5-BigIP-Hosts.csv')
$discoveryFiles = Get-ChildItem -Path $tempPath -Filter '*F5-Discovery-*.json' | Select-Object -ExpandProperty Name


foreach($f5HostItem in $F5BigIPHosts) {
  
  $f5HostName      = ''
  $f5HostIPAddress = ''
  $f5HostUrl       = ''

	if ($f5HostItem.HostName -match '[a-zA-Z0-9]{3,}') {
	$f5HostName = $f5HostItem.HostName
	}

	if ($f5HostItem.IPAddress -match '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}') {
	$f5HostIPAddress = $f5HostItem.IPAddress
	}

	if ($f5HostName -ne '') {
		if (Test-Connection -ComputerName $f5HostName -Count 2 -Quiet) {
			$f5HostUrl = $f5HostName
		}
	}
   
	if (($f5HostUrl -eq '') -and ($f5HostIPAddress -ne '')) {
		if (Test-Connection -ComputerName $f5HostIPAddress -Count 2 -Quiet) {     
			$f5HostUrl = $f5HostIPAddress
		} 
	}     
  
	if ($f5HostUrl -ne '') {

		if($discoveryItem -eq 'Info') {
		  $discoveryFileContent = @()
		  $discoveryFile = $discoveryFiles | Where-Object { ($_ -match $discoveryItem) -and ($_ -match $f5HostUrl)}
		  foreach($dFile in $discoveryFile) {
			  $discoveryFileContent += Get-Content -Path $($tempPath + '\' + $dFile) | ConvertFrom-Json
		  }  
		} else {
		  $discoveryFile        = $discoveryFiles | Where-Object { ($_ -match $discoveryItem) -and ($_ -match $f5HostUrl)}
		  $discoveryFileContent = Get-Content -Path $($tempPath + '\' + $discoveryFile) | ConvertFrom-Json
		}		

		$discoverySystemFile        = $discoveryFiles | Where-Object {($_ -match 'GeneralInfo') -and ($_ -match $f5HostUrl)}
		$discoverySystemFileContent = Get-Content -Path $($tempPath + '\' + $discoverySystemFile) | ConvertFrom-Json
		$systemNodeNameKey          = $($discoverySystemFileContent.GeneralInfo.SystemNodeName)

		if ($discoveryItem -eq 'CPU') {			

			$discoveryFileContent.F5CPU | ForEach-Object {		  
				$cpuID       = $($_.CPUId).ToString()
				$displayName = 'F5-CPU ' + $cpuID + ' On ' + $systemNodeNameKey
				$key         = $systemNodeNameKey + 'F5-CPU' + $cpuID

				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.CPU']$")			
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.CPU']/Id$",$cpuID)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.CPU']/SystemNodeName$",$systemNodeNameKey)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.CPU']/Key$",$key)
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
				$discoveryData.AddInstance($instance)
			}	

		} elseif ($discoveryItem -eq 'RemotePath') { 
					
			$shares = Invoke-Expression -Command "net share"		
						
			if ($shares -like "*$tempPath*") {
				$foo = 'Not required to share directory; exiting to avoid empty discovery.'				
				Exit 				
			} else {
				$shareName = (New-Guid).ToString() + '$'			
				Invoke-Expression -Command "net share $shareName=$tempPath /GRANT:Everyone,READ "						
				#Eventually use icacls to permit domain computers read on the NTFS level.	
				$remotePath  = '\\' + $f5MonServer + '\' + $shareName	
				$displayName = 'F5 MonitoringServer RuntimeInfo for ' + $systemNodeNameKey
				$Key         = $displayName

				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.MonitoringServerRuntimeInfo']$")			
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.MonitoringServerRuntimeInfo']/RemotePath$",$remotePath)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.MonitoringServerRuntimeInfo']/Key$",$Key)	
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
				$discoveryData.AddInstance($instance)
				$discoveryData
			}	
		
		} elseif ($discoveryItem -eq 'Disks') {			

			$discoveryFileContent.F5Disks | ForEach-Object {		
				$FullPath    = $($_.FullPath).ToString()
				$TotalSize   = $([int]($_.TotalSize / 1024)).ToString()
				$displayName = 'F5-Disk ' + $FullPath + ' On ' + $systemNodeNameKey 
				$key         = $systemNodeNameKey + 'F5-Disk' + $FullPath

				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.Disk']$")			
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Disk']/FullPathAttr$",$FullPath)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Disk']/TotalSize$",$TotalSize)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Disk']/SystemNodeName$",$systemNodeNameKey)
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Disk']/Key$",$key)
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)
				$discoveryData.AddInstance($instance)
			}

		} elseif ($discoveryItem -eq 'Memory') {		

			$discoveryFileContent.F5Memory | ForEach-Object {		
				$MemoryTotal = $([int]($_.MemoryTotal / 1024000000)).ToString()		
				$displayName = 'F5-Memory On ' + $systemNodeNameKey  
				$key         = $systemNodeNameKey + 'F5-Memory'
		
				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.Memory']$")						
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Memory']/MemoryTotal$",$MemoryTotal)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Memory']/SystemNodeName$",$systemNodeNameKey)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.Memory']/Key$",$key)	
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)	
				$discoveryData.AddInstance($instance)
			}

		} elseif ($discoveryItem -eq 'Info') {				
	
			$generalInfo    = $($discoveryFileContent.GeneralInfo)
			$productInfo    = $($discoveryFileContent.ProductInfo)
			$systemNodeName = $generalInfo.SystemNodeName
			$systemRelease  = $generalInfo.SystemRelease	
			$systemName     = $generalInfo.SystemName
			$productDate    = $productInfo.ProductDate
			$productBuild   = $productInfo.ProductBuild
			$productName    = $productInfo.ProductName
			$productVersion = $productInfo.ProductVersion
			$IPAddress      = [System.Net.Dns]::GetHostByName($systemNodeName).AddressList.IPAddressToString.ToString()

			$displayName    = $productName + ' ' + $systemNodeName + 'F5 System'

			$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")	
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$",$systemNodeName)				
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$",$systemRelease)	
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$",$systemName)				
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$",$productDate)			
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$",$productBuild)			
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$",$productName)			
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$",$productVersion)			
			$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$",$IPAddress)		
			$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)
			$discoveryData.AddInstance($instance)

		} else {

		  $FOO = 'Undefined type!'

		}	

	} else {
		
		$api.LogScriptEvent('ABC.F5.BIGIP DiscoveryF5Systems.ps1',403,1,"DiscoveryF5Systems something went wrong. Info No of Objects: $($discoveryFileContent.count)")
  
	} #	END if ($f5HostUrl -ne '') 

} #END foreach($f5HostItem in $F5BigIPHosts)


$discoveryData]]></ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceId</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityId</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>discoveryItem</Name>
              <Value>CPU</Value>
            </Parameter>
            <Parameter>
              <Name>tempPath</Name>
              <Value>$Target/Property[Type="ABC.F5.BIGIP.MonitoringServer"]/FilePath$</Value>
            </Parameter>
            <Parameter>
              <Name>f5MonServer</Name>
              <Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>300</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="ABC.F5.BIGIP.Discovery.F5.BIGIP.MonitoringServer" Target="Windows!Microsoft.Windows.Server.Computer" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="ABC.F5.BIGIP.MonitoringServer" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.FilteredRegistryDiscoveryProvider">
          <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <RegistryAttributeDefinitions>
            <RegistryAttributeDefinition>
              <AttributeName>KeyExists</AttributeName>
              <Path>SOFTWARE\ABCIT\F5BigIPMonitoringServer</Path>
              <PathType>0</PathType>
              <AttributeType>0</AttributeType>
            </RegistryAttributeDefinition>
            <RegistryAttributeDefinition>
              <AttributeName>FilePath</AttributeName>
              <Path>SOFTWARE\ABCIT\F5BigIPMonitoringServer\FilePath</Path>
              <PathType>1</PathType>
              <AttributeType>1</AttributeType>
            </RegistryAttributeDefinition>
          </RegistryAttributeDefinitions>
          <Frequency>86400</Frequency>
          <ClassId>$MPElement[Name="ABC.F5.BIGIP.MonitoringServer"]$</ClassId>
          <InstanceSettings>
            <Settings>
              <Setting>
                <Name>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Name>
                <Value>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="System!System.Entity"]/DisplayName$</Name>
                <Value>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
              </Setting>
              <Setting>
                <Name>$MPElement[Name="ABC.F5.BIGIP.MonitoringServer"]/FilePath$</Name>
                <Value>$Data/Values/FilePath$</Value>
              </Setting>
            </Settings>
          </InstanceSettings>
          <Expression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery>Values/KeyExists</XPathQuery>
              </ValueExpression>
              <Operator>Equal</Operator>
              <ValueExpression>
                <Value>true</Value>
              </ValueExpression>
            </SimpleExpression>
          </Expression>
        </DataSource>
      </Discovery>
      <Discovery ID="ABC.F5.BIGIP.Discovery.F5.BIGIP.Application.TrafficGroupItemGroups" Target="SC!Microsoft.SystemCenter.RootManagementServer" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="ABC.F5.BIGIP.TrafficGroupItemGroupHostsTrafficGroupItem" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>3600</IntervalSeconds>
          <SyncTime />
          <ScriptName>DiscoverF5ApplicationRelations.ps1</ScriptName>
          <ScriptBody><![CDATA[param($sourceId,$managedEntityId,$groupItem)

$api                    = New-Object -ComObject 'MOM.ScriptAPI'
$discoveryData          = $api.CreateDiscoveryData(0, $sourceId, $managedEntityId)

$classF5System          = Get-SCOMClass -Name 'ABC.F5.BIGIP.System'
$classF5SystemInstances = Get-SCOMClassInstance -Class $classF5System
$f5NodeNames            = $classF5SystemInstances.'[ABC.F5.BIGIP.System].SystemNodeName'.Value


if ($groupItem -eq 'PoolStatusGroup') {

	$classF5PoolStatus          = Get-SCOMClass -Name 'ABC.F5.BIGIP.PoolStatus'
	$classF5PoolStatusInstances = Get-SCOMClassInstance -Class $classF5PoolStatus

	foreach ($f5NodeName in $f5NodeNames) {

		$displayName   = 'F5-PoolStatusGroup' + ' On ' + $f5NodeName
		$Key           = $f5NodeName + 'F5-PoolStatusGroup' 
		$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']$")
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/Key$",$Key)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/SystemNodeName$",$f5NodeName)	
		$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		

		$classF5PoolStatusInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object {
  
			$poolStatusInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']$")
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/PoolStatusEnabledState$",$_.'[ABC.F5.BIGIP.PoolStatus].PoolStatusEnabledState'.Value)	
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/PoolStatusName$",$_.'[ABC.F5.BIGIP.PoolStatus].PoolStatusName'.Value)	
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/SystemNodeName$",$_.'[ABC.F5.BIGIP.PoolStatus].SystemNodeName'.Value)	
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/Key$",$_.'[ABC.F5.BIGIP.PoolStatus].Key'.Value)
			$poolStatusInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $_.'[System.Entity].DisplayName'.Value)		
  
			$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatusGroupHostsPoolStatus']$")
			$relInstance.Source = $groupInstance
			$relInstance.Target = $poolStatusInstance
			$discoveryData.AddInstance($relInstance)
  
		} #END $classF5SystemInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'NodeAddressGroup') {
		
	$classF5NodeAddress          = Get-SCOMClass -Name 'ABC.F5.BIGIP.NodeAddress'
	$classF5NodeAddressInstances = Get-SCOMClassInstance -Class $classF5NodeAddress	

	foreach ($f5NodeName in $f5NodeNames) {

		$displayName   = 'F5-NodeAddressGroup' + ' On ' + $f5NodeName 
		$Key           = $f5NodeName + 'F5-NodeAddressGroup' 
		$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']$")
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/Key$",$Key)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/SystemNodeName$",$f5NodeName)	
		$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)					

		$classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object {  
						
			$nodeAddressName          = $_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressName'.Value
			$displayName              = $f5NodeName + 'F5-NodeAddress' + $nodeAddressName			
			$key                      = $displayName
			
			$nodeAddressInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']$")			
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressName$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressName'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressEnabledState$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressEnabledState'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressMonitorRule$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressMonitorRule'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressSessionStatus$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressSessionStatus'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/SystemNodeName$",$f5NodeName)
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/Key$",$key)
			$nodeAddressInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $_.'[System.Entity].DisplayName'.Value)		
			
			$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddressGroupHostsNodeAddress']$")
			$relInstance.Source = $groupInstance
			$relInstance.Target = $nodeAddressInstance
			$discoveryData.AddInstance($relInstance)
  
		} #END $classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'TrafficGroupInstancesGroup') {
		
	$classF5TrafficGroupItem          = Get-SCOMClass -Name 'ABC.F5.BIGIP.TrafficGroupItem'
	$classF5TrafficGroupItemInstances = Get-SCOMClassInstance -Class $classF5TrafficGroupItem		

	foreach ($f5NodeName in $f5NodeNames) {		
		
		$groups     = $classF5TrafficGroupItemInstances | Where-Object { $_.'[ABC.F5.BIGIP.TrafficGroupItem].SystemNodeName'.Value -eq $f5NodeName } 
		$groupNames = $groups                           | ForEach-Object { $_.'[ABC.F5.BIGIP.TrafficGroupItem].GroupName'.Value }
		$groupNames = $groupNames                       | Sort-Object -Unique		

		foreach($groupName in $groupNames) {
						
			$displayName   = 'F5-TrafficGroupItemGroup' + '-' +  $groupName + ' On ' + $f5NodeName 
			$Key           = $f5NodeName + 'F5-TrafficGroupItemGroup' + $groupName
			$f5GroupName   = 'F5-TrafficGroupItemGroup' + '-' +  $groupName + '-' + $f5NodeName 		

			$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']$")
			$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/Key$",$Key)
			$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/GroupName$",$f5GroupName)
			$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/SystemNodeName$",$f5NodeName)	
			$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
			
			$classF5TrafficGroupItemInstances | Where-Object { ($_.'[ABC.F5.BIGIP.TrafficGroupItem].GroupName'.Value -eq $groupName) -and ($_.'[ABC.F5.BIGIP.TrafficGroupItem].SystemNodeName'.Value -eq $f5NodeName) } | ForEach-Object {  					
				
				$instGroupDeviceName = $_.'[ABC.F5.BIGIP.TrafficGroupItem].DeviceName'.Value
				$instGroupName       = $_.'[ABC.F5.BIGIP.TrafficGroupItem].GroupName'.Value
				$instSystemNodeName  = $_.'[ABC.F5.BIGIP.TrafficGroupItem].SystemNodeName'.Value

				$instDisplayName     = 'F5-Traffic Group Item ' + $instGroupName + '-' + $instGroupDeviceName + ' On ' + $instSystemNodeName  
				$instKey             = $instSystemNodeName + 'F5-TrafficGroupItem' + $instGroupName + $instGroupDeviceName		
				$instKey             = $instKey.replace('/','').replace('-','')		
				
				$itemInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']$")						
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/DeviceName$",$instGroupDeviceName)					
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/GroupName$",$instGroupName)	
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/SystemNodeName$",$instSystemNodeName)	
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/Key$",$instKey)	
				$itemInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $instDisplayName)		
			
				$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItemGroupHostsTrafficGroupItem']$")
				$relInstance.Source = $groupInstance
				$relInstance.Target = $itemInstance
				$discoveryData.AddInstance($relInstance)
  
			} #END $classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  

		} #END foreach($groupName in $groupNames)				

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'SyncStatusItemGroup') {		
		
	$classF5SyncStatusItem          = Get-SCOMClass -Name 'ABC.F5.BIGIP.SyncStatusItem'
	$classF5SyncStatusItemInstances = Get-SCOMClassInstance -Class $classF5SyncStatusItem	

	foreach ($f5NodeName in $f5NodeNames) {				
	
		$displayName   = 'F5-SyncStatusItemGroup' + ' On ' + $f5NodeName 
		$Key           = $f5NodeName + 'F5-SyncStatusItemGroup'
		$f5GroupName   = 'F5-SyncStatusItemGroup' + '-' + $f5NodeName 

		$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']$")
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/Key$",$Key)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/GroupName$",$f5GroupName)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/SystemNodeName$",$f5NodeName)	
		$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)							
						
		$classF5SyncStatusItemInstances | Where-Object { $_.'[ABC.F5.BIGIP.SyncStatusItem].SystemNodeName'.Value -eq $f5NodeName } | ForEach-Object {  					
				
			$instKey            = $_.'[ABC.F5.BIGIP.SyncStatusItem].Key'.Value
			$instItemName       = $_.'[ABC.F5.BIGIP.SyncStatusItem].ItemName'.Value
			$instSystemNodeName = $_.'[ABC.F5.BIGIP.SyncStatusItem].SystemNodeName'.Value
			$instDisplayName    = 'F5-SyncStatus Item ' + $syncItemName  + ' On ' + $instSystemNodeName  				
			
			$itemInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']$")										
			$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/ItemName$",$instItemName)	
			$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/SystemNodeName$",$instSystemNodeName)	
			$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/Key$",$instKey)	
			$itemInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $instDisplayName)		
			
			$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItemGroupHostsSyncStatusItem']$")
			$relInstance.Source = $groupInstance
			$relInstance.Target = $itemInstance
			$discoveryData.AddInstance($relInstance)
  
		} #END $classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  			

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'SystemHostsPoolStatusGroup') {

	$classF5PoolStatusGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.PoolStatus.Group'
	$classF5PoolStatusGroupInstances = Get-SCOMClassInstance -Class $classF5PoolStatusGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value
			 
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5PoolStatusGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5PoolStatusGroupInstance = $_

			$displayName    = 'F5-PoolStatusGroup' + ' On ' + $f5SystemNodeName
			$Key            = $f5SystemNodeName + 'F5-PoolStatusGroup' 
			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)	
			$discoveryData.AddInstance($targetInstance)
			
			$relInstance = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsPoolStatusGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5PoolStatusGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 

} elseif ($groupItem -eq 'SystemHostsNodeAddressGroup')	{

	$classF5NodeAddressGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.NodeAddress.Group'
	$classF5NodeAddressGroupInstances = Get-SCOMClassInstance -Class $classF5NodeAddressGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value
			
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5PoolStatusGroupInstance = $_	

			$displayName    = 'F5-NodeAddressGroup' + ' On ' + $f5SystemNodeName
			$Key            = $f5SystemNodeName + 'F5-NodeAddressGroup' 
			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)	
			$discoveryData.AddInstance($targetInstance)
			
			$relInstance        = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsNodeAddressGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 

} elseif ($groupItem -eq 'SystemHostsTrafficGroupItemGroup')	{
	
	$classF5TrafficItemGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.TrafficGroupItem.Group'
	$classF5TrafficItemGroupInstances = Get-SCOMClassInstance -Class $classF5TrafficItemGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value		
	
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5TrafficItemGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.TrafficGroupItem.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5TrafficItemGroupInstance = $_		
						
			$displayName   = $classF5TrafficItemGroupInstance.DisplayName
			$Key           = $classF5TrafficItemGroupInstance.'[ABC.F5.BIGIP.TrafficGroupItem.Group].Key'.Value
			$f5GroupName   = $classF5TrafficItemGroupInstance.'[ABC.F5.BIGIP.TrafficGroupItem.Group].GroupName'.Value

			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/GroupName$",$f5GroupName)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
			
			$relInstance        = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsTrafficGroupItemGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 


} elseif ($groupItem -eq 'SystemHostsSyncStatusItemGroup')	{
	
	$classF5SyncStatusItemGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.SyncStatusItem.Group'
	$classF5SyncStatusItemGroupInstances = Get-SCOMClassInstance -Class $classF5SyncStatusItemGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value		
	
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5SyncStatusItemGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.SyncStatusItem.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5SyncStatusItemGroupInstance = $_		
						
			$displayName   = $classF5SyncStatusItemGroupInstance.DisplayName
			$Key           = $classF5SyncStatusItemGroupInstance.'[ABC.F5.BIGIP.SyncStatusItem.Group].Key'.Value
			$f5GroupName   = $classF5SyncStatusItemGroupInstance.'[ABC.F5.BIGIP.SyncStatusItem.Group].GroupName'.Value

			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/GroupName$",$f5GroupName)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
			
			$relInstance        = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsSyncStatusItemGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 

} else {

	$foo = 'Undefined discovery type'

}


$discoveryData]]></ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceId</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityId</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>groupItem</Name>
              <Value>TrafficGroupInstancesGroup</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>120</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="ABC.F5.BIGIP.Discovery.F5.BIGIP.Application.TrafficGroupItem" Target="ABC.F5.BIGIP.MonitoringServer" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="ABC.F5.BIGIP.TrafficGroupItem" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>3600</IntervalSeconds>
          <SyncTime />
          <ScriptName>DiscoverF5Applications.ps1</ScriptName>
          <ScriptBody><![CDATA[param($sourceId,$managedEntityId,$discoveryItem,$tempPath)

$api           = New-Object -ComObject 'MOM.ScriptAPI'
$discoveryData = $api.CreateDiscoveryData(0, $sourceId, $managedEntityId)

$Global:Error.Clear()
$script:ErrorView      = 'NormalView'
$ErrorActionPreference = 'Continue'

$F5BigIPHosts          = Import-Csv -Path $($tempPath + '\' + 'F5-BigIP-Hosts.csv')
$discoveryFiles        = Get-ChildItem -Path $tempPath -Filter '*F5-Discovery-*.json' | Select-Object -ExpandProperty Name


foreach($f5HostItem in $F5BigIPHosts) {
  
	$f5HostName      = ''
	$f5HostIPAddress = ''
	$f5HostUrl       = ''

	if ($f5HostItem.HostName -match '[a-zA-Z0-9]{3,}') {
		$f5HostName = $f5HostItem.HostName
	}

	if ($f5HostItem.IPAddress -match '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}') {
		$f5HostIPAddress = $f5HostItem.IPAddress
	}

	if ($f5HostName -ne '') {
		if (Test-Connection -ComputerName $f5HostName -Count 2 -Quiet) {
			$f5HostUrl = $f5HostName
		}
	}
   
	if (($f5HostUrl -eq '') -and ($f5HostIPAddress -ne '')) {
		if (Test-Connection -ComputerName $f5HostIPAddress -Count 2 -Quiet) {     
			$f5HostUrl = $f5HostIPAddress
		} 
	}     
  
	if ($f5HostUrl -ne '') {
				
		if($discoveryItem -eq 'Info') {
		  $discoveryFileContent = @()
		  $discoveryFile = $discoveryFiles | Where-Object { ($_ -match $discoveryItem) -and ($_ -match $f5HostUrl)}
		  foreach($dFile in $discoveryFile) {
			  $discoveryFileContent += Get-Content -Path $($tempPath + '\' + $dFile) | ConvertFrom-Json
		  }  
		} else {
		  $discoveryFile        = $discoveryFiles | Where-Object { ($_ -match $discoveryItem) -and ($_ -match $f5HostUrl)}
		  $discoveryFileContent = Get-Content -Path $($tempPath + '\' + $discoveryFile) | ConvertFrom-Json
		}

		$discoverySystemFile        = $discoveryFiles | Where-Object {($_ -match 'GeneralInfo') -and ($_ -match $f5HostUrl)}
		$discoverySystemFileContent = Get-Content -Path $($tempPath + '\' + $discoverySystemFile) | ConvertFrom-Json
		$systemNodeNameKey          = $($discoverySystemFileContent.GeneralInfo.SystemNodeName)
				
		if ($discoveryItem -eq 'PoolStatus') {			

			$discoveryFileContent.PoolStatus | ForEach-Object {		  
				$poolName         = $_.ltmPoolStatusName
				$displayName      = 'F5-Pool ' + $poolName + ' On ' + $systemNodeNameKey
				$key              = $systemNodeNameKey + 'F5-Pool' + $poolName
				$poolEnabledState = $_.ltmPoolStatusEnabledState

				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']$")			
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/PoolStatusEnabledState$",$poolEnabledState)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/PoolStatusName$",$poolName)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/SystemNodeName$",$systemNodeNameKey)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/Key$",$key)
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
				$discoveryData.AddInstance($instance)
			} #END $discoveryFileContent.PoolStatus | ForEach-Object {}

		} elseif ($discoveryItem -eq 'NodeAddrTable') {
			
			$discoveryFileContent.NodeAddrTable | ForEach-Object {				
				$nodeAddressName          = $_.ltmNodeAddrName
				$displayName              = 'F5-NodeAddress ' + $nodeAddressName + ' On ' + $systemNodeNameKey
				$key                      = $systemNodeNameKey + 'F5-NodeAddress' + $nodeAddressName
				$nodeAddressSessionStatus = $_.ltmNodeAddrSessionStatus
				$nodeAddressMonitorRule   = $_.ltmNodeAddrMonitorRule
				$nodeAddressEnabledState  = $_.ltmNodeAddrEnabledState								  

				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']$")			
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressName$",$nodeAddressName)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressEnabledState$",$nodeAddressEnabledState)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressMonitorRule$",$nodeAddressMonitorRule)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressSessionStatus$",$nodeAddressSessionStatus)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/SystemNodeName$",$systemNodeNameKey)
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/Key$",$key)
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)
				$discoveryData.AddInstance($instance)
			} #EMD $discoveryFileContent.NodeAddrTable | ForEach-Object {}

		} elseif ($discoveryItem -eq 'TrafficGroup') {

			$discoveryFileContent.TrafficGroupStatusTable | ForEach-Object {						
				$groupDeviceName     = $_.sysCmTrafficGroupStatusDeviceName				
				$groupName           = $_.sysCmTrafficGroupStatusTrafficGroup
				
				$displayName         = 'F5-Traffic Group Item ' + $groupName + '-' + $groupDeviceName + ' On ' + $systemNodeNameKey  
				$key                 = $systemNodeNameKey + 'F5-TrafficGroupItem' + $groupName + $groupDeviceName		
				$key                 = $key.replace('/','').replace('-','')		
		
				$api.LogScriptEvent('ABC.F5.BIGIP DiscoveryF5Applications.ps1',402,2,"DiscoveryF5Applicaitons Found TrafficGroup key: $($key)")

				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']$")						
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/DeviceName$",$groupDeviceName)					
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/GroupName$",$groupName)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/SystemNodeName$",$systemNodeNameKey)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/Key$",$key)	
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)	
				$discoveryData.AddInstance($instance)
			}

		} elseif ($discoveryItem -eq 'SyncStatus') {			

			$discoveryFileContent.SyncStatusDetails | ForEach-Object {						
				$syncStateItemPart = $_.sysCmSyncStatusDetailsDetails				
				$syncItemName      = $syncStateItemPart.Substring(0, $syncStateItemPart.IndexOf(' ')).replace(':','')				
				$displayName       = 'F5-SyncStatus Item ' + $syncItemName  + ' On ' + $systemNodeNameKey  
				$key               = $systemNodeNameKey + 'F5-SyncStatusItem' + $syncItemName									

				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']$")						
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/ItemName$",$syncItemName)									
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/SystemNodeName$",$systemNodeNameKey)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/Key$",$key)	
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)	
				$discoveryData.AddInstance($instance)
			}

		} else {
  
			$FOO = 'Undefined type!'
  
		} #END if ($discoveryItem -eq 'PoolStatus') 

	} #END if ($f5HostUrl -ne '')  	

} #END foreach($f5HostItem in $F5BigIPHosts) 
	
$discoveryData]]></ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceId</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityId</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>discoveryItem</Name>
              <Value>TrafficGroup</Value>
            </Parameter>
            <Parameter>
              <Name>tempPath</Name>
              <Value>$Target/Property[Type="ABC.F5.BIGIP.MonitoringServer"]/FilePath$</Value>
            </Parameter>
            <Parameter>
              <Name>f5MonServer</Name>
              <Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>300</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="ABC.F5.BIGIP.Discovery.F5.BIGIP.Application.SystemHostsTrafficGroupItemGroup" Target="SC!Microsoft.SystemCenter.RootManagementServer" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="ABC.F5.BIGIP.SystemHostsTrafficGroupItemGroup" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>21600</IntervalSeconds>
          <SyncTime />
          <ScriptName>DiscoverF5ApplicationRelations.ps1.ps1</ScriptName>
          <ScriptBody><![CDATA[param($sourceId,$managedEntityId,$groupItem)

$api                    = New-Object -ComObject 'MOM.ScriptAPI'
$discoveryData          = $api.CreateDiscoveryData(0, $sourceId, $managedEntityId)

$classF5System          = Get-SCOMClass -Name 'ABC.F5.BIGIP.System'
$classF5SystemInstances = Get-SCOMClassInstance -Class $classF5System
$f5NodeNames            = $classF5SystemInstances.'[ABC.F5.BIGIP.System].SystemNodeName'.Value


if ($groupItem -eq 'PoolStatusGroup') {

	$classF5PoolStatus          = Get-SCOMClass -Name 'ABC.F5.BIGIP.PoolStatus'
	$classF5PoolStatusInstances = Get-SCOMClassInstance -Class $classF5PoolStatus

	foreach ($f5NodeName in $f5NodeNames) {

		$displayName   = 'F5-PoolStatusGroup' + ' On ' + $f5NodeName
		$Key           = $f5NodeName + 'F5-PoolStatusGroup' 
		$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']$")
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/Key$",$Key)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/SystemNodeName$",$f5NodeName)	
		$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		

		$classF5PoolStatusInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object {
  
			$poolStatusInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']$")
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/PoolStatusEnabledState$",$_.'[ABC.F5.BIGIP.PoolStatus].PoolStatusEnabledState'.Value)	
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/PoolStatusName$",$_.'[ABC.F5.BIGIP.PoolStatus].PoolStatusName'.Value)	
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/SystemNodeName$",$_.'[ABC.F5.BIGIP.PoolStatus].SystemNodeName'.Value)	
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/Key$",$_.'[ABC.F5.BIGIP.PoolStatus].Key'.Value)
			$poolStatusInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $_.'[System.Entity].DisplayName'.Value)		
  
			$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatusGroupHostsPoolStatus']$")
			$relInstance.Source = $groupInstance
			$relInstance.Target = $poolStatusInstance
			$discoveryData.AddInstance($relInstance)
  
		} #END $classF5SystemInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'NodeAddressGroup') {
		
	$classF5NodeAddress          = Get-SCOMClass -Name 'ABC.F5.BIGIP.NodeAddress'
	$classF5NodeAddressInstances = Get-SCOMClassInstance -Class $classF5NodeAddress	

	foreach ($f5NodeName in $f5NodeNames) {

		$displayName   = 'F5-NodeAddressGroup' + ' On ' + $f5NodeName 
		$Key           = $f5NodeName + 'F5-NodeAddressGroup' 
		$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']$")
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/Key$",$Key)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/SystemNodeName$",$f5NodeName)	
		$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)					

		$classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object {  
						
			$nodeAddressName          = $_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressName'.Value
			$displayName              = $f5NodeName + 'F5-NodeAddress' + $nodeAddressName			
			$key                      = $displayName
			
			$nodeAddressInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']$")			
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressName$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressName'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressEnabledState$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressEnabledState'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressMonitorRule$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressMonitorRule'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressSessionStatus$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressSessionStatus'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/SystemNodeName$",$f5NodeName)
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/Key$",$key)
			$nodeAddressInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $_.'[System.Entity].DisplayName'.Value)		
			
			$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddressGroupHostsNodeAddress']$")
			$relInstance.Source = $groupInstance
			$relInstance.Target = $nodeAddressInstance
			$discoveryData.AddInstance($relInstance)
  
		} #END $classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'TrafficGroupInstancesGroup') {
		
	$classF5TrafficGroupItem          = Get-SCOMClass -Name 'ABC.F5.BIGIP.TrafficGroupItem'
	$classF5TrafficGroupItemInstances = Get-SCOMClassInstance -Class $classF5TrafficGroupItem		

	foreach ($f5NodeName in $f5NodeNames) {		
		
		$groups     = $classF5TrafficGroupItemInstances | Where-Object { $_.'[ABC.F5.BIGIP.TrafficGroupItem].SystemNodeName'.Value -eq $f5NodeName } 
		$groupNames = $groups                           | ForEach-Object { $_.'[ABC.F5.BIGIP.TrafficGroupItem].GroupName'.Value }
		$groupNames = $groupNames                       | Sort-Object -Unique		

		foreach($groupName in $groupNames) {
						
			$displayName   = 'F5-TrafficGroupItemGroup' + '-' +  $groupName + ' On ' + $f5NodeName 
			$Key           = $f5NodeName + 'F5-TrafficGroupItemGroup' + $groupName
			$f5GroupName   = 'F5-TrafficGroupItemGroup' + '-' +  $groupName + '-' + $f5NodeName 		

			$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']$")
			$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/Key$",$Key)
			$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/GroupName$",$f5GroupName)
			$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/SystemNodeName$",$f5NodeName)	
			$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
			
			$classF5TrafficGroupItemInstances | Where-Object { ($_.'[ABC.F5.BIGIP.TrafficGroupItem].GroupName'.Value -eq $groupName) -and ($_.'[ABC.F5.BIGIP.TrafficGroupItem].SystemNodeName'.Value -eq $f5NodeName) } | ForEach-Object {  					
				
				$instGroupDeviceName = $_.'[ABC.F5.BIGIP.TrafficGroupItem].DeviceName'.Value
				$instGroupName       = $_.'[ABC.F5.BIGIP.TrafficGroupItem].GroupName'.Value
				$instSystemNodeName  = $_.'[ABC.F5.BIGIP.TrafficGroupItem].SystemNodeName'.Value

				$instDisplayName     = 'F5-Traffic Group Item ' + $instGroupName + '-' + $instGroupDeviceName + ' On ' + $instSystemNodeName  
				$instKey             = $instSystemNodeName + 'F5-TrafficGroupItem' + $instGroupName + $instGroupDeviceName		
				$instKey             = $instKey.replace('/','').replace('-','')		
				
				$itemInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']$")						
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/DeviceName$",$instGroupDeviceName)					
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/GroupName$",$instGroupName)	
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/SystemNodeName$",$instSystemNodeName)	
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/Key$",$instKey)	
				$itemInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $instDisplayName)		
			
				$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItemGroupHostsTrafficGroupItem']$")
				$relInstance.Source = $groupInstance
				$relInstance.Target = $itemInstance
				$discoveryData.AddInstance($relInstance)
  
			} #END $classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  

		} #END foreach($groupName in $groupNames)				

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'SyncStatusItemGroup') {		
		
	$classF5SyncStatusItem          = Get-SCOMClass -Name 'ABC.F5.BIGIP.SyncStatusItem'
	$classF5SyncStatusItemInstances = Get-SCOMClassInstance -Class $classF5SyncStatusItem	

	foreach ($f5NodeName in $f5NodeNames) {				
	
		$displayName   = 'F5-SyncStatusItemGroup' + ' On ' + $f5NodeName 
		$Key           = $f5NodeName + 'F5-SyncStatusItemGroup'
		$f5GroupName   = 'F5-SyncStatusItemGroup' + '-' + $f5NodeName 

		$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']$")
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/Key$",$Key)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/GroupName$",$f5GroupName)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/SystemNodeName$",$f5NodeName)	
		$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)							
						
		$classF5SyncStatusItemInstances | Where-Object { $_.'[ABC.F5.BIGIP.SyncStatusItem].SystemNodeName'.Value -eq $f5NodeName } | ForEach-Object {  					
				
			$instKey            = $_.'[ABC.F5.BIGIP.SyncStatusItem].Key'.Value
			$instItemName       = $_.'[ABC.F5.BIGIP.SyncStatusItem].ItemName'.Value
			$instSystemNodeName = $_.'[ABC.F5.BIGIP.SyncStatusItem].SystemNodeName'.Value
			$instDisplayName    = 'F5-SyncStatus Item ' + $syncItemName  + ' On ' + $instSystemNodeName  				
			
			$itemInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']$")										
			$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/ItemName$",$instItemName)	
			$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/SystemNodeName$",$instSystemNodeName)	
			$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/Key$",$instKey)	
			$itemInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $instDisplayName)		
			
			$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItemGroupHostsSyncStatusItem']$")
			$relInstance.Source = $groupInstance
			$relInstance.Target = $itemInstance
			$discoveryData.AddInstance($relInstance)
  
		} #END $classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  			

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'SystemHostsPoolStatusGroup') {

	$classF5PoolStatusGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.PoolStatus.Group'
	$classF5PoolStatusGroupInstances = Get-SCOMClassInstance -Class $classF5PoolStatusGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value
			 
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5PoolStatusGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5PoolStatusGroupInstance = $_

			$displayName    = 'F5-PoolStatusGroup' + ' On ' + $f5SystemNodeName
			$Key            = $f5SystemNodeName + 'F5-PoolStatusGroup' 
			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)	
			$discoveryData.AddInstance($targetInstance)
			
			$relInstance = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsPoolStatusGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5PoolStatusGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 

} elseif ($groupItem -eq 'SystemHostsNodeAddressGroup')	{

	$classF5NodeAddressGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.NodeAddress.Group'
	$classF5NodeAddressGroupInstances = Get-SCOMClassInstance -Class $classF5NodeAddressGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value
			
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5PoolStatusGroupInstance = $_	

			$displayName    = 'F5-NodeAddressGroup' + ' On ' + $f5SystemNodeName
			$Key            = $f5SystemNodeName + 'F5-NodeAddressGroup' 
			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)	
			$discoveryData.AddInstance($targetInstance)
			
			$relInstance        = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsNodeAddressGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 

} elseif ($groupItem -eq 'SystemHostsTrafficGroupItemGroup')	{
	
	$classF5TrafficItemGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.TrafficGroupItem.Group'
	$classF5TrafficItemGroupInstances = Get-SCOMClassInstance -Class $classF5TrafficItemGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value		
	
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5TrafficItemGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.TrafficGroupItem.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5TrafficItemGroupInstance = $_		
						
			$displayName   = $classF5TrafficItemGroupInstance.DisplayName
			$Key           = $classF5TrafficItemGroupInstance.'[ABC.F5.BIGIP.TrafficGroupItem.Group].Key'.Value
			$f5GroupName   = $classF5TrafficItemGroupInstance.'[ABC.F5.BIGIP.TrafficGroupItem.Group].GroupName'.Value

			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/GroupName$",$f5GroupName)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
			
			$relInstance        = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsTrafficGroupItemGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 


} elseif ($groupItem -eq 'SystemHostsSyncStatusItemGroup')	{
	
	$classF5SyncStatusItemGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.SyncStatusItem.Group'
	$classF5SyncStatusItemGroupInstances = Get-SCOMClassInstance -Class $classF5SyncStatusItemGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value		
	
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5SyncStatusItemGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.SyncStatusItem.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5SyncStatusItemGroupInstance = $_		
						
			$displayName   = $classF5SyncStatusItemGroupInstance.DisplayName
			$Key           = $classF5SyncStatusItemGroupInstance.'[ABC.F5.BIGIP.SyncStatusItem.Group].Key'.Value
			$f5GroupName   = $classF5SyncStatusItemGroupInstance.'[ABC.F5.BIGIP.SyncStatusItem.Group].GroupName'.Value

			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/GroupName$",$f5GroupName)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
			
			$relInstance        = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsSyncStatusItemGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 

} else {

	$foo = 'Undefined discovery type'

}


$discoveryData]]></ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceId</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityId</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>groupItem</Name>
              <Value>SystemHostsTrafficGroupItemGroup</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>120</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="ABC.F5.BIGIP.Discovery.F5.BIGIP.Application.SystemHostsSyncStatusItemGroup" Target="SC!Microsoft.SystemCenter.RootManagementServer" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="ABC.F5.BIGIP.SystemHostsSyncStatusItemGroup" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>21600</IntervalSeconds>
          <SyncTime />
          <ScriptName>DiscoverF5ApplicationRelations.ps1.ps1</ScriptName>
          <ScriptBody><![CDATA[param($sourceId,$managedEntityId,$groupItem)

$api                    = New-Object -ComObject 'MOM.ScriptAPI'
$discoveryData          = $api.CreateDiscoveryData(0, $sourceId, $managedEntityId)

$classF5System          = Get-SCOMClass -Name 'ABC.F5.BIGIP.System'
$classF5SystemInstances = Get-SCOMClassInstance -Class $classF5System
$f5NodeNames            = $classF5SystemInstances.'[ABC.F5.BIGIP.System].SystemNodeName'.Value


if ($groupItem -eq 'PoolStatusGroup') {

	$classF5PoolStatus          = Get-SCOMClass -Name 'ABC.F5.BIGIP.PoolStatus'
	$classF5PoolStatusInstances = Get-SCOMClassInstance -Class $classF5PoolStatus

	foreach ($f5NodeName in $f5NodeNames) {

		$displayName   = 'F5-PoolStatusGroup' + ' On ' + $f5NodeName
		$Key           = $f5NodeName + 'F5-PoolStatusGroup' 
		$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']$")
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/Key$",$Key)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/SystemNodeName$",$f5NodeName)	
		$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		

		$classF5PoolStatusInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object {
  
			$poolStatusInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']$")
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/PoolStatusEnabledState$",$_.'[ABC.F5.BIGIP.PoolStatus].PoolStatusEnabledState'.Value)	
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/PoolStatusName$",$_.'[ABC.F5.BIGIP.PoolStatus].PoolStatusName'.Value)	
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/SystemNodeName$",$_.'[ABC.F5.BIGIP.PoolStatus].SystemNodeName'.Value)	
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/Key$",$_.'[ABC.F5.BIGIP.PoolStatus].Key'.Value)
			$poolStatusInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $_.'[System.Entity].DisplayName'.Value)		
  
			$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatusGroupHostsPoolStatus']$")
			$relInstance.Source = $groupInstance
			$relInstance.Target = $poolStatusInstance
			$discoveryData.AddInstance($relInstance)
  
		} #END $classF5SystemInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'NodeAddressGroup') {
		
	$classF5NodeAddress          = Get-SCOMClass -Name 'ABC.F5.BIGIP.NodeAddress'
	$classF5NodeAddressInstances = Get-SCOMClassInstance -Class $classF5NodeAddress	

	foreach ($f5NodeName in $f5NodeNames) {

		$displayName   = 'F5-NodeAddressGroup' + ' On ' + $f5NodeName 
		$Key           = $f5NodeName + 'F5-NodeAddressGroup' 
		$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']$")
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/Key$",$Key)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/SystemNodeName$",$f5NodeName)	
		$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)					

		$classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object {  
						
			$nodeAddressName          = $_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressName'.Value
			$displayName              = $f5NodeName + 'F5-NodeAddress' + $nodeAddressName			
			$key                      = $displayName
			
			$nodeAddressInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']$")			
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressName$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressName'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressEnabledState$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressEnabledState'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressMonitorRule$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressMonitorRule'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressSessionStatus$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressSessionStatus'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/SystemNodeName$",$f5NodeName)
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/Key$",$key)
			$nodeAddressInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $_.'[System.Entity].DisplayName'.Value)		
			
			$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddressGroupHostsNodeAddress']$")
			$relInstance.Source = $groupInstance
			$relInstance.Target = $nodeAddressInstance
			$discoveryData.AddInstance($relInstance)
  
		} #END $classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'TrafficGroupInstancesGroup') {
		
	$classF5TrafficGroupItem          = Get-SCOMClass -Name 'ABC.F5.BIGIP.TrafficGroupItem'
	$classF5TrafficGroupItemInstances = Get-SCOMClassInstance -Class $classF5TrafficGroupItem		

	foreach ($f5NodeName in $f5NodeNames) {		
		
		$groups     = $classF5TrafficGroupItemInstances | Where-Object { $_.'[ABC.F5.BIGIP.TrafficGroupItem].SystemNodeName'.Value -eq $f5NodeName } 
		$groupNames = $groups                           | ForEach-Object { $_.'[ABC.F5.BIGIP.TrafficGroupItem].GroupName'.Value }
		$groupNames = $groupNames                       | Sort-Object -Unique		

		foreach($groupName in $groupNames) {
						
			$displayName   = 'F5-TrafficGroupItemGroup' + '-' +  $groupName + ' On ' + $f5NodeName 
			$Key           = $f5NodeName + 'F5-TrafficGroupItemGroup' + $groupName
			$f5GroupName   = 'F5-TrafficGroupItemGroup' + '-' +  $groupName + '-' + $f5NodeName 		

			$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']$")
			$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/Key$",$Key)
			$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/GroupName$",$f5GroupName)
			$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/SystemNodeName$",$f5NodeName)	
			$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
			
			$classF5TrafficGroupItemInstances | Where-Object { ($_.'[ABC.F5.BIGIP.TrafficGroupItem].GroupName'.Value -eq $groupName) -and ($_.'[ABC.F5.BIGIP.TrafficGroupItem].SystemNodeName'.Value -eq $f5NodeName) } | ForEach-Object {  					
				
				$instGroupDeviceName = $_.'[ABC.F5.BIGIP.TrafficGroupItem].DeviceName'.Value
				$instGroupName       = $_.'[ABC.F5.BIGIP.TrafficGroupItem].GroupName'.Value
				$instSystemNodeName  = $_.'[ABC.F5.BIGIP.TrafficGroupItem].SystemNodeName'.Value

				$instDisplayName     = 'F5-Traffic Group Item ' + $instGroupName + '-' + $instGroupDeviceName + ' On ' + $instSystemNodeName  
				$instKey             = $instSystemNodeName + 'F5-TrafficGroupItem' + $instGroupName + $instGroupDeviceName		
				$instKey             = $instKey.replace('/','').replace('-','')		
				
				$itemInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']$")						
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/DeviceName$",$instGroupDeviceName)					
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/GroupName$",$instGroupName)	
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/SystemNodeName$",$instSystemNodeName)	
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/Key$",$instKey)	
				$itemInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $instDisplayName)		
			
				$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItemGroupHostsTrafficGroupItem']$")
				$relInstance.Source = $groupInstance
				$relInstance.Target = $itemInstance
				$discoveryData.AddInstance($relInstance)
  
			} #END $classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  

		} #END foreach($groupName in $groupNames)				

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'SyncStatusItemGroup') {		
		
	$classF5SyncStatusItem          = Get-SCOMClass -Name 'ABC.F5.BIGIP.SyncStatusItem'
	$classF5SyncStatusItemInstances = Get-SCOMClassInstance -Class $classF5SyncStatusItem	

	foreach ($f5NodeName in $f5NodeNames) {				
	
		$displayName   = 'F5-SyncStatusItemGroup' + ' On ' + $f5NodeName 
		$Key           = $f5NodeName + 'F5-SyncStatusItemGroup'
		$f5GroupName   = 'F5-SyncStatusItemGroup' + '-' + $f5NodeName 

		$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']$")
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/Key$",$Key)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/GroupName$",$f5GroupName)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/SystemNodeName$",$f5NodeName)	
		$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)							
						
		$classF5SyncStatusItemInstances | Where-Object { $_.'[ABC.F5.BIGIP.SyncStatusItem].SystemNodeName'.Value -eq $f5NodeName } | ForEach-Object {  					
				
			$instKey            = $_.'[ABC.F5.BIGIP.SyncStatusItem].Key'.Value
			$instItemName       = $_.'[ABC.F5.BIGIP.SyncStatusItem].ItemName'.Value
			$instSystemNodeName = $_.'[ABC.F5.BIGIP.SyncStatusItem].SystemNodeName'.Value
			$instDisplayName    = 'F5-SyncStatus Item ' + $syncItemName  + ' On ' + $instSystemNodeName  				
			
			$itemInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']$")										
			$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/ItemName$",$instItemName)	
			$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/SystemNodeName$",$instSystemNodeName)	
			$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/Key$",$instKey)	
			$itemInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $instDisplayName)		
			
			$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItemGroupHostsSyncStatusItem']$")
			$relInstance.Source = $groupInstance
			$relInstance.Target = $itemInstance
			$discoveryData.AddInstance($relInstance)
  
		} #END $classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  			

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'SystemHostsPoolStatusGroup') {

	$classF5PoolStatusGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.PoolStatus.Group'
	$classF5PoolStatusGroupInstances = Get-SCOMClassInstance -Class $classF5PoolStatusGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value
			 
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5PoolStatusGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5PoolStatusGroupInstance = $_

			$displayName    = 'F5-PoolStatusGroup' + ' On ' + $f5SystemNodeName
			$Key            = $f5SystemNodeName + 'F5-PoolStatusGroup' 
			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)	
			$discoveryData.AddInstance($targetInstance)
			
			$relInstance = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsPoolStatusGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5PoolStatusGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 

} elseif ($groupItem -eq 'SystemHostsNodeAddressGroup')	{

	$classF5NodeAddressGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.NodeAddress.Group'
	$classF5NodeAddressGroupInstances = Get-SCOMClassInstance -Class $classF5NodeAddressGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value
			
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5PoolStatusGroupInstance = $_	

			$displayName    = 'F5-NodeAddressGroup' + ' On ' + $f5SystemNodeName
			$Key            = $f5SystemNodeName + 'F5-NodeAddressGroup' 
			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)	
			$discoveryData.AddInstance($targetInstance)
			
			$relInstance        = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsNodeAddressGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 

} elseif ($groupItem -eq 'SystemHostsTrafficGroupItemGroup')	{
	
	$classF5TrafficItemGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.TrafficGroupItem.Group'
	$classF5TrafficItemGroupInstances = Get-SCOMClassInstance -Class $classF5TrafficItemGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value		
	
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5TrafficItemGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.TrafficGroupItem.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5TrafficItemGroupInstance = $_		
						
			$displayName   = $classF5TrafficItemGroupInstance.DisplayName
			$Key           = $classF5TrafficItemGroupInstance.'[ABC.F5.BIGIP.TrafficGroupItem.Group].Key'.Value
			$f5GroupName   = $classF5TrafficItemGroupInstance.'[ABC.F5.BIGIP.TrafficGroupItem.Group].GroupName'.Value

			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/GroupName$",$f5GroupName)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
			
			$relInstance        = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsTrafficGroupItemGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 


} elseif ($groupItem -eq 'SystemHostsSyncStatusItemGroup')	{
	
	$classF5SyncStatusItemGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.SyncStatusItem.Group'
	$classF5SyncStatusItemGroupInstances = Get-SCOMClassInstance -Class $classF5SyncStatusItemGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value		
	
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5SyncStatusItemGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.SyncStatusItem.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5SyncStatusItemGroupInstance = $_		
						
			$displayName   = $classF5SyncStatusItemGroupInstance.DisplayName
			$Key           = $classF5SyncStatusItemGroupInstance.'[ABC.F5.BIGIP.SyncStatusItem.Group].Key'.Value
			$f5GroupName   = $classF5SyncStatusItemGroupInstance.'[ABC.F5.BIGIP.SyncStatusItem.Group].GroupName'.Value

			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/GroupName$",$f5GroupName)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
			
			$relInstance        = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsSyncStatusItemGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 

} else {

	$foo = 'Undefined discovery type'

}


$discoveryData]]></ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceId</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityId</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>groupItem</Name>
              <Value>SystemHostsSyncStatusItemGroup</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>120</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="ABC.F5.BIGIP.Discovery.F5.BIGIP.Application.SystemHostsPoolStatusGroup" Target="SC!Microsoft.SystemCenter.RootManagementServer" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="ABC.F5.BIGIP.SystemHostsPoolStatusGroup" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>21600</IntervalSeconds>
          <SyncTime />
          <ScriptName>DiscoverF5ApplicationRelations.ps1.ps1</ScriptName>
          <ScriptBody><![CDATA[param($sourceId,$managedEntityId,$groupItem)

$api                    = New-Object -ComObject 'MOM.ScriptAPI'
$discoveryData          = $api.CreateDiscoveryData(0, $sourceId, $managedEntityId)

$classF5System          = Get-SCOMClass -Name 'ABC.F5.BIGIP.System'
$classF5SystemInstances = Get-SCOMClassInstance -Class $classF5System
$f5NodeNames            = $classF5SystemInstances.'[ABC.F5.BIGIP.System].SystemNodeName'.Value


if ($groupItem -eq 'PoolStatusGroup') {

	$classF5PoolStatus          = Get-SCOMClass -Name 'ABC.F5.BIGIP.PoolStatus'
	$classF5PoolStatusInstances = Get-SCOMClassInstance -Class $classF5PoolStatus

	foreach ($f5NodeName in $f5NodeNames) {

		$displayName   = 'F5-PoolStatusGroup' + ' On ' + $f5NodeName
		$Key           = $f5NodeName + 'F5-PoolStatusGroup' 
		$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']$")
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/Key$",$Key)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/SystemNodeName$",$f5NodeName)	
		$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		

		$classF5PoolStatusInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object {
  
			$poolStatusInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']$")
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/PoolStatusEnabledState$",$_.'[ABC.F5.BIGIP.PoolStatus].PoolStatusEnabledState'.Value)	
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/PoolStatusName$",$_.'[ABC.F5.BIGIP.PoolStatus].PoolStatusName'.Value)	
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/SystemNodeName$",$_.'[ABC.F5.BIGIP.PoolStatus].SystemNodeName'.Value)	
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/Key$",$_.'[ABC.F5.BIGIP.PoolStatus].Key'.Value)
			$poolStatusInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $_.'[System.Entity].DisplayName'.Value)		
  
			$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatusGroupHostsPoolStatus']$")
			$relInstance.Source = $groupInstance
			$relInstance.Target = $poolStatusInstance
			$discoveryData.AddInstance($relInstance)
  
		} #END $classF5SystemInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'NodeAddressGroup') {
		
	$classF5NodeAddress          = Get-SCOMClass -Name 'ABC.F5.BIGIP.NodeAddress'
	$classF5NodeAddressInstances = Get-SCOMClassInstance -Class $classF5NodeAddress	

	foreach ($f5NodeName in $f5NodeNames) {

		$displayName   = 'F5-NodeAddressGroup' + ' On ' + $f5NodeName 
		$Key           = $f5NodeName + 'F5-NodeAddressGroup' 
		$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']$")
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/Key$",$Key)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/SystemNodeName$",$f5NodeName)	
		$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)					

		$classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object {  
						
			$nodeAddressName          = $_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressName'.Value
			$displayName              = $f5NodeName + 'F5-NodeAddress' + $nodeAddressName			
			$key                      = $displayName
			
			$nodeAddressInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']$")			
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressName$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressName'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressEnabledState$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressEnabledState'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressMonitorRule$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressMonitorRule'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressSessionStatus$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressSessionStatus'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/SystemNodeName$",$f5NodeName)
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/Key$",$key)
			$nodeAddressInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $_.'[System.Entity].DisplayName'.Value)		
			
			$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddressGroupHostsNodeAddress']$")
			$relInstance.Source = $groupInstance
			$relInstance.Target = $nodeAddressInstance
			$discoveryData.AddInstance($relInstance)
  
		} #END $classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'TrafficGroupInstancesGroup') {
		
	$classF5TrafficGroupItem          = Get-SCOMClass -Name 'ABC.F5.BIGIP.TrafficGroupItem'
	$classF5TrafficGroupItemInstances = Get-SCOMClassInstance -Class $classF5TrafficGroupItem		

	foreach ($f5NodeName in $f5NodeNames) {		
		
		$groups     = $classF5TrafficGroupItemInstances | Where-Object { $_.'[ABC.F5.BIGIP.TrafficGroupItem].SystemNodeName'.Value -eq $f5NodeName } 
		$groupNames = $groups                           | ForEach-Object { $_.'[ABC.F5.BIGIP.TrafficGroupItem].GroupName'.Value }
		$groupNames = $groupNames                       | Sort-Object -Unique		

		foreach($groupName in $groupNames) {
						
			$displayName   = 'F5-TrafficGroupItemGroup' + '-' +  $groupName + ' On ' + $f5NodeName 
			$Key           = $f5NodeName + 'F5-TrafficGroupItemGroup' + $groupName
			$f5GroupName   = 'F5-TrafficGroupItemGroup' + '-' +  $groupName + '-' + $f5NodeName 		

			$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']$")
			$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/Key$",$Key)
			$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/GroupName$",$f5GroupName)
			$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/SystemNodeName$",$f5NodeName)	
			$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
			
			$classF5TrafficGroupItemInstances | Where-Object { ($_.'[ABC.F5.BIGIP.TrafficGroupItem].GroupName'.Value -eq $groupName) -and ($_.'[ABC.F5.BIGIP.TrafficGroupItem].SystemNodeName'.Value -eq $f5NodeName) } | ForEach-Object {  					
				
				$instGroupDeviceName = $_.'[ABC.F5.BIGIP.TrafficGroupItem].DeviceName'.Value
				$instGroupName       = $_.'[ABC.F5.BIGIP.TrafficGroupItem].GroupName'.Value
				$instSystemNodeName  = $_.'[ABC.F5.BIGIP.TrafficGroupItem].SystemNodeName'.Value

				$instDisplayName     = 'F5-Traffic Group Item ' + $instGroupName + '-' + $instGroupDeviceName + ' On ' + $instSystemNodeName  
				$instKey             = $instSystemNodeName + 'F5-TrafficGroupItem' + $instGroupName + $instGroupDeviceName		
				$instKey             = $instKey.replace('/','').replace('-','')		
				
				$itemInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']$")						
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/DeviceName$",$instGroupDeviceName)					
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/GroupName$",$instGroupName)	
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/SystemNodeName$",$instSystemNodeName)	
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/Key$",$instKey)	
				$itemInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $instDisplayName)		
			
				$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItemGroupHostsTrafficGroupItem']$")
				$relInstance.Source = $groupInstance
				$relInstance.Target = $itemInstance
				$discoveryData.AddInstance($relInstance)
  
			} #END $classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  

		} #END foreach($groupName in $groupNames)				

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'SyncStatusItemGroup') {		
		
	$classF5SyncStatusItem          = Get-SCOMClass -Name 'ABC.F5.BIGIP.SyncStatusItem'
	$classF5SyncStatusItemInstances = Get-SCOMClassInstance -Class $classF5SyncStatusItem	

	foreach ($f5NodeName in $f5NodeNames) {				
	
		$displayName   = 'F5-SyncStatusItemGroup' + ' On ' + $f5NodeName 
		$Key           = $f5NodeName + 'F5-SyncStatusItemGroup'
		$f5GroupName   = 'F5-SyncStatusItemGroup' + '-' + $f5NodeName 

		$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']$")
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/Key$",$Key)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/GroupName$",$f5GroupName)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/SystemNodeName$",$f5NodeName)	
		$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)							
						
		$classF5SyncStatusItemInstances | Where-Object { $_.'[ABC.F5.BIGIP.SyncStatusItem].SystemNodeName'.Value -eq $f5NodeName } | ForEach-Object {  					
				
			$instKey            = $_.'[ABC.F5.BIGIP.SyncStatusItem].Key'.Value
			$instItemName       = $_.'[ABC.F5.BIGIP.SyncStatusItem].ItemName'.Value
			$instSystemNodeName = $_.'[ABC.F5.BIGIP.SyncStatusItem].SystemNodeName'.Value
			$instDisplayName    = 'F5-SyncStatus Item ' + $syncItemName  + ' On ' + $instSystemNodeName  				
			
			$itemInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']$")										
			$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/ItemName$",$instItemName)	
			$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/SystemNodeName$",$instSystemNodeName)	
			$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/Key$",$instKey)	
			$itemInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $instDisplayName)		
			
			$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItemGroupHostsSyncStatusItem']$")
			$relInstance.Source = $groupInstance
			$relInstance.Target = $itemInstance
			$discoveryData.AddInstance($relInstance)
  
		} #END $classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  			

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'SystemHostsPoolStatusGroup') {

	$classF5PoolStatusGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.PoolStatus.Group'
	$classF5PoolStatusGroupInstances = Get-SCOMClassInstance -Class $classF5PoolStatusGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value
			 
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5PoolStatusGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5PoolStatusGroupInstance = $_

			$displayName    = 'F5-PoolStatusGroup' + ' On ' + $f5SystemNodeName
			$Key            = $f5SystemNodeName + 'F5-PoolStatusGroup' 
			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)	
			$discoveryData.AddInstance($targetInstance)
			
			$relInstance = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsPoolStatusGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5PoolStatusGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 

} elseif ($groupItem -eq 'SystemHostsNodeAddressGroup')	{

	$classF5NodeAddressGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.NodeAddress.Group'
	$classF5NodeAddressGroupInstances = Get-SCOMClassInstance -Class $classF5NodeAddressGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value
			
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5PoolStatusGroupInstance = $_	

			$displayName    = 'F5-NodeAddressGroup' + ' On ' + $f5SystemNodeName
			$Key            = $f5SystemNodeName + 'F5-NodeAddressGroup' 
			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)	
			$discoveryData.AddInstance($targetInstance)
			
			$relInstance        = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsNodeAddressGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 

} elseif ($groupItem -eq 'SystemHostsTrafficGroupItemGroup')	{
	
	$classF5TrafficItemGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.TrafficGroupItem.Group'
	$classF5TrafficItemGroupInstances = Get-SCOMClassInstance -Class $classF5TrafficItemGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value		
	
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5TrafficItemGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.TrafficGroupItem.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5TrafficItemGroupInstance = $_		
						
			$displayName   = $classF5TrafficItemGroupInstance.DisplayName
			$Key           = $classF5TrafficItemGroupInstance.'[ABC.F5.BIGIP.TrafficGroupItem.Group].Key'.Value
			$f5GroupName   = $classF5TrafficItemGroupInstance.'[ABC.F5.BIGIP.TrafficGroupItem.Group].GroupName'.Value

			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/GroupName$",$f5GroupName)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
			
			$relInstance        = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsTrafficGroupItemGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 


} elseif ($groupItem -eq 'SystemHostsSyncStatusItemGroup')	{
	
	$classF5SyncStatusItemGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.SyncStatusItem.Group'
	$classF5SyncStatusItemGroupInstances = Get-SCOMClassInstance -Class $classF5SyncStatusItemGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value		
	
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5SyncStatusItemGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.SyncStatusItem.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5SyncStatusItemGroupInstance = $_		
						
			$displayName   = $classF5SyncStatusItemGroupInstance.DisplayName
			$Key           = $classF5SyncStatusItemGroupInstance.'[ABC.F5.BIGIP.SyncStatusItem.Group].Key'.Value
			$f5GroupName   = $classF5SyncStatusItemGroupInstance.'[ABC.F5.BIGIP.SyncStatusItem.Group].GroupName'.Value

			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/GroupName$",$f5GroupName)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
			
			$relInstance        = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsSyncStatusItemGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 

} else {

	$foo = 'Undefined discovery type'

}


$discoveryData]]></ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceId</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityId</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>groupItem</Name>
              <Value>SystemHostsPoolStatusGroup</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>120</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="ABC.F5.BIGIP.Discovery.F5.BIGIP.Application.SystemHostsNodeAddressGroup" Target="SC!Microsoft.SystemCenter.RootManagementServer" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="ABC.F5.BIGIP.SystemHostsNodeAddressGroup" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>21600</IntervalSeconds>
          <SyncTime />
          <ScriptName>DiscoverF5ApplicationRelations.ps1.ps1</ScriptName>
          <ScriptBody><![CDATA[param($sourceId,$managedEntityId,$groupItem)

$api                    = New-Object -ComObject 'MOM.ScriptAPI'
$discoveryData          = $api.CreateDiscoveryData(0, $sourceId, $managedEntityId)

$classF5System          = Get-SCOMClass -Name 'ABC.F5.BIGIP.System'
$classF5SystemInstances = Get-SCOMClassInstance -Class $classF5System
$f5NodeNames            = $classF5SystemInstances.'[ABC.F5.BIGIP.System].SystemNodeName'.Value


if ($groupItem -eq 'PoolStatusGroup') {

	$classF5PoolStatus          = Get-SCOMClass -Name 'ABC.F5.BIGIP.PoolStatus'
	$classF5PoolStatusInstances = Get-SCOMClassInstance -Class $classF5PoolStatus

	foreach ($f5NodeName in $f5NodeNames) {

		$displayName   = 'F5-PoolStatusGroup' + ' On ' + $f5NodeName
		$Key           = $f5NodeName + 'F5-PoolStatusGroup' 
		$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']$")
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/Key$",$Key)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/SystemNodeName$",$f5NodeName)	
		$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		

		$classF5PoolStatusInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object {
  
			$poolStatusInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']$")
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/PoolStatusEnabledState$",$_.'[ABC.F5.BIGIP.PoolStatus].PoolStatusEnabledState'.Value)	
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/PoolStatusName$",$_.'[ABC.F5.BIGIP.PoolStatus].PoolStatusName'.Value)	
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/SystemNodeName$",$_.'[ABC.F5.BIGIP.PoolStatus].SystemNodeName'.Value)	
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/Key$",$_.'[ABC.F5.BIGIP.PoolStatus].Key'.Value)
			$poolStatusInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $_.'[System.Entity].DisplayName'.Value)		
  
			$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatusGroupHostsPoolStatus']$")
			$relInstance.Source = $groupInstance
			$relInstance.Target = $poolStatusInstance
			$discoveryData.AddInstance($relInstance)
  
		} #END $classF5SystemInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'NodeAddressGroup') {
		
	$classF5NodeAddress          = Get-SCOMClass -Name 'ABC.F5.BIGIP.NodeAddress'
	$classF5NodeAddressInstances = Get-SCOMClassInstance -Class $classF5NodeAddress	

	foreach ($f5NodeName in $f5NodeNames) {

		$displayName   = 'F5-NodeAddressGroup' + ' On ' + $f5NodeName 
		$Key           = $f5NodeName + 'F5-NodeAddressGroup' 
		$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']$")
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/Key$",$Key)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/SystemNodeName$",$f5NodeName)	
		$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)					

		$classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object {  
						
			$nodeAddressName          = $_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressName'.Value
			$displayName              = $f5NodeName + 'F5-NodeAddress' + $nodeAddressName			
			$key                      = $displayName
			
			$nodeAddressInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']$")			
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressName$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressName'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressEnabledState$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressEnabledState'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressMonitorRule$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressMonitorRule'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressSessionStatus$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressSessionStatus'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/SystemNodeName$",$f5NodeName)
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/Key$",$key)
			$nodeAddressInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $_.'[System.Entity].DisplayName'.Value)		
			
			$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddressGroupHostsNodeAddress']$")
			$relInstance.Source = $groupInstance
			$relInstance.Target = $nodeAddressInstance
			$discoveryData.AddInstance($relInstance)
  
		} #END $classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'TrafficGroupInstancesGroup') {
		
	$classF5TrafficGroupItem          = Get-SCOMClass -Name 'ABC.F5.BIGIP.TrafficGroupItem'
	$classF5TrafficGroupItemInstances = Get-SCOMClassInstance -Class $classF5TrafficGroupItem		

	foreach ($f5NodeName in $f5NodeNames) {		
		
		$groups     = $classF5TrafficGroupItemInstances | Where-Object { $_.'[ABC.F5.BIGIP.TrafficGroupItem].SystemNodeName'.Value -eq $f5NodeName } 
		$groupNames = $groups                           | ForEach-Object { $_.'[ABC.F5.BIGIP.TrafficGroupItem].GroupName'.Value }
		$groupNames = $groupNames                       | Sort-Object -Unique		

		foreach($groupName in $groupNames) {
						
			$displayName   = 'F5-TrafficGroupItemGroup' + '-' +  $groupName + ' On ' + $f5NodeName 
			$Key           = $f5NodeName + 'F5-TrafficGroupItemGroup' + $groupName
			$f5GroupName   = 'F5-TrafficGroupItemGroup' + '-' +  $groupName + '-' + $f5NodeName 		

			$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']$")
			$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/Key$",$Key)
			$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/GroupName$",$f5GroupName)
			$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/SystemNodeName$",$f5NodeName)	
			$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
			
			$classF5TrafficGroupItemInstances | Where-Object { ($_.'[ABC.F5.BIGIP.TrafficGroupItem].GroupName'.Value -eq $groupName) -and ($_.'[ABC.F5.BIGIP.TrafficGroupItem].SystemNodeName'.Value -eq $f5NodeName) } | ForEach-Object {  					
				
				$instGroupDeviceName = $_.'[ABC.F5.BIGIP.TrafficGroupItem].DeviceName'.Value
				$instGroupName       = $_.'[ABC.F5.BIGIP.TrafficGroupItem].GroupName'.Value
				$instSystemNodeName  = $_.'[ABC.F5.BIGIP.TrafficGroupItem].SystemNodeName'.Value

				$instDisplayName     = 'F5-Traffic Group Item ' + $instGroupName + '-' + $instGroupDeviceName + ' On ' + $instSystemNodeName  
				$instKey             = $instSystemNodeName + 'F5-TrafficGroupItem' + $instGroupName + $instGroupDeviceName		
				$instKey             = $instKey.replace('/','').replace('-','')		
				
				$itemInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']$")						
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/DeviceName$",$instGroupDeviceName)					
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/GroupName$",$instGroupName)	
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/SystemNodeName$",$instSystemNodeName)	
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/Key$",$instKey)	
				$itemInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $instDisplayName)		
			
				$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItemGroupHostsTrafficGroupItem']$")
				$relInstance.Source = $groupInstance
				$relInstance.Target = $itemInstance
				$discoveryData.AddInstance($relInstance)
  
			} #END $classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  

		} #END foreach($groupName in $groupNames)				

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'SyncStatusItemGroup') {		
		
	$classF5SyncStatusItem          = Get-SCOMClass -Name 'ABC.F5.BIGIP.SyncStatusItem'
	$classF5SyncStatusItemInstances = Get-SCOMClassInstance -Class $classF5SyncStatusItem	

	foreach ($f5NodeName in $f5NodeNames) {				
	
		$displayName   = 'F5-SyncStatusItemGroup' + ' On ' + $f5NodeName 
		$Key           = $f5NodeName + 'F5-SyncStatusItemGroup'
		$f5GroupName   = 'F5-SyncStatusItemGroup' + '-' + $f5NodeName 

		$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']$")
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/Key$",$Key)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/GroupName$",$f5GroupName)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/SystemNodeName$",$f5NodeName)	
		$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)							
						
		$classF5SyncStatusItemInstances | Where-Object { $_.'[ABC.F5.BIGIP.SyncStatusItem].SystemNodeName'.Value -eq $f5NodeName } | ForEach-Object {  					
				
			$instKey            = $_.'[ABC.F5.BIGIP.SyncStatusItem].Key'.Value
			$instItemName       = $_.'[ABC.F5.BIGIP.SyncStatusItem].ItemName'.Value
			$instSystemNodeName = $_.'[ABC.F5.BIGIP.SyncStatusItem].SystemNodeName'.Value
			$instDisplayName    = 'F5-SyncStatus Item ' + $syncItemName  + ' On ' + $instSystemNodeName  				
			
			$itemInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']$")										
			$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/ItemName$",$instItemName)	
			$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/SystemNodeName$",$instSystemNodeName)	
			$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/Key$",$instKey)	
			$itemInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $instDisplayName)		
			
			$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItemGroupHostsSyncStatusItem']$")
			$relInstance.Source = $groupInstance
			$relInstance.Target = $itemInstance
			$discoveryData.AddInstance($relInstance)
  
		} #END $classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  			

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'SystemHostsPoolStatusGroup') {

	$classF5PoolStatusGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.PoolStatus.Group'
	$classF5PoolStatusGroupInstances = Get-SCOMClassInstance -Class $classF5PoolStatusGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value
			 
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5PoolStatusGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5PoolStatusGroupInstance = $_

			$displayName    = 'F5-PoolStatusGroup' + ' On ' + $f5SystemNodeName
			$Key            = $f5SystemNodeName + 'F5-PoolStatusGroup' 
			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)	
			$discoveryData.AddInstance($targetInstance)
			
			$relInstance = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsPoolStatusGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5PoolStatusGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 

} elseif ($groupItem -eq 'SystemHostsNodeAddressGroup')	{

	$classF5NodeAddressGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.NodeAddress.Group'
	$classF5NodeAddressGroupInstances = Get-SCOMClassInstance -Class $classF5NodeAddressGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value
			
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5PoolStatusGroupInstance = $_	

			$displayName    = 'F5-NodeAddressGroup' + ' On ' + $f5SystemNodeName
			$Key            = $f5SystemNodeName + 'F5-NodeAddressGroup' 
			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)	
			$discoveryData.AddInstance($targetInstance)
			
			$relInstance        = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsNodeAddressGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 

} elseif ($groupItem -eq 'SystemHostsTrafficGroupItemGroup')	{
	
	$classF5TrafficItemGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.TrafficGroupItem.Group'
	$classF5TrafficItemGroupInstances = Get-SCOMClassInstance -Class $classF5TrafficItemGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value		
	
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5TrafficItemGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.TrafficGroupItem.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5TrafficItemGroupInstance = $_		
						
			$displayName   = $classF5TrafficItemGroupInstance.DisplayName
			$Key           = $classF5TrafficItemGroupInstance.'[ABC.F5.BIGIP.TrafficGroupItem.Group].Key'.Value
			$f5GroupName   = $classF5TrafficItemGroupInstance.'[ABC.F5.BIGIP.TrafficGroupItem.Group].GroupName'.Value

			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/GroupName$",$f5GroupName)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
			
			$relInstance        = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsTrafficGroupItemGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 


} elseif ($groupItem -eq 'SystemHostsSyncStatusItemGroup')	{
	
	$classF5SyncStatusItemGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.SyncStatusItem.Group'
	$classF5SyncStatusItemGroupInstances = Get-SCOMClassInstance -Class $classF5SyncStatusItemGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value		
	
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5SyncStatusItemGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.SyncStatusItem.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5SyncStatusItemGroupInstance = $_		
						
			$displayName   = $classF5SyncStatusItemGroupInstance.DisplayName
			$Key           = $classF5SyncStatusItemGroupInstance.'[ABC.F5.BIGIP.SyncStatusItem.Group].Key'.Value
			$f5GroupName   = $classF5SyncStatusItemGroupInstance.'[ABC.F5.BIGIP.SyncStatusItem.Group].GroupName'.Value

			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/GroupName$",$f5GroupName)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
			
			$relInstance        = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsSyncStatusItemGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 

} else {

	$foo = 'Undefined discovery type'

}


$discoveryData]]></ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceId</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityId</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>groupItem</Name>
              <Value>SystemHostsNodeAddressGroup</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>120</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="ABC.F5.BIGIP.Discovery.F5.BIGIP.Application.SyncStatusItemGroups" Target="SC!Microsoft.SystemCenter.RootManagementServer" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="ABC.F5.BIGIP.SyncStatusItemGroupHostsSyncStatusItem" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>3600</IntervalSeconds>
          <SyncTime />
          <ScriptName>DiscoverF5ApplicationRelations.ps1.ps1</ScriptName>
          <ScriptBody><![CDATA[param($sourceId,$managedEntityId,$groupItem)

$api                    = New-Object -ComObject 'MOM.ScriptAPI'
$discoveryData          = $api.CreateDiscoveryData(0, $sourceId, $managedEntityId)

$classF5System          = Get-SCOMClass -Name 'ABC.F5.BIGIP.System'
$classF5SystemInstances = Get-SCOMClassInstance -Class $classF5System
$f5NodeNames            = $classF5SystemInstances.'[ABC.F5.BIGIP.System].SystemNodeName'.Value


if ($groupItem -eq 'PoolStatusGroup') {

	$classF5PoolStatus          = Get-SCOMClass -Name 'ABC.F5.BIGIP.PoolStatus'
	$classF5PoolStatusInstances = Get-SCOMClassInstance -Class $classF5PoolStatus

	foreach ($f5NodeName in $f5NodeNames) {

		$displayName   = 'F5-PoolStatusGroup' + ' On ' + $f5NodeName
		$Key           = $f5NodeName + 'F5-PoolStatusGroup' 
		$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']$")
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/Key$",$Key)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/SystemNodeName$",$f5NodeName)	
		$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		

		$classF5PoolStatusInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object {
  
			$poolStatusInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']$")
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/PoolStatusEnabledState$",$_.'[ABC.F5.BIGIP.PoolStatus].PoolStatusEnabledState'.Value)	
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/PoolStatusName$",$_.'[ABC.F5.BIGIP.PoolStatus].PoolStatusName'.Value)	
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/SystemNodeName$",$_.'[ABC.F5.BIGIP.PoolStatus].SystemNodeName'.Value)	
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/Key$",$_.'[ABC.F5.BIGIP.PoolStatus].Key'.Value)
			$poolStatusInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $_.'[System.Entity].DisplayName'.Value)		
  
			$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatusGroupHostsPoolStatus']$")
			$relInstance.Source = $groupInstance
			$relInstance.Target = $poolStatusInstance
			$discoveryData.AddInstance($relInstance)
  
		} #END $classF5SystemInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'NodeAddressGroup') {
		
	$classF5NodeAddress          = Get-SCOMClass -Name 'ABC.F5.BIGIP.NodeAddress'
	$classF5NodeAddressInstances = Get-SCOMClassInstance -Class $classF5NodeAddress	

	foreach ($f5NodeName in $f5NodeNames) {

		$displayName   = 'F5-NodeAddressGroup' + ' On ' + $f5NodeName 
		$Key           = $f5NodeName + 'F5-NodeAddressGroup' 
		$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']$")
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/Key$",$Key)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/SystemNodeName$",$f5NodeName)	
		$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)					

		$classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object {  
						
			$nodeAddressName          = $_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressName'.Value
			$displayName              = $f5NodeName + 'F5-NodeAddress' + $nodeAddressName			
			$key                      = $displayName
			
			$nodeAddressInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']$")			
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressName$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressName'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressEnabledState$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressEnabledState'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressMonitorRule$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressMonitorRule'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressSessionStatus$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressSessionStatus'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/SystemNodeName$",$f5NodeName)
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/Key$",$key)
			$nodeAddressInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $_.'[System.Entity].DisplayName'.Value)		
			
			$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddressGroupHostsNodeAddress']$")
			$relInstance.Source = $groupInstance
			$relInstance.Target = $nodeAddressInstance
			$discoveryData.AddInstance($relInstance)
  
		} #END $classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'TrafficGroupInstancesGroup') {
		
	$classF5TrafficGroupItem          = Get-SCOMClass -Name 'ABC.F5.BIGIP.TrafficGroupItem'
	$classF5TrafficGroupItemInstances = Get-SCOMClassInstance -Class $classF5TrafficGroupItem		

	foreach ($f5NodeName in $f5NodeNames) {		
		
		$groups     = $classF5TrafficGroupItemInstances | Where-Object { $_.'[ABC.F5.BIGIP.TrafficGroupItem].SystemNodeName'.Value -eq $f5NodeName } 
		$groupNames = $groups                           | ForEach-Object { $_.'[ABC.F5.BIGIP.TrafficGroupItem].GroupName'.Value }
		$groupNames = $groupNames                       | Sort-Object -Unique		

		foreach($groupName in $groupNames) {
						
			$displayName   = 'F5-TrafficGroupItemGroup' + '-' +  $groupName + ' On ' + $f5NodeName 
			$Key           = $f5NodeName + 'F5-TrafficGroupItemGroup' + $groupName
			$f5GroupName   = 'F5-TrafficGroupItemGroup' + '-' +  $groupName + '-' + $f5NodeName 		

			$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']$")
			$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/Key$",$Key)
			$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/GroupName$",$f5GroupName)
			$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/SystemNodeName$",$f5NodeName)	
			$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
			
			$classF5TrafficGroupItemInstances | Where-Object { ($_.'[ABC.F5.BIGIP.TrafficGroupItem].GroupName'.Value -eq $groupName) -and ($_.'[ABC.F5.BIGIP.TrafficGroupItem].SystemNodeName'.Value -eq $f5NodeName) } | ForEach-Object {  					
				
				$instGroupDeviceName = $_.'[ABC.F5.BIGIP.TrafficGroupItem].DeviceName'.Value
				$instGroupName       = $_.'[ABC.F5.BIGIP.TrafficGroupItem].GroupName'.Value
				$instSystemNodeName  = $_.'[ABC.F5.BIGIP.TrafficGroupItem].SystemNodeName'.Value

				$instDisplayName     = 'F5-Traffic Group Item ' + $instGroupName + '-' + $instGroupDeviceName + ' On ' + $instSystemNodeName  
				$instKey             = $instSystemNodeName + 'F5-TrafficGroupItem' + $instGroupName + $instGroupDeviceName		
				$instKey             = $instKey.replace('/','').replace('-','')		
				
				$itemInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']$")						
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/DeviceName$",$instGroupDeviceName)					
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/GroupName$",$instGroupName)	
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/SystemNodeName$",$instSystemNodeName)	
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/Key$",$instKey)	
				$itemInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $instDisplayName)		
			
				$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItemGroupHostsTrafficGroupItem']$")
				$relInstance.Source = $groupInstance
				$relInstance.Target = $itemInstance
				$discoveryData.AddInstance($relInstance)
  
			} #END $classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  

		} #END foreach($groupName in $groupNames)				

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'SyncStatusItemGroup') {		
		
	$classF5SyncStatusItem          = Get-SCOMClass -Name 'ABC.F5.BIGIP.SyncStatusItem'
	$classF5SyncStatusItemInstances = Get-SCOMClassInstance -Class $classF5SyncStatusItem	

	foreach ($f5NodeName in $f5NodeNames) {				
	
		$displayName   = 'F5-SyncStatusItemGroup' + ' On ' + $f5NodeName 
		$Key           = $f5NodeName + 'F5-SyncStatusItemGroup'
		$f5GroupName   = 'F5-SyncStatusItemGroup' + '-' + $f5NodeName 

		$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']$")
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/Key$",$Key)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/GroupName$",$f5GroupName)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/SystemNodeName$",$f5NodeName)	
		$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)							
						
		$classF5SyncStatusItemInstances | Where-Object { $_.'[ABC.F5.BIGIP.SyncStatusItem].SystemNodeName'.Value -eq $f5NodeName } | ForEach-Object {  					
				
			$instKey            = $_.'[ABC.F5.BIGIP.SyncStatusItem].Key'.Value
			$instItemName       = $_.'[ABC.F5.BIGIP.SyncStatusItem].ItemName'.Value
			$instSystemNodeName = $_.'[ABC.F5.BIGIP.SyncStatusItem].SystemNodeName'.Value
			$instDisplayName    = 'F5-SyncStatus Item ' + $syncItemName  + ' On ' + $instSystemNodeName  				
			
			$itemInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']$")										
			$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/ItemName$",$instItemName)	
			$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/SystemNodeName$",$instSystemNodeName)	
			$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/Key$",$instKey)	
			$itemInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $instDisplayName)		
			
			$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItemGroupHostsSyncStatusItem']$")
			$relInstance.Source = $groupInstance
			$relInstance.Target = $itemInstance
			$discoveryData.AddInstance($relInstance)
  
		} #END $classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  			

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'SystemHostsPoolStatusGroup') {

	$classF5PoolStatusGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.PoolStatus.Group'
	$classF5PoolStatusGroupInstances = Get-SCOMClassInstance -Class $classF5PoolStatusGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value
			 
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5PoolStatusGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5PoolStatusGroupInstance = $_

			$displayName    = 'F5-PoolStatusGroup' + ' On ' + $f5SystemNodeName
			$Key            = $f5SystemNodeName + 'F5-PoolStatusGroup' 
			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)	
			$discoveryData.AddInstance($targetInstance)
			
			$relInstance = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsPoolStatusGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5PoolStatusGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 

} elseif ($groupItem -eq 'SystemHostsNodeAddressGroup')	{

	$classF5NodeAddressGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.NodeAddress.Group'
	$classF5NodeAddressGroupInstances = Get-SCOMClassInstance -Class $classF5NodeAddressGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value
			
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5PoolStatusGroupInstance = $_	

			$displayName    = 'F5-NodeAddressGroup' + ' On ' + $f5SystemNodeName
			$Key            = $f5SystemNodeName + 'F5-NodeAddressGroup' 
			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)	
			$discoveryData.AddInstance($targetInstance)
			
			$relInstance        = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsNodeAddressGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 

} elseif ($groupItem -eq 'SystemHostsTrafficGroupItemGroup')	{
	
	$classF5TrafficItemGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.TrafficGroupItem.Group'
	$classF5TrafficItemGroupInstances = Get-SCOMClassInstance -Class $classF5TrafficItemGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value		
	
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5TrafficItemGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.TrafficGroupItem.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5TrafficItemGroupInstance = $_		
						
			$displayName   = $classF5TrafficItemGroupInstance.DisplayName
			$Key           = $classF5TrafficItemGroupInstance.'[ABC.F5.BIGIP.TrafficGroupItem.Group].Key'.Value
			$f5GroupName   = $classF5TrafficItemGroupInstance.'[ABC.F5.BIGIP.TrafficGroupItem.Group].GroupName'.Value

			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/GroupName$",$f5GroupName)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
			
			$relInstance        = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsTrafficGroupItemGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 


} elseif ($groupItem -eq 'SystemHostsSyncStatusItemGroup')	{
	
	$classF5SyncStatusItemGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.SyncStatusItem.Group'
	$classF5SyncStatusItemGroupInstances = Get-SCOMClassInstance -Class $classF5SyncStatusItemGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value		
	
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5SyncStatusItemGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.SyncStatusItem.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5SyncStatusItemGroupInstance = $_		
						
			$displayName   = $classF5SyncStatusItemGroupInstance.DisplayName
			$Key           = $classF5SyncStatusItemGroupInstance.'[ABC.F5.BIGIP.SyncStatusItem.Group].Key'.Value
			$f5GroupName   = $classF5SyncStatusItemGroupInstance.'[ABC.F5.BIGIP.SyncStatusItem.Group].GroupName'.Value

			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/GroupName$",$f5GroupName)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
			
			$relInstance        = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsSyncStatusItemGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 

} else {

	$foo = 'Undefined discovery type'

}


$discoveryData]]></ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceId</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityId</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>groupItem</Name>
              <Value>SyncStatusItemGroup</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>120</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="ABC.F5.BIGIP.Discovery.F5.BIGIP.Application.SyncStatusItem" Target="ABC.F5.BIGIP.MonitoringServer" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="ABC.F5.BIGIP.SyncStatusItem" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>3600</IntervalSeconds>
          <SyncTime />
          <ScriptName>DiscoverF5Applications.ps1</ScriptName>
          <ScriptBody><![CDATA[param($sourceId,$managedEntityId,$discoveryItem,$tempPath)

$api           = New-Object -ComObject 'MOM.ScriptAPI'
$discoveryData = $api.CreateDiscoveryData(0, $sourceId, $managedEntityId)

$Global:Error.Clear()
$script:ErrorView      = 'NormalView'
$ErrorActionPreference = 'Continue'

$F5BigIPHosts          = Import-Csv -Path $($tempPath + '\' + 'F5-BigIP-Hosts.csv')
$discoveryFiles        = Get-ChildItem -Path $tempPath -Filter '*F5-Discovery-*.json' | Select-Object -ExpandProperty Name


foreach($f5HostItem in $F5BigIPHosts) {
  
	$f5HostName      = ''
	$f5HostIPAddress = ''
	$f5HostUrl       = ''

	if ($f5HostItem.HostName -match '[a-zA-Z0-9]{3,}') {
		$f5HostName = $f5HostItem.HostName
	}

	if ($f5HostItem.IPAddress -match '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}') {
		$f5HostIPAddress = $f5HostItem.IPAddress
	}

	if ($f5HostName -ne '') {
		if (Test-Connection -ComputerName $f5HostName -Count 2 -Quiet) {
			$f5HostUrl = $f5HostName
		}
	}
   
	if (($f5HostUrl -eq '') -and ($f5HostIPAddress -ne '')) {
		if (Test-Connection -ComputerName $f5HostIPAddress -Count 2 -Quiet) {     
			$f5HostUrl = $f5HostIPAddress
		} 
	}     
  
	if ($f5HostUrl -ne '') {
				
		if($discoveryItem -eq 'Info') {
		  $discoveryFileContent = @()
		  $discoveryFile = $discoveryFiles | Where-Object { ($_ -match $discoveryItem) -and ($_ -match $f5HostUrl)}
		  foreach($dFile in $discoveryFile) {
			  $discoveryFileContent += Get-Content -Path $($tempPath + '\' + $dFile) | ConvertFrom-Json
		  }  
		} else {
		  $discoveryFile        = $discoveryFiles | Where-Object { ($_ -match $discoveryItem) -and ($_ -match $f5HostUrl)}
		  $discoveryFileContent = Get-Content -Path $($tempPath + '\' + $discoveryFile) | ConvertFrom-Json
		}

		$discoverySystemFile        = $discoveryFiles | Where-Object {($_ -match 'GeneralInfo') -and ($_ -match $f5HostUrl)}
		$discoverySystemFileContent = Get-Content -Path $($tempPath + '\' + $discoverySystemFile) | ConvertFrom-Json
		$systemNodeNameKey          = $($discoverySystemFileContent.GeneralInfo.SystemNodeName)
				
		if ($discoveryItem -eq 'PoolStatus') {			

			$discoveryFileContent.PoolStatus | ForEach-Object {		  
				$poolName         = $_.ltmPoolStatusName
				$displayName      = 'F5-Pool ' + $poolName + ' On ' + $systemNodeNameKey
				$key              = $systemNodeNameKey + 'F5-Pool' + $poolName
				$poolEnabledState = $_.ltmPoolStatusEnabledState

				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']$")			
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/PoolStatusEnabledState$",$poolEnabledState)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/PoolStatusName$",$poolName)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/SystemNodeName$",$systemNodeNameKey)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/Key$",$key)
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
				$discoveryData.AddInstance($instance)
			} #END $discoveryFileContent.PoolStatus | ForEach-Object {}

		} elseif ($discoveryItem -eq 'NodeAddrTable') {
			
			$discoveryFileContent.NodeAddrTable | ForEach-Object {				
				$nodeAddressName          = $_.ltmNodeAddrName
				$displayName              = 'F5-NodeAddress ' + $nodeAddressName + ' On ' + $systemNodeNameKey
				$key                      = $systemNodeNameKey + 'F5-NodeAddress' + $nodeAddressName
				$nodeAddressSessionStatus = $_.ltmNodeAddrSessionStatus
				$nodeAddressMonitorRule   = $_.ltmNodeAddrMonitorRule
				$nodeAddressEnabledState  = $_.ltmNodeAddrEnabledState								  

				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']$")			
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressName$",$nodeAddressName)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressEnabledState$",$nodeAddressEnabledState)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressMonitorRule$",$nodeAddressMonitorRule)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressSessionStatus$",$nodeAddressSessionStatus)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/SystemNodeName$",$systemNodeNameKey)
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/Key$",$key)
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)
				$discoveryData.AddInstance($instance)
			} #EMD $discoveryFileContent.NodeAddrTable | ForEach-Object {}

		} elseif ($discoveryItem -eq 'TrafficGroup') {

			$discoveryFileContent.TrafficGroupStatusTable | ForEach-Object {						
				$groupDeviceName     = $_.sysCmTrafficGroupStatusDeviceName				
				$groupName           = $_.sysCmTrafficGroupStatusTrafficGroup
				
				$displayName         = 'F5-Traffic Group Item ' + $groupName + '-' + $groupDeviceName + ' On ' + $systemNodeNameKey  
				$key                 = $systemNodeNameKey + 'F5-TrafficGroupItem' + $groupName + $groupDeviceName		
				$key                 = $key.replace('/','').replace('-','')		
		
				$api.LogScriptEvent('ABC.F5.BIGIP DiscoveryF5Applications.ps1',402,2,"DiscoveryF5Applicaitons Found TrafficGroup key: $($key)")

				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']$")						
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/DeviceName$",$groupDeviceName)					
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/GroupName$",$groupName)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/SystemNodeName$",$systemNodeNameKey)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/Key$",$key)	
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)	
				$discoveryData.AddInstance($instance)
			}

		} elseif ($discoveryItem -eq 'SyncStatus') {			

			$discoveryFileContent.SyncStatusDetails | ForEach-Object {						
				$syncStateItemPart = $_.sysCmSyncStatusDetailsDetails				
				$syncItemName      = $syncStateItemPart.Substring(0, $syncStateItemPart.IndexOf(' ')).replace(':','')				
				$displayName       = 'F5-SyncStatus Item ' + $syncItemName  + ' On ' + $systemNodeNameKey  
				$key               = $systemNodeNameKey + 'F5-SyncStatusItem' + $syncItemName									

				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']$")						
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/ItemName$",$syncItemName)									
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/SystemNodeName$",$systemNodeNameKey)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/Key$",$key)	
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)	
				$discoveryData.AddInstance($instance)
			}

		} else {
  
			$FOO = 'Undefined type!'
  
		} #END if ($discoveryItem -eq 'PoolStatus') 

	} #END if ($f5HostUrl -ne '')  	

} #END foreach($f5HostItem in $F5BigIPHosts) 
	
$discoveryData]]></ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceId</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityId</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>discoveryItem</Name>
              <Value>SyncStatus</Value>
            </Parameter>
            <Parameter>
              <Name>tempPath</Name>
              <Value>$Target/Property[Type="ABC.F5.BIGIP.MonitoringServer"]/FilePath$</Value>
            </Parameter>
            <Parameter>
              <Name>f5MonServer</Name>
              <Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>300</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="ABC.F5.BIGIP.Discovery.F5.BIGIP.Application.PoolStatusGroups" Target="SC!Microsoft.SystemCenter.RootManagementServer" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="ABC.F5.BIGIP.PoolStatusGroupHostsPoolStatus" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>3600</IntervalSeconds>
          <SyncTime />
          <ScriptName>DiscoverF5ApplicationRelations.ps1.ps1</ScriptName>
          <ScriptBody><![CDATA[param($sourceId,$managedEntityId,$groupItem)

$api                    = New-Object -ComObject 'MOM.ScriptAPI'
$discoveryData          = $api.CreateDiscoveryData(0, $sourceId, $managedEntityId)

$classF5System          = Get-SCOMClass -Name 'ABC.F5.BIGIP.System'
$classF5SystemInstances = Get-SCOMClassInstance -Class $classF5System
$f5NodeNames            = $classF5SystemInstances.'[ABC.F5.BIGIP.System].SystemNodeName'.Value


if ($groupItem -eq 'PoolStatusGroup') {

	$classF5PoolStatus          = Get-SCOMClass -Name 'ABC.F5.BIGIP.PoolStatus'
	$classF5PoolStatusInstances = Get-SCOMClassInstance -Class $classF5PoolStatus

	foreach ($f5NodeName in $f5NodeNames) {

		$displayName   = 'F5-PoolStatusGroup' + ' On ' + $f5NodeName
		$Key           = $f5NodeName + 'F5-PoolStatusGroup' 
		$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']$")
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/Key$",$Key)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/SystemNodeName$",$f5NodeName)	
		$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		

		$classF5PoolStatusInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object {
  
			$poolStatusInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']$")
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/PoolStatusEnabledState$",$_.'[ABC.F5.BIGIP.PoolStatus].PoolStatusEnabledState'.Value)	
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/PoolStatusName$",$_.'[ABC.F5.BIGIP.PoolStatus].PoolStatusName'.Value)	
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/SystemNodeName$",$_.'[ABC.F5.BIGIP.PoolStatus].SystemNodeName'.Value)	
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/Key$",$_.'[ABC.F5.BIGIP.PoolStatus].Key'.Value)
			$poolStatusInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $_.'[System.Entity].DisplayName'.Value)		
  
			$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatusGroupHostsPoolStatus']$")
			$relInstance.Source = $groupInstance
			$relInstance.Target = $poolStatusInstance
			$discoveryData.AddInstance($relInstance)
  
		} #END $classF5SystemInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'NodeAddressGroup') {
		
	$classF5NodeAddress          = Get-SCOMClass -Name 'ABC.F5.BIGIP.NodeAddress'
	$classF5NodeAddressInstances = Get-SCOMClassInstance -Class $classF5NodeAddress	

	foreach ($f5NodeName in $f5NodeNames) {

		$displayName   = 'F5-NodeAddressGroup' + ' On ' + $f5NodeName 
		$Key           = $f5NodeName + 'F5-NodeAddressGroup' 
		$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']$")
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/Key$",$Key)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/SystemNodeName$",$f5NodeName)	
		$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)					

		$classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object {  
						
			$nodeAddressName          = $_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressName'.Value
			$displayName              = $f5NodeName + 'F5-NodeAddress' + $nodeAddressName			
			$key                      = $displayName
			
			$nodeAddressInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']$")			
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressName$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressName'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressEnabledState$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressEnabledState'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressMonitorRule$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressMonitorRule'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressSessionStatus$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressSessionStatus'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/SystemNodeName$",$f5NodeName)
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/Key$",$key)
			$nodeAddressInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $_.'[System.Entity].DisplayName'.Value)		
			
			$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddressGroupHostsNodeAddress']$")
			$relInstance.Source = $groupInstance
			$relInstance.Target = $nodeAddressInstance
			$discoveryData.AddInstance($relInstance)
  
		} #END $classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'TrafficGroupInstancesGroup') {
		
	$classF5TrafficGroupItem          = Get-SCOMClass -Name 'ABC.F5.BIGIP.TrafficGroupItem'
	$classF5TrafficGroupItemInstances = Get-SCOMClassInstance -Class $classF5TrafficGroupItem		

	foreach ($f5NodeName in $f5NodeNames) {		
		
		$groups     = $classF5TrafficGroupItemInstances | Where-Object { $_.'[ABC.F5.BIGIP.TrafficGroupItem].SystemNodeName'.Value -eq $f5NodeName } 
		$groupNames = $groups                           | ForEach-Object { $_.'[ABC.F5.BIGIP.TrafficGroupItem].GroupName'.Value }
		$groupNames = $groupNames                       | Sort-Object -Unique		

		foreach($groupName in $groupNames) {
						
			$displayName   = 'F5-TrafficGroupItemGroup' + '-' +  $groupName + ' On ' + $f5NodeName 
			$Key           = $f5NodeName + 'F5-TrafficGroupItemGroup' + $groupName
			$f5GroupName   = 'F5-TrafficGroupItemGroup' + '-' +  $groupName + '-' + $f5NodeName 		

			$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']$")
			$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/Key$",$Key)
			$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/GroupName$",$f5GroupName)
			$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/SystemNodeName$",$f5NodeName)	
			$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
			
			$classF5TrafficGroupItemInstances | Where-Object { ($_.'[ABC.F5.BIGIP.TrafficGroupItem].GroupName'.Value -eq $groupName) -and ($_.'[ABC.F5.BIGIP.TrafficGroupItem].SystemNodeName'.Value -eq $f5NodeName) } | ForEach-Object {  					
				
				$instGroupDeviceName = $_.'[ABC.F5.BIGIP.TrafficGroupItem].DeviceName'.Value
				$instGroupName       = $_.'[ABC.F5.BIGIP.TrafficGroupItem].GroupName'.Value
				$instSystemNodeName  = $_.'[ABC.F5.BIGIP.TrafficGroupItem].SystemNodeName'.Value

				$instDisplayName     = 'F5-Traffic Group Item ' + $instGroupName + '-' + $instGroupDeviceName + ' On ' + $instSystemNodeName  
				$instKey             = $instSystemNodeName + 'F5-TrafficGroupItem' + $instGroupName + $instGroupDeviceName		
				$instKey             = $instKey.replace('/','').replace('-','')		
				
				$itemInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']$")						
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/DeviceName$",$instGroupDeviceName)					
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/GroupName$",$instGroupName)	
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/SystemNodeName$",$instSystemNodeName)	
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/Key$",$instKey)	
				$itemInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $instDisplayName)		
			
				$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItemGroupHostsTrafficGroupItem']$")
				$relInstance.Source = $groupInstance
				$relInstance.Target = $itemInstance
				$discoveryData.AddInstance($relInstance)
  
			} #END $classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  

		} #END foreach($groupName in $groupNames)				

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'SyncStatusItemGroup') {		
		
	$classF5SyncStatusItem          = Get-SCOMClass -Name 'ABC.F5.BIGIP.SyncStatusItem'
	$classF5SyncStatusItemInstances = Get-SCOMClassInstance -Class $classF5SyncStatusItem	

	foreach ($f5NodeName in $f5NodeNames) {				
	
		$displayName   = 'F5-SyncStatusItemGroup' + ' On ' + $f5NodeName 
		$Key           = $f5NodeName + 'F5-SyncStatusItemGroup'
		$f5GroupName   = 'F5-SyncStatusItemGroup' + '-' + $f5NodeName 

		$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']$")
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/Key$",$Key)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/GroupName$",$f5GroupName)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/SystemNodeName$",$f5NodeName)	
		$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)							
						
		$classF5SyncStatusItemInstances | Where-Object { $_.'[ABC.F5.BIGIP.SyncStatusItem].SystemNodeName'.Value -eq $f5NodeName } | ForEach-Object {  					
				
			$instKey            = $_.'[ABC.F5.BIGIP.SyncStatusItem].Key'.Value
			$instItemName       = $_.'[ABC.F5.BIGIP.SyncStatusItem].ItemName'.Value
			$instSystemNodeName = $_.'[ABC.F5.BIGIP.SyncStatusItem].SystemNodeName'.Value
			$instDisplayName    = 'F5-SyncStatus Item ' + $syncItemName  + ' On ' + $instSystemNodeName  				
			
			$itemInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']$")										
			$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/ItemName$",$instItemName)	
			$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/SystemNodeName$",$instSystemNodeName)	
			$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/Key$",$instKey)	
			$itemInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $instDisplayName)		
			
			$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItemGroupHostsSyncStatusItem']$")
			$relInstance.Source = $groupInstance
			$relInstance.Target = $itemInstance
			$discoveryData.AddInstance($relInstance)
  
		} #END $classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  			

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'SystemHostsPoolStatusGroup') {

	$classF5PoolStatusGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.PoolStatus.Group'
	$classF5PoolStatusGroupInstances = Get-SCOMClassInstance -Class $classF5PoolStatusGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value
			 
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5PoolStatusGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5PoolStatusGroupInstance = $_

			$displayName    = 'F5-PoolStatusGroup' + ' On ' + $f5SystemNodeName
			$Key            = $f5SystemNodeName + 'F5-PoolStatusGroup' 
			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)	
			$discoveryData.AddInstance($targetInstance)
			
			$relInstance = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsPoolStatusGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5PoolStatusGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 

} elseif ($groupItem -eq 'SystemHostsNodeAddressGroup')	{

	$classF5NodeAddressGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.NodeAddress.Group'
	$classF5NodeAddressGroupInstances = Get-SCOMClassInstance -Class $classF5NodeAddressGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value
			
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5PoolStatusGroupInstance = $_	

			$displayName    = 'F5-NodeAddressGroup' + ' On ' + $f5SystemNodeName
			$Key            = $f5SystemNodeName + 'F5-NodeAddressGroup' 
			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)	
			$discoveryData.AddInstance($targetInstance)
			
			$relInstance        = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsNodeAddressGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 

} elseif ($groupItem -eq 'SystemHostsTrafficGroupItemGroup')	{
	
	$classF5TrafficItemGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.TrafficGroupItem.Group'
	$classF5TrafficItemGroupInstances = Get-SCOMClassInstance -Class $classF5TrafficItemGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value		
	
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5TrafficItemGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.TrafficGroupItem.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5TrafficItemGroupInstance = $_		
						
			$displayName   = $classF5TrafficItemGroupInstance.DisplayName
			$Key           = $classF5TrafficItemGroupInstance.'[ABC.F5.BIGIP.TrafficGroupItem.Group].Key'.Value
			$f5GroupName   = $classF5TrafficItemGroupInstance.'[ABC.F5.BIGIP.TrafficGroupItem.Group].GroupName'.Value

			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/GroupName$",$f5GroupName)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
			
			$relInstance        = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsTrafficGroupItemGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 


} elseif ($groupItem -eq 'SystemHostsSyncStatusItemGroup')	{
	
	$classF5SyncStatusItemGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.SyncStatusItem.Group'
	$classF5SyncStatusItemGroupInstances = Get-SCOMClassInstance -Class $classF5SyncStatusItemGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value		
	
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5SyncStatusItemGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.SyncStatusItem.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5SyncStatusItemGroupInstance = $_		
						
			$displayName   = $classF5SyncStatusItemGroupInstance.DisplayName
			$Key           = $classF5SyncStatusItemGroupInstance.'[ABC.F5.BIGIP.SyncStatusItem.Group].Key'.Value
			$f5GroupName   = $classF5SyncStatusItemGroupInstance.'[ABC.F5.BIGIP.SyncStatusItem.Group].GroupName'.Value

			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/GroupName$",$f5GroupName)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
			
			$relInstance        = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsSyncStatusItemGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 

} else {

	$foo = 'Undefined discovery type'

}


$discoveryData]]></ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceId</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityId</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>groupItem</Name>
              <Value>PoolStatusGroup</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>120</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="ABC.F5.BIGIP.Discovery.F5.BIGIP.Application.PoolStatus" Target="ABC.F5.BIGIP.MonitoringServer" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="ABC.F5.BIGIP.PoolStatus" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>3600</IntervalSeconds>
          <SyncTime />
          <ScriptName>DiscoverF5Applications.ps1</ScriptName>
          <ScriptBody><![CDATA[param($sourceId,$managedEntityId,$discoveryItem,$tempPath)

$api           = New-Object -ComObject 'MOM.ScriptAPI'
$discoveryData = $api.CreateDiscoveryData(0, $sourceId, $managedEntityId)

$Global:Error.Clear()
$script:ErrorView      = 'NormalView'
$ErrorActionPreference = 'Continue'

$F5BigIPHosts          = Import-Csv -Path $($tempPath + '\' + 'F5-BigIP-Hosts.csv')
$discoveryFiles        = Get-ChildItem -Path $tempPath -Filter '*F5-Discovery-*.json' | Select-Object -ExpandProperty Name


foreach($f5HostItem in $F5BigIPHosts) {
  
	$f5HostName      = ''
	$f5HostIPAddress = ''
	$f5HostUrl       = ''

	if ($f5HostItem.HostName -match '[a-zA-Z0-9]{3,}') {
		$f5HostName = $f5HostItem.HostName
	}

	if ($f5HostItem.IPAddress -match '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}') {
		$f5HostIPAddress = $f5HostItem.IPAddress
	}

	if ($f5HostName -ne '') {
		if (Test-Connection -ComputerName $f5HostName -Count 2 -Quiet) {
			$f5HostUrl = $f5HostName
		}
	}
   
	if (($f5HostUrl -eq '') -and ($f5HostIPAddress -ne '')) {
		if (Test-Connection -ComputerName $f5HostIPAddress -Count 2 -Quiet) {     
			$f5HostUrl = $f5HostIPAddress
		} 
	}     
  
	if ($f5HostUrl -ne '') {
				
		if($discoveryItem -eq 'Info') {
		  $discoveryFileContent = @()
		  $discoveryFile = $discoveryFiles | Where-Object { ($_ -match $discoveryItem) -and ($_ -match $f5HostUrl)}
		  foreach($dFile in $discoveryFile) {
			  $discoveryFileContent += Get-Content -Path $($tempPath + '\' + $dFile) | ConvertFrom-Json
		  }  
		} else {
		  $discoveryFile        = $discoveryFiles | Where-Object { ($_ -match $discoveryItem) -and ($_ -match $f5HostUrl)}
		  $discoveryFileContent = Get-Content -Path $($tempPath + '\' + $discoveryFile) | ConvertFrom-Json
		}

		$discoverySystemFile        = $discoveryFiles | Where-Object {($_ -match 'GeneralInfo') -and ($_ -match $f5HostUrl)}
		$discoverySystemFileContent = Get-Content -Path $($tempPath + '\' + $discoverySystemFile) | ConvertFrom-Json
		$systemNodeNameKey          = $($discoverySystemFileContent.GeneralInfo.SystemNodeName)
				
		if ($discoveryItem -eq 'PoolStatus') {			

			$discoveryFileContent.PoolStatus | ForEach-Object {		  
				$poolName         = $_.ltmPoolStatusName
				$displayName      = 'F5-Pool ' + $poolName + ' On ' + $systemNodeNameKey
				$key              = $systemNodeNameKey + 'F5-Pool' + $poolName
				$poolEnabledState = $_.ltmPoolStatusEnabledState

				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']$")			
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/PoolStatusEnabledState$",$poolEnabledState)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/PoolStatusName$",$poolName)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/SystemNodeName$",$systemNodeNameKey)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/Key$",$key)
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
				$discoveryData.AddInstance($instance)
			} #END $discoveryFileContent.PoolStatus | ForEach-Object {}

		} elseif ($discoveryItem -eq 'NodeAddrTable') {
			
			$discoveryFileContent.NodeAddrTable | ForEach-Object {				
				$nodeAddressName          = $_.ltmNodeAddrName
				$displayName              = 'F5-NodeAddress ' + $nodeAddressName + ' On ' + $systemNodeNameKey
				$key                      = $systemNodeNameKey + 'F5-NodeAddress' + $nodeAddressName
				$nodeAddressSessionStatus = $_.ltmNodeAddrSessionStatus
				$nodeAddressMonitorRule   = $_.ltmNodeAddrMonitorRule
				$nodeAddressEnabledState  = $_.ltmNodeAddrEnabledState								  

				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']$")			
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressName$",$nodeAddressName)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressEnabledState$",$nodeAddressEnabledState)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressMonitorRule$",$nodeAddressMonitorRule)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressSessionStatus$",$nodeAddressSessionStatus)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/SystemNodeName$",$systemNodeNameKey)
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/Key$",$key)
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)
				$discoveryData.AddInstance($instance)
			} #EMD $discoveryFileContent.NodeAddrTable | ForEach-Object {}

		} elseif ($discoveryItem -eq 'TrafficGroup') {

			$discoveryFileContent.TrafficGroupStatusTable | ForEach-Object {						
				$groupDeviceName     = $_.sysCmTrafficGroupStatusDeviceName				
				$groupName           = $_.sysCmTrafficGroupStatusTrafficGroup
				
				$displayName         = 'F5-Traffic Group Item ' + $groupName + '-' + $groupDeviceName + ' On ' + $systemNodeNameKey  
				$key                 = $systemNodeNameKey + 'F5-TrafficGroupItem' + $groupName + $groupDeviceName		
				$key                 = $key.replace('/','').replace('-','')		
		
				$api.LogScriptEvent('ABC.F5.BIGIP DiscoveryF5Applications.ps1',402,2,"DiscoveryF5Applicaitons Found TrafficGroup key: $($key)")

				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']$")						
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/DeviceName$",$groupDeviceName)					
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/GroupName$",$groupName)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/SystemNodeName$",$systemNodeNameKey)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/Key$",$key)	
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)	
				$discoveryData.AddInstance($instance)
			}

		} elseif ($discoveryItem -eq 'SyncStatus') {			

			$discoveryFileContent.SyncStatusDetails | ForEach-Object {						
				$syncStateItemPart = $_.sysCmSyncStatusDetailsDetails				
				$syncItemName      = $syncStateItemPart.Substring(0, $syncStateItemPart.IndexOf(' ')).replace(':','')				
				$displayName       = 'F5-SyncStatus Item ' + $syncItemName  + ' On ' + $systemNodeNameKey  
				$key               = $systemNodeNameKey + 'F5-SyncStatusItem' + $syncItemName									

				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']$")						
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/ItemName$",$syncItemName)									
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/SystemNodeName$",$systemNodeNameKey)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/Key$",$key)	
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)	
				$discoveryData.AddInstance($instance)
			}

		} else {
  
			$FOO = 'Undefined type!'
  
		} #END if ($discoveryItem -eq 'PoolStatus') 

	} #END if ($f5HostUrl -ne '')  	

} #END foreach($f5HostItem in $F5BigIPHosts) 
	
$discoveryData]]></ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceId</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityId</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>discoveryItem</Name>
              <Value>PoolStatus</Value>
            </Parameter>
            <Parameter>
              <Name>tempPath</Name>
              <Value>$Target/Property[Type="ABC.F5.BIGIP.MonitoringServer"]/FilePath$</Value>
            </Parameter>
            <Parameter>
              <Name>f5MonServer</Name>
              <Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>300</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="ABC.F5.BIGIP.Discovery.F5.BIGIP.Application.NodeAddrTable" Target="ABC.F5.BIGIP.MonitoringServer" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="ABC.F5.BIGIP.NodeAddress" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>3600</IntervalSeconds>
          <SyncTime />
          <ScriptName>DiscoverF5Applications.ps1</ScriptName>
          <ScriptBody><![CDATA[param($sourceId,$managedEntityId,$discoveryItem,$tempPath)

$api           = New-Object -ComObject 'MOM.ScriptAPI'
$discoveryData = $api.CreateDiscoveryData(0, $sourceId, $managedEntityId)

$Global:Error.Clear()
$script:ErrorView      = 'NormalView'
$ErrorActionPreference = 'Continue'

$F5BigIPHosts          = Import-Csv -Path $($tempPath + '\' + 'F5-BigIP-Hosts.csv')
$discoveryFiles        = Get-ChildItem -Path $tempPath -Filter '*F5-Discovery-*.json' | Select-Object -ExpandProperty Name


foreach($f5HostItem in $F5BigIPHosts) {
  
	$f5HostName      = ''
	$f5HostIPAddress = ''
	$f5HostUrl       = ''

	if ($f5HostItem.HostName -match '[a-zA-Z0-9]{3,}') {
		$f5HostName = $f5HostItem.HostName
	}

	if ($f5HostItem.IPAddress -match '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}') {
		$f5HostIPAddress = $f5HostItem.IPAddress
	}

	if ($f5HostName -ne '') {
		if (Test-Connection -ComputerName $f5HostName -Count 2 -Quiet) {
			$f5HostUrl = $f5HostName
		}
	}
   
	if (($f5HostUrl -eq '') -and ($f5HostIPAddress -ne '')) {
		if (Test-Connection -ComputerName $f5HostIPAddress -Count 2 -Quiet) {     
			$f5HostUrl = $f5HostIPAddress
		} 
	}     
  
	if ($f5HostUrl -ne '') {
				
		if($discoveryItem -eq 'Info') {
		  $discoveryFileContent = @()
		  $discoveryFile = $discoveryFiles | Where-Object { ($_ -match $discoveryItem) -and ($_ -match $f5HostUrl)}
		  foreach($dFile in $discoveryFile) {
			  $discoveryFileContent += Get-Content -Path $($tempPath + '\' + $dFile) | ConvertFrom-Json
		  }  
		} else {
		  $discoveryFile        = $discoveryFiles | Where-Object { ($_ -match $discoveryItem) -and ($_ -match $f5HostUrl)}
		  $discoveryFileContent = Get-Content -Path $($tempPath + '\' + $discoveryFile) | ConvertFrom-Json
		}

		$discoverySystemFile        = $discoveryFiles | Where-Object {($_ -match 'GeneralInfo') -and ($_ -match $f5HostUrl)}
		$discoverySystemFileContent = Get-Content -Path $($tempPath + '\' + $discoverySystemFile) | ConvertFrom-Json
		$systemNodeNameKey          = $($discoverySystemFileContent.GeneralInfo.SystemNodeName)
				
		if ($discoveryItem -eq 'PoolStatus') {			

			$discoveryFileContent.PoolStatus | ForEach-Object {		  
				$poolName         = $_.ltmPoolStatusName
				$displayName      = 'F5-Pool ' + $poolName + ' On ' + $systemNodeNameKey
				$key              = $systemNodeNameKey + 'F5-Pool' + $poolName
				$poolEnabledState = $_.ltmPoolStatusEnabledState

				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']$")			
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/PoolStatusEnabledState$",$poolEnabledState)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/PoolStatusName$",$poolName)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/SystemNodeName$",$systemNodeNameKey)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/Key$",$key)
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
				$discoveryData.AddInstance($instance)
			} #END $discoveryFileContent.PoolStatus | ForEach-Object {}

		} elseif ($discoveryItem -eq 'NodeAddrTable') {
			
			$discoveryFileContent.NodeAddrTable | ForEach-Object {				
				$nodeAddressName          = $_.ltmNodeAddrName
				$displayName              = 'F5-NodeAddress ' + $nodeAddressName + ' On ' + $systemNodeNameKey
				$key                      = $systemNodeNameKey + 'F5-NodeAddress' + $nodeAddressName
				$nodeAddressSessionStatus = $_.ltmNodeAddrSessionStatus
				$nodeAddressMonitorRule   = $_.ltmNodeAddrMonitorRule
				$nodeAddressEnabledState  = $_.ltmNodeAddrEnabledState								  

				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']$")			
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressName$",$nodeAddressName)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressEnabledState$",$nodeAddressEnabledState)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressMonitorRule$",$nodeAddressMonitorRule)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressSessionStatus$",$nodeAddressSessionStatus)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/SystemNodeName$",$systemNodeNameKey)
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/Key$",$key)
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)
				$discoveryData.AddInstance($instance)
			} #EMD $discoveryFileContent.NodeAddrTable | ForEach-Object {}

		} elseif ($discoveryItem -eq 'TrafficGroup') {

			$discoveryFileContent.TrafficGroupStatusTable | ForEach-Object {						
				$groupDeviceName     = $_.sysCmTrafficGroupStatusDeviceName				
				$groupName           = $_.sysCmTrafficGroupStatusTrafficGroup
				
				$displayName         = 'F5-Traffic Group Item ' + $groupName + '-' + $groupDeviceName + ' On ' + $systemNodeNameKey  
				$key                 = $systemNodeNameKey + 'F5-TrafficGroupItem' + $groupName + $groupDeviceName		
				$key                 = $key.replace('/','').replace('-','')		
		
				$api.LogScriptEvent('ABC.F5.BIGIP DiscoveryF5Applications.ps1',402,2,"DiscoveryF5Applicaitons Found TrafficGroup key: $($key)")

				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']$")						
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/DeviceName$",$groupDeviceName)					
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/GroupName$",$groupName)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/SystemNodeName$",$systemNodeNameKey)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/Key$",$key)	
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)	
				$discoveryData.AddInstance($instance)
			}

		} elseif ($discoveryItem -eq 'SyncStatus') {			

			$discoveryFileContent.SyncStatusDetails | ForEach-Object {						
				$syncStateItemPart = $_.sysCmSyncStatusDetailsDetails				
				$syncItemName      = $syncStateItemPart.Substring(0, $syncStateItemPart.IndexOf(' ')).replace(':','')				
				$displayName       = 'F5-SyncStatus Item ' + $syncItemName  + ' On ' + $systemNodeNameKey  
				$key               = $systemNodeNameKey + 'F5-SyncStatusItem' + $syncItemName									

				$instance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']$")						
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/ItemName$",$syncItemName)									
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/SystemNodeName$",$systemNodeNameKey)	
				$instance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/Key$",$key)	
				$instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)	
				$discoveryData.AddInstance($instance)
			}

		} else {
  
			$FOO = 'Undefined type!'
  
		} #END if ($discoveryItem -eq 'PoolStatus') 

	} #END if ($f5HostUrl -ne '')  	

} #END foreach($f5HostItem in $F5BigIPHosts) 
	
$discoveryData]]></ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceId</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityId</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>discoveryItem</Name>
              <Value>NodeAddrTable</Value>
            </Parameter>
            <Parameter>
              <Name>tempPath</Name>
              <Value>$Target/Property[Type="ABC.F5.BIGIP.MonitoringServer"]/FilePath$</Value>
            </Parameter>
            <Parameter>
              <Name>f5MonServer</Name>
              <Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>300</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="ABC.F5.BIGIP.Discovery.F5.BIGIP.Application.NodeAddressGroups" Target="SC!Microsoft.SystemCenter.RootManagementServer" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="ABC.F5.BIGIP.NodeAddressGroupHostsNodeAddress" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>3600</IntervalSeconds>
          <SyncTime />
          <ScriptName>DiscoverF5ApplicationRelations.ps1.ps1</ScriptName>
          <ScriptBody><![CDATA[param($sourceId,$managedEntityId,$groupItem)

$api                    = New-Object -ComObject 'MOM.ScriptAPI'
$discoveryData          = $api.CreateDiscoveryData(0, $sourceId, $managedEntityId)

$classF5System          = Get-SCOMClass -Name 'ABC.F5.BIGIP.System'
$classF5SystemInstances = Get-SCOMClassInstance -Class $classF5System
$f5NodeNames            = $classF5SystemInstances.'[ABC.F5.BIGIP.System].SystemNodeName'.Value


if ($groupItem -eq 'PoolStatusGroup') {

	$classF5PoolStatus          = Get-SCOMClass -Name 'ABC.F5.BIGIP.PoolStatus'
	$classF5PoolStatusInstances = Get-SCOMClassInstance -Class $classF5PoolStatus

	foreach ($f5NodeName in $f5NodeNames) {

		$displayName   = 'F5-PoolStatusGroup' + ' On ' + $f5NodeName
		$Key           = $f5NodeName + 'F5-PoolStatusGroup' 
		$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']$")
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/Key$",$Key)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/SystemNodeName$",$f5NodeName)	
		$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		

		$classF5PoolStatusInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object {
  
			$poolStatusInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']$")
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/PoolStatusEnabledState$",$_.'[ABC.F5.BIGIP.PoolStatus].PoolStatusEnabledState'.Value)	
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/PoolStatusName$",$_.'[ABC.F5.BIGIP.PoolStatus].PoolStatusName'.Value)	
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/SystemNodeName$",$_.'[ABC.F5.BIGIP.PoolStatus].SystemNodeName'.Value)	
			$poolStatusInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus']/Key$",$_.'[ABC.F5.BIGIP.PoolStatus].Key'.Value)
			$poolStatusInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $_.'[System.Entity].DisplayName'.Value)		
  
			$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatusGroupHostsPoolStatus']$")
			$relInstance.Source = $groupInstance
			$relInstance.Target = $poolStatusInstance
			$discoveryData.AddInstance($relInstance)
  
		} #END $classF5SystemInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'NodeAddressGroup') {
		
	$classF5NodeAddress          = Get-SCOMClass -Name 'ABC.F5.BIGIP.NodeAddress'
	$classF5NodeAddressInstances = Get-SCOMClassInstance -Class $classF5NodeAddress	

	foreach ($f5NodeName in $f5NodeNames) {

		$displayName   = 'F5-NodeAddressGroup' + ' On ' + $f5NodeName 
		$Key           = $f5NodeName + 'F5-NodeAddressGroup' 
		$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']$")
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/Key$",$Key)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/SystemNodeName$",$f5NodeName)	
		$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)					

		$classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object {  
						
			$nodeAddressName          = $_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressName'.Value
			$displayName              = $f5NodeName + 'F5-NodeAddress' + $nodeAddressName			
			$key                      = $displayName
			
			$nodeAddressInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']$")			
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressName$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressName'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressEnabledState$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressEnabledState'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressMonitorRule$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressMonitorRule'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/NodeAddressSessionStatus$",$_.'[ABC.F5.BIGIP.NodeAddress].NodeAddressSessionStatus'.Value)	
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/SystemNodeName$",$f5NodeName)
			$nodeAddressInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress']/Key$",$key)
			$nodeAddressInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $_.'[System.Entity].DisplayName'.Value)		
			
			$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddressGroupHostsNodeAddress']$")
			$relInstance.Source = $groupInstance
			$relInstance.Target = $nodeAddressInstance
			$discoveryData.AddInstance($relInstance)
  
		} #END $classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'TrafficGroupInstancesGroup') {
		
	$classF5TrafficGroupItem          = Get-SCOMClass -Name 'ABC.F5.BIGIP.TrafficGroupItem'
	$classF5TrafficGroupItemInstances = Get-SCOMClassInstance -Class $classF5TrafficGroupItem		

	foreach ($f5NodeName in $f5NodeNames) {		
		
		$groups     = $classF5TrafficGroupItemInstances | Where-Object { $_.'[ABC.F5.BIGIP.TrafficGroupItem].SystemNodeName'.Value -eq $f5NodeName } 
		$groupNames = $groups                           | ForEach-Object { $_.'[ABC.F5.BIGIP.TrafficGroupItem].GroupName'.Value }
		$groupNames = $groupNames                       | Sort-Object -Unique		

		foreach($groupName in $groupNames) {
						
			$displayName   = 'F5-TrafficGroupItemGroup' + '-' +  $groupName + ' On ' + $f5NodeName 
			$Key           = $f5NodeName + 'F5-TrafficGroupItemGroup' + $groupName
			$f5GroupName   = 'F5-TrafficGroupItemGroup' + '-' +  $groupName + '-' + $f5NodeName 		

			$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']$")
			$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/Key$",$Key)
			$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/GroupName$",$f5GroupName)
			$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/SystemNodeName$",$f5NodeName)	
			$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
			
			$classF5TrafficGroupItemInstances | Where-Object { ($_.'[ABC.F5.BIGIP.TrafficGroupItem].GroupName'.Value -eq $groupName) -and ($_.'[ABC.F5.BIGIP.TrafficGroupItem].SystemNodeName'.Value -eq $f5NodeName) } | ForEach-Object {  					
				
				$instGroupDeviceName = $_.'[ABC.F5.BIGIP.TrafficGroupItem].DeviceName'.Value
				$instGroupName       = $_.'[ABC.F5.BIGIP.TrafficGroupItem].GroupName'.Value
				$instSystemNodeName  = $_.'[ABC.F5.BIGIP.TrafficGroupItem].SystemNodeName'.Value

				$instDisplayName     = 'F5-Traffic Group Item ' + $instGroupName + '-' + $instGroupDeviceName + ' On ' + $instSystemNodeName  
				$instKey             = $instSystemNodeName + 'F5-TrafficGroupItem' + $instGroupName + $instGroupDeviceName		
				$instKey             = $instKey.replace('/','').replace('-','')		
				
				$itemInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']$")						
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/DeviceName$",$instGroupDeviceName)					
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/GroupName$",$instGroupName)	
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/SystemNodeName$",$instSystemNodeName)	
				$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem']/Key$",$instKey)	
				$itemInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $instDisplayName)		
			
				$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItemGroupHostsTrafficGroupItem']$")
				$relInstance.Source = $groupInstance
				$relInstance.Target = $itemInstance
				$discoveryData.AddInstance($relInstance)
  
			} #END $classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  

		} #END foreach($groupName in $groupNames)				

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'SyncStatusItemGroup') {		
		
	$classF5SyncStatusItem          = Get-SCOMClass -Name 'ABC.F5.BIGIP.SyncStatusItem'
	$classF5SyncStatusItemInstances = Get-SCOMClassInstance -Class $classF5SyncStatusItem	

	foreach ($f5NodeName in $f5NodeNames) {				
	
		$displayName   = 'F5-SyncStatusItemGroup' + ' On ' + $f5NodeName 
		$Key           = $f5NodeName + 'F5-SyncStatusItemGroup'
		$f5GroupName   = 'F5-SyncStatusItemGroup' + '-' + $f5NodeName 

		$groupInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']$")
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/Key$",$Key)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/GroupName$",$f5GroupName)
		$groupInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/SystemNodeName$",$f5NodeName)	
		$groupInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)							
						
		$classF5SyncStatusItemInstances | Where-Object { $_.'[ABC.F5.BIGIP.SyncStatusItem].SystemNodeName'.Value -eq $f5NodeName } | ForEach-Object {  					
				
			$instKey            = $_.'[ABC.F5.BIGIP.SyncStatusItem].Key'.Value
			$instItemName       = $_.'[ABC.F5.BIGIP.SyncStatusItem].ItemName'.Value
			$instSystemNodeName = $_.'[ABC.F5.BIGIP.SyncStatusItem].SystemNodeName'.Value
			$instDisplayName    = 'F5-SyncStatus Item ' + $syncItemName  + ' On ' + $instSystemNodeName  				
			
			$itemInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']$")										
			$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/ItemName$",$instItemName)	
			$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/SystemNodeName$",$instSystemNodeName)	
			$itemInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem']/Key$",$instKey)	
			$itemInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $instDisplayName)		
			
			$relInstance        = $discoveryData.CreateRelationshipInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItemGroupHostsSyncStatusItem']$")
			$relInstance.Source = $groupInstance
			$relInstance.Target = $itemInstance
			$discoveryData.AddInstance($relInstance)
  
		} #END $classF5NodeAddressInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress].SystemNodeName'.Value -eq $f5NodeName} | ForEach-Object  			

	} #END foreach ($f5NodeName in $f5NodeNames)

} elseif ($groupItem -eq 'SystemHostsPoolStatusGroup') {

	$classF5PoolStatusGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.PoolStatus.Group'
	$classF5PoolStatusGroupInstances = Get-SCOMClassInstance -Class $classF5PoolStatusGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value
			 
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5PoolStatusGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5PoolStatusGroupInstance = $_

			$displayName    = 'F5-PoolStatusGroup' + ' On ' + $f5SystemNodeName
			$Key            = $f5SystemNodeName + 'F5-PoolStatusGroup' 
			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.PoolStatus.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)	
			$discoveryData.AddInstance($targetInstance)
			
			$relInstance = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsPoolStatusGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5PoolStatusGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 

} elseif ($groupItem -eq 'SystemHostsNodeAddressGroup')	{

	$classF5NodeAddressGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.NodeAddress.Group'
	$classF5NodeAddressGroupInstances = Get-SCOMClassInstance -Class $classF5NodeAddressGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value
			
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.NodeAddress.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5PoolStatusGroupInstance = $_	

			$displayName    = 'F5-NodeAddressGroup' + ' On ' + $f5SystemNodeName
			$Key            = $f5SystemNodeName + 'F5-NodeAddressGroup' 
			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.NodeAddress.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)	
			$discoveryData.AddInstance($targetInstance)
			
			$relInstance        = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsNodeAddressGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 

} elseif ($groupItem -eq 'SystemHostsTrafficGroupItemGroup')	{
	
	$classF5TrafficItemGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.TrafficGroupItem.Group'
	$classF5TrafficItemGroupInstances = Get-SCOMClassInstance -Class $classF5TrafficItemGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value		
	
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5TrafficItemGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.TrafficGroupItem.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5TrafficItemGroupInstance = $_		
						
			$displayName   = $classF5TrafficItemGroupInstance.DisplayName
			$Key           = $classF5TrafficItemGroupInstance.'[ABC.F5.BIGIP.TrafficGroupItem.Group].Key'.Value
			$f5GroupName   = $classF5TrafficItemGroupInstance.'[ABC.F5.BIGIP.TrafficGroupItem.Group].GroupName'.Value

			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/GroupName$",$f5GroupName)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.TrafficGroupItem.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
			
			$relInstance        = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsTrafficGroupItemGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 


} elseif ($groupItem -eq 'SystemHostsSyncStatusItemGroup')	{
	
	$classF5SyncStatusItemGroup          = Get-SCOMClass -Name 'ABC.F5.BIGIP.SyncStatusItem.Group'
	$classF5SyncStatusItemGroupInstances = Get-SCOMClassInstance -Class $classF5SyncStatusItemGroup
	
	$classF5SystemInstances | ForEach-Object {	
	
		$classF5SystemInstance = $_
		$f5SystemNodeName      = $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemNodeName'.Value		
	
		$srcInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.System']$")
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemNodeName$", $f5SystemNodeName)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemRelease$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemRelease'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/SystemName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].SystemName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductDate$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductDate'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductBuild$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductBuild'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductName$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductName'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/ProductVersion$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].ProductVersion'.Value)
		$srcInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.System']/IPAddress$", $classF5SystemInstance.'[ABC.F5.BIGIP.System].IPAddress'.Value)
		$discoveryData.AddInstance($srcInstance)	

		$classF5SyncStatusItemGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.SyncStatusItem.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object {
			
			$classF5SyncStatusItemGroupInstance = $_		
						
			$displayName   = $classF5SyncStatusItemGroupInstance.DisplayName
			$Key           = $classF5SyncStatusItemGroupInstance.'[ABC.F5.BIGIP.SyncStatusItem.Group].Key'.Value
			$f5GroupName   = $classF5SyncStatusItemGroupInstance.'[ABC.F5.BIGIP.SyncStatusItem.Group].GroupName'.Value

			$targetInstance = $discoveryData.CreateClassInstance("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']$")
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/Key$",$Key)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/GroupName$",$f5GroupName)
			$targetInstance.AddProperty("$MPElement[Name='ABC.F5.BIGIP.SyncStatusItem.Group']/SystemNodeName$",$f5SystemNodeName)	
			$targetInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $displayName)		
			
			$relInstance        = $discoveryData.CreateRelationShipInstance("$MPElement[Name='ABC.F5.BIGIP.SystemHostsSyncStatusItemGroup']$")
			$relInstance.Source = $srcInstance
			$relInstance.Target = $targetInstance									
			$discoveryData.AddInstance($relInstance)

		} #END $classF5NodeAddressGroupInstances | Where-Object {$_.'[ABC.F5.BIGIP.PoolStatus.Group].SystemNodeName'.Value -eq $f5SystemNodeName} | ForEach-Object 

	} #END $classF5SystemInstances | ForEach-Object 

} else {

	$foo = 'Undefined discovery type'

}


$discoveryData]]></ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceId</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityId</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>groupItem</Name>
              <Value>NodeAddressGroup</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>120</TimeoutSeconds>
        </DataSource>
      </Discovery>
    </Discoveries>
    <Monitors>
      <AggregateMonitor ID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.Aggregate.HealthState" Accessibility="Internal" Enabled="true" Target="ABC.F5.BIGIP.System" ParentMonitorID="Health!System.Health.PerformanceState" Remotable="true" Priority="Normal">
        <Category>PerformanceHealth</Category>
        <Algorithm>WorstOf</Algorithm>
      </AggregateMonitor>
      <UnitMonitor ID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System" Accessibility="Internal" Enabled="true" Target="ABC.F5.BIGIP.System" ParentMonitorID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.Aggregate.HealthState" Remotable="true" Priority="Normal" TypeID="Windows!Microsoft.Windows.WmiBased.Performance.ConsecutiveSamplesThreshold" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.AlertMessage">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="ConditionTrue" MonitorTypeStateID="ConditionTrue" HealthState="Error" />
          <OperationalState ID="ConditionFalse" MonitorTypeStateID="ConditionFalse" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <NameSpace>root\cimv2</NameSpace>
          <Query>SELECT StatusCode FROM Win32_PingStatus WHERE Address ='$Target/Property[Type="ABC.F5.BIGIP.System"]/IPAddress$'</Query>
          <Frequency>300</Frequency>
          <ObjectName>F5PingCheck</ObjectName>
          <CounterName>PingCheckResponse</CounterName>
          <InstanceName />
          <Value>$Data/Property[@Name='StatusCode']$</Value>
          <Threshold>0</Threshold>
          <Direction>greater</Direction>
          <NumSamples>4</NumSamples>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.NodeAddr" Accessibility="Internal" Enabled="true" Target="ABC.F5.BIGIP.NodeAddress" ParentMonitorID="Health!System.Health.SecurityState" Remotable="true" Priority="Normal" TypeID="ABC.F5.BIGIP.Applications.Test.MonitorType" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.NodeAddr.AlertMessage">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/Property[@Name='TestedAt']$</AlertParameter1>
            <AlertParameter2>$Data/Context/Property[@Name='State']$</AlertParameter2>
            <AlertParameter3>$Data/Context/Property[@Name='Supplement']$</AlertParameter3>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="UnderThreshold" MonitorTypeStateID="UnderThreshold" HealthState="Success" />
          <OperationalState ID="OverWarningThreshold" MonitorTypeStateID="OverWarningThreshold" HealthState="Warning" />
          <OperationalState ID="OverErrorThreshold" MonitorTypeStateID="OverErrorThreshold" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>300</IntervalSeconds>
          <SyncTime />
          <MonitorItem>NodeAddr</MonitorItem>
          <Key>$Target/Property[Type="ABC.F5.BIGIP.NodeAddress"]/Key$</Key>
          <Threshold>90</Threshold>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.Disk" Accessibility="Internal" Enabled="true" Target="ABC.F5.BIGIP.Disk" ParentMonitorID="Health!System.Health.PerformanceState" Remotable="true" Priority="Normal" TypeID="ABC.F5.BIGIP.SystemHardware.Test.MonitorType" ConfirmDelivery="false">
        <Category>PerformanceHealth</Category>
        <AlertSettings AlertMessage="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.Disk.AlertMessage">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/Property[@Name='TestedAt']$</AlertParameter1>
            <AlertParameter2>$Data/Context/Property[@Name='State']$</AlertParameter2>
            <AlertParameter3>$Data/Context/Property[@Name='Supplement']$</AlertParameter3>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Success" MonitorTypeStateID="Success" HealthState="Success" />
          <OperationalState ID="Failure" MonitorTypeStateID="Failure" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>300</IntervalSeconds>
          <SyncTime />
          <MonitorItem>Disks</MonitorItem>
          <Key>$Target/Property[Type="ABC.F5.BIGIP.Disk"]/Key$</Key>
          <Threshold>10</Threshold>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.Memory" Accessibility="Internal" Enabled="true" Target="ABC.F5.BIGIP.Memory" ParentMonitorID="Health!System.Health.PerformanceState" Remotable="true" Priority="Normal" TypeID="ABC.F5.BIGIP.SystemHardware.Test.MonitorType" ConfirmDelivery="false">
        <Category>PerformanceHealth</Category>
        <AlertSettings AlertMessage="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.Memory.AlertMessage">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/Property[@Name='TestedAt']$</AlertParameter1>
            <AlertParameter2>$Data/Context/Property[@Name='State']$</AlertParameter2>
            <AlertParameter3>$Data/Context/Property[@Name='Supplement']$</AlertParameter3>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Success" MonitorTypeStateID="Success" HealthState="Success" />
          <OperationalState ID="Failure" MonitorTypeStateID="Failure" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>300</IntervalSeconds>
          <SyncTime />
          <MonitorItem>Memory</MonitorItem>
          <Key>$Target/Property[Type="ABC.F5.BIGIP.Memory"]/Key$</Key>
          <Threshold>80</Threshold>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.TrafficGroupItem" Accessibility="Internal" Enabled="true" Target="ABC.F5.BIGIP.TrafficGroupItem" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="true" Priority="Normal" TypeID="ABC.F5.BIGIP.Applications.Test.MonitorType" ConfirmDelivery="false">
        <Category>ConfigurationHealth</Category>
        <AlertSettings AlertMessage="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.TrafficGroupItem.AlertMessage">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/Property[@Name='TestedAt']$</AlertParameter1>
            <AlertParameter2>$Data/Context/Property[@Name='State']$</AlertParameter2>
            <AlertParameter3>$Data/Context/Property[@Name='Supplement']$</AlertParameter3>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="UnderThreshold" MonitorTypeStateID="UnderThreshold" HealthState="Success" />
          <OperationalState ID="OverWarningThreshold" MonitorTypeStateID="OverWarningThreshold" HealthState="Warning" />
          <OperationalState ID="OverErrorThreshold" MonitorTypeStateID="OverErrorThreshold" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>900</IntervalSeconds>
          <SyncTime />
          <MonitorItem>TrafficGroup</MonitorItem>
          <Key>$Target/Property[Type="ABC.F5.BIGIP.TrafficGroupItem"]/Key$</Key>
          <Threshold></Threshold>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.CPU" Accessibility="Internal" Enabled="true" Target="ABC.F5.BIGIP.CPU" ParentMonitorID="Health!System.Health.PerformanceState" Remotable="true" Priority="Normal" TypeID="ABC.F5.BIGIP.SystemHardware.Test.MonitorType" ConfirmDelivery="false">
        <Category>PerformanceHealth</Category>
        <AlertSettings AlertMessage="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.CPU.AlertMessage">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/Property[@Name='TestedAt']$</AlertParameter1>
            <AlertParameter2>$Data/Context/Property[@Name='State']$</AlertParameter2>
            <AlertParameter3>$Data/Context/Property[@Name='Supplement']$</AlertParameter3>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Success" MonitorTypeStateID="Success" HealthState="Success" />
          <OperationalState ID="Failure" MonitorTypeStateID="Failure" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>300</IntervalSeconds>
          <SyncTime />
          <MonitorItem>CPU</MonitorItem>
          <Key>$Target/Property[Type="ABC.F5.BIGIP.CPU"]/Key$</Key>
          <Threshold>90</Threshold>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.SyncStatusItem" Accessibility="Internal" Enabled="true" Target="ABC.F5.BIGIP.SyncStatusItem" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="true" Priority="Normal" TypeID="ABC.F5.BIGIP.Applications.Test.MonitorType" ConfirmDelivery="false">
        <Category>ConfigurationHealth</Category>
        <AlertSettings AlertMessage="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.SyncStatusItem.AlertMessage">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/Property[@Name='TestedAt']$</AlertParameter1>
            <AlertParameter2>$Data/Context/Property[@Name='State']$</AlertParameter2>
            <AlertParameter3>$Data/Context/Property[@Name='Supplement']$</AlertParameter3>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="UnderThreshold" MonitorTypeStateID="UnderThreshold" HealthState="Success" />
          <OperationalState ID="OverWarningThreshold" MonitorTypeStateID="OverWarningThreshold" HealthState="Warning" />
          <OperationalState ID="OverErrorThreshold" MonitorTypeStateID="OverErrorThreshold" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>900</IntervalSeconds>
          <SyncTime />
          <MonitorItem>SyncStatus</MonitorItem>
          <Key>$Target/Property[Type="ABC.F5.BIGIP.SyncStatusItem"]/Key$</Key>
          <Threshold></Threshold>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.PoolStatus" Accessibility="Internal" Enabled="true" Target="ABC.F5.BIGIP.PoolStatus" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="ABC.F5.BIGIP.Applications.Test.MonitorType" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.PoolStatus.AlertMessage">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/Property[@Name='TestedAt']$</AlertParameter1>
            <AlertParameter2>$Data/Context/Property[@Name='State']$</AlertParameter2>
            <AlertParameter3>$Data/Context/Property[@Name='Supplement']$</AlertParameter3>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="UnderThreshold" MonitorTypeStateID="UnderThreshold" HealthState="Success" />
          <OperationalState ID="OverWarningThreshold" MonitorTypeStateID="OverWarningThreshold" HealthState="Warning" />
          <OperationalState ID="OverErrorThreshold" MonitorTypeStateID="OverErrorThreshold" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>300</IntervalSeconds>
          <SyncTime />
          <MonitorItem>PoolStatus</MonitorItem>
          <Key>$Target/Property[Type="ABC.F5.BIGIP.PoolStatus"]/Key$</Key>
          <Threshold>90</Threshold>
        </Configuration>
      </UnitMonitor>
      <DependencyMonitor ID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.NodeAddr.Group" Accessibility="Internal" Enabled="true" Target="ABC.F5.BIGIP.NodeAddress.Group" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" RelationshipType="ABC.F5.BIGIP.NodeAddressGroupHostsNodeAddress" MemberMonitor="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.NodeAddr">
        <Category>AvailabilityHealth</Category>
        <Algorithm>WorstOf</Algorithm>
      </DependencyMonitor>
      <DependencyMonitor ID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.SysDepOn.SyncItm" Accessibility="Internal" Enabled="true" Target="ABC.F5.BIGIP.System" ParentMonitorID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.Aggregate.HealthState" Remotable="true" Priority="Normal" RelationshipType="ABC.F5.BIGIP.SystemHostsSyncStatusItemGroup" MemberMonitor="Health!System.Health.ConfigurationState">
        <Category>ConfigurationHealth</Category>
        <Algorithm>WorstOf</Algorithm>
      </DependencyMonitor>
      <DependencyMonitor ID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.SysDepOn.TraffGrp" Accessibility="Internal" Enabled="true" Target="ABC.F5.BIGIP.System" ParentMonitorID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.Aggregate.HealthState" Remotable="true" Priority="Normal" RelationshipType="ABC.F5.BIGIP.SystemHostsTrafficGroupItemGroup" MemberMonitor="Health!System.Health.ConfigurationState">
        <Category>ConfigurationHealth</Category>
        <Algorithm>WorstOf</Algorithm>
      </DependencyMonitor>
      <DependencyMonitor ID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.SysDepOn.CPU" Accessibility="Internal" Enabled="true" Target="ABC.F5.BIGIP.System" ParentMonitorID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.Aggregate.HealthState" Remotable="true" Priority="Normal" RelationshipType="ABC.F5.BIGIP.SystemHostsCPU" MemberMonitor="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.CPU">
        <Category>PerformanceHealth</Category>
        <Algorithm>WorstOf</Algorithm>
      </DependencyMonitor>
      <DependencyMonitor ID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.SysDepOn.Disk" Accessibility="Internal" Enabled="true" Target="ABC.F5.BIGIP.System" ParentMonitorID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.Aggregate.HealthState" Remotable="true" Priority="Normal" RelationshipType="ABC.F5.BIGIP.SystemHostsDisk" MemberMonitor="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.Disk">
        <Category>PerformanceHealth</Category>
        <Algorithm>WorstOf</Algorithm>
      </DependencyMonitor>
      <DependencyMonitor ID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.TrafficItemGroup.Group" Accessibility="Internal" Enabled="true" Target="ABC.F5.BIGIP.TrafficGroupItem.Group" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="true" Priority="Normal" RelationshipType="ABC.F5.BIGIP.TrafficGroupItemGroupHostsTrafficGroupItem" MemberMonitor="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.TrafficGroupItem">
        <Category>ConfigurationHealth</Category>
        <Algorithm>WorstOf</Algorithm>
      </DependencyMonitor>
      <DependencyMonitor ID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.PoolStatusGroup" Accessibility="Internal" Enabled="true" Target="ABC.F5.BIGIP.PoolStatus.Group" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" RelationshipType="ABC.F5.BIGIP.PoolStatusGroupHostsPoolStatus" MemberMonitor="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.PoolStatus">
        <Category>AvailabilityHealth</Category>
        <Algorithm>WorstOf</Algorithm>
      </DependencyMonitor>
      <DependencyMonitor ID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.SyncStatusItem.Group" Accessibility="Internal" Enabled="true" Target="ABC.F5.BIGIP.SyncStatusItem.Group" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="true" Priority="Normal" RelationshipType="ABC.F5.BIGIP.SyncStatusItemGroupHostsSyncStatusItem" MemberMonitor="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.SyncStatusItem">
        <Category>ConfigurationHealth</Category>
        <Algorithm>WorstOf</Algorithm>
      </DependencyMonitor>
      <DependencyMonitor ID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.SysDepOn.Mem" Accessibility="Internal" Enabled="true" Target="ABC.F5.BIGIP.System" ParentMonitorID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.Aggregate.HealthState" Remotable="true" Priority="Normal" RelationshipType="ABC.F5.BIGIP.SystemHostsMemory" MemberMonitor="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.Memory">
        <Category>PerformanceHealth</Category>
        <Algorithm>WorstOf</Algorithm>
      </DependencyMonitor>
    </Monitors>
  </Monitoring>
  <Presentation>
    <Views>
      <View ID="ABC.F5.BIGIP.View.Alert.F5CPU" Accessibility="Internal" Target="ABC.F5.BIGIP.CPU" TypeID="SC!Microsoft.SystemCenter.AlertViewType" Visible="true">
        <Category>Operations</Category>
      </View>
      <View ID="ABC.F5.BIGIP.View.Alert.F5Disk" Accessibility="Internal" Target="ABC.F5.BIGIP.Disk" TypeID="SC!Microsoft.SystemCenter.AlertViewType" Visible="true">
        <Category>Operations</Category>
      </View>
      <View ID="ABC.F5.BIGIP.View.Alert.F5Memory" Accessibility="Internal" Target="ABC.F5.BIGIP.Memory" TypeID="SC!Microsoft.SystemCenter.AlertViewType" Visible="true">
        <Category>Operations</Category>
      </View>
      <View ID="ABC.F5.BIGIP.View.Alert.F5NodeAddress" Accessibility="Internal" Target="ABC.F5.BIGIP.NodeAddress" TypeID="SC!Microsoft.SystemCenter.AlertViewType" Visible="true">
        <Category>Operations</Category>
      </View>
      <View ID="ABC.F5.BIGIP.View.Alert.F5PoolStatus" Accessibility="Internal" Target="ABC.F5.BIGIP.PoolStatus" TypeID="SC!Microsoft.SystemCenter.AlertViewType" Visible="true">
        <Category>Operations</Category>
      </View>
      <View ID="ABC.F5.BIGIP.View.Alert.F5SyncItemStatus" Accessibility="Internal" Target="ABC.F5.BIGIP.SyncStatusItem" TypeID="SC!Microsoft.SystemCenter.AlertViewType" Visible="true">
        <Category>Operations</Category>
      </View>
      <View ID="ABC.F5.BIGIP.View.Alert.F5TrafficGroupItem" Accessibility="Internal" Target="ABC.F5.BIGIP.TrafficGroupItem" TypeID="SC!Microsoft.SystemCenter.AlertViewType" Visible="true">
        <Category>Operations</Category>
      </View>
      <View ID="ABC.F5.BIGIP.View.State.F5CPU" Accessibility="Internal" Target="ABC.F5.BIGIP.CPU" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="true">
        <Category>Operations</Category>
        <Presentation>
          <ColumnInfo Index="0" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="120">
            <Name>State</Name>
            <Id>ABC.F5.BIGIP.CPU</Id>
          </ColumnInfo>
          <ColumnInfo Index="1" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="220">
            <Name>Id</Name>
            <Id>ABC.F5.BIGIP.CPU/Id</Id>
          </ColumnInfo>
          <ColumnInfo Index="2" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="320">
            <Name>SystemNodeName</Name>
            <Id>ABC.F5.BIGIP.CPU/SystemNodeName</Id>
          </ColumnInfo>
          <ColumnInfo Index="3" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="320">
            <Name>Key</Name>
            <Id>ABC.F5.BIGIP.CPU/Key</Id>
          </ColumnInfo>
        </Presentation>
      </View>
      <View ID="ABC.F5.BIGIP.View.State.F5Disk" Accessibility="Internal" Target="ABC.F5.BIGIP.Disk" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="true">
        <Category>Operations</Category>
        <Presentation>
          <ColumnInfo Index="0" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="120">
            <Name>State</Name>
            <Id>ABC.F5.BIGIP.Disk</Id>
          </ColumnInfo>
          <ColumnInfo Index="1" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="220">
            <Name>TotalSize</Name>
            <Id>ABC.F5.BIGIP.Disk/TotalSize</Id>
          </ColumnInfo>
          <ColumnInfo Index="2" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="220">
            <Name>FullPathAttr</Name>
            <Id>ABC.F5.BIGIP.Disk/FullPathAttr</Id>
          </ColumnInfo>
          <ColumnInfo Index="3" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="320">
            <Name>SystemNodeName</Name>
            <Id>ABC.F5.BIGIP.Disk/SystemNodeName</Id>
          </ColumnInfo>
          <ColumnInfo Index="4" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="320">
            <Name>Key</Name>
            <Id>ABC.F5.BIGIP.Disk/Key</Id>
          </ColumnInfo>
        </Presentation>
      </View>
      <View ID="ABC.F5.BIGIP.View.State.F5Memory" Accessibility="Internal" Target="ABC.F5.BIGIP.Memory" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="true">
        <Category>Operations</Category>
        <Presentation>
          <ColumnInfo Index="0" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="120">
            <Name>State</Name>
            <Id>ABC.F5.BIGIP.Memory</Id>
          </ColumnInfo>
          <ColumnInfo Index="1" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="220">
            <Name>MemoryTotal</Name>
            <Id>ABC.F5.BIGIP.Memory/MemoryTotal</Id>
          </ColumnInfo>
          <ColumnInfo Index="2" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="320">
            <Name>SystemNodeName</Name>
            <Id>ABC.F5.BIGIP.Memory/SystemNodeName</Id>
          </ColumnInfo>
          <ColumnInfo Index="3" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="320">
            <Name>Key</Name>
            <Id>ABC.F5.BIGIP.Memory/Key</Id>
          </ColumnInfo>
        </Presentation>
      </View>
      <View ID="ABC.F5.BIGIP.View.State.F5NodeAddr" Accessibility="Internal" Target="ABC.F5.BIGIP.NodeAddress" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="true">
        <Category>Operations</Category>
        <Presentation>
          <ColumnInfo Index="0" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="120">
            <Name>State</Name>
            <Id>ABC.F5.BIGIP.NodeAddress</Id>
          </ColumnInfo>
          <ColumnInfo Index="1" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="220">
            <Name>NodeAddressMonitorRule</Name>
            <Id>ABC.F5.BIGIP.NodeAddress/NodeAddressMonitorRule</Id>
          </ColumnInfo>
          <ColumnInfo Index="2" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="220">
            <Name>NodeAddressSessionStatus</Name>
            <Id>ABC.F5.BIGIP.NodeAddress/NodeAddressSessionStatus</Id>
          </ColumnInfo>
          <ColumnInfo Index="3" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="400">
            <Name>NodeAddressName</Name>
            <Id>ABC.F5.BIGIP.NodeAddress/NodeAddressName</Id>
          </ColumnInfo>
          <ColumnInfo Index="4" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="340">
            <Name>SystemNodeName</Name>
            <Id>ABC.F5.BIGIP.NodeAddress/SystemNodeName</Id>
          </ColumnInfo>
          <ColumnInfo Index="5" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="340">
            <Name>Key</Name>
            <Id>ABC.F5.BIGIP.NodeAddress/Key</Id>
          </ColumnInfo>
        </Presentation>
      </View>
      <View ID="ABC.F5.BIGIP.View.State.F5PoolStatus" Accessibility="Internal" Target="ABC.F5.BIGIP.PoolStatus" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="true">
        <Category>Operations</Category>
        <Presentation>
          <ColumnInfo Index="0" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="120">
            <Name>State</Name>
            <Id>ABC.F5.BIGIP.PoolStatus</Id>
          </ColumnInfo>
          <ColumnInfo Index="1" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="220">
            <Name>PoolStatusEnabledState</Name>
            <Id>ABC.F5.BIGIP.PoolStatus/PoolStatusEnabledState</Id>
          </ColumnInfo>
          <ColumnInfo Index="2" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="400">
            <Name>PoolStatusName</Name>
            <Id>ABC.F5.BIGIP.PoolStatus/PoolStatusName</Id>
          </ColumnInfo>
          <ColumnInfo Index="3" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="340">
            <Name>SystemNodeName</Name>
            <Id>ABC.F5.BIGIP.PoolStatus/SystemNodeName</Id>
          </ColumnInfo>
          <ColumnInfo Index="4" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="340">
            <Name>Key</Name>
            <Id>ABC.F5.BIGIP.PoolStatus/Key</Id>
          </ColumnInfo>
        </Presentation>
      </View>
      <View ID="ABC.F5.BIGIP.View.State.F5SyncStatusItem" Accessibility="Internal" Target="ABC.F5.BIGIP.SyncStatusItem" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="true">
        <Category>Operations</Category>
        <Presentation>
          <ColumnInfo Index="0" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="120">
            <Name>State</Name>
            <Id>ABC.F5.BIGIP.SyncStatusItem</Id>
          </ColumnInfo>
          <ColumnInfo Index="1" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="500">
            <Name>ItemName</Name>
            <Id>ABC.F5.BIGIP.SyncStatusItem/ItemName</Id>
          </ColumnInfo>
          <ColumnInfo Index="2" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="340">
            <Name>SystemNodeName</Name>
            <Id>ABC.F5.BIGIP.SyncStatusItem/SystemNodeName</Id>
          </ColumnInfo>
          <ColumnInfo Index="3" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="340">
            <Name>Key</Name>
            <Id>ABC.F5.BIGIP.SyncStatusItem/Key</Id>
          </ColumnInfo>
        </Presentation>
      </View>
      <View ID="ABC.F5.BIGIP.View.State.F5SyncStatusItemGroup" Accessibility="Internal" Target="ABC.F5.BIGIP.SyncStatusItem.Group" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="true">
        <Category>Operations</Category>
      </View>
      <View ID="ABC.F5.BIGIP.View.State.F5System" Accessibility="Internal" Target="ABC.F5.BIGIP.System" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="true">
        <Category>Operations</Category>
      </View>
      <View ID="ABC.F5.BIGIP.View.State.F5TrafficGroupItem" Accessibility="Internal" Target="ABC.F5.BIGIP.TrafficGroupItem" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="true">
        <Category>Operations</Category>
        <Presentation>
          <ColumnInfo Index="0" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="120">
            <Name>State</Name>
            <Id>ABC.F5.BIGIP.TrafficGroupItem</Id>
          </ColumnInfo>
          <ColumnInfo Index="1" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="500">
            <Name>DeviceName</Name>
            <Id>ABC.F5.BIGIP.TrafficGroupItem/DeviceName</Id>
          </ColumnInfo>
          <ColumnInfo Index="2" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="500">
            <Name>GroupName</Name>
            <Id>ABC.F5.BIGIP.TrafficGroupItem/GroupName</Id>
          </ColumnInfo>
          <ColumnInfo Index="3" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="340">
            <Name>SystemNodeName</Name>
            <Id>ABC.F5.BIGIP.TrafficGroupItem/SystemNodeName</Id>
          </ColumnInfo>
          <ColumnInfo Index="4" Grouped="false" IsSortable="true" Sorted="false" SortIndex="-1" Visible="true" SortOrder="Ascending" Width="340">
            <Name>Key</Name>
            <Id>ABC.F5.BIGIP.TrafficGroupItem/Key</Id>
          </ColumnInfo>
        </Presentation>
      </View>
      <View ID="ABC.F5.BIGIP.View.State.F5TrafficGroupItemGroup" Accessibility="Internal" Target="ABC.F5.BIGIP.TrafficGroupItem.Group" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="true">
        <Category>Operations</Category>
      </View>
      <View ID="ABC.F5.BIGIP.View.State.MonitoringServer" Accessibility="Internal" Target="ABC.F5.BIGIP.MonitoringServer" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="true">
        <Category>Operations</Category>
      </View>
    </Views>
    <Folders>
      <Folder ID="ABC.F5.BIGIP.Folders" Accessibility="Public" ParentFolder="SC!Microsoft.SystemCenter.Monitoring.ViewFolder.Root" />
      <Folder ID="ABC.F5.BIGIP.Folders.Alerts" Accessibility="Public" ParentFolder="ABC.F5.BIGIP.Folders" />
      <Folder ID="ABC.F5.BIGIP.Folders.State" Accessibility="Public" ParentFolder="ABC.F5.BIGIP.Folders" />
    </Folders>
    <FolderItems>
      <FolderItem ElementID="ABC.F5.BIGIP.View.Alert.F5CPU" Folder="ABC.F5.BIGIP.Folders.Alerts" ID="ABC.F5.BIGIP.View.Alert.F5CPU.FolderItem" />
      <FolderItem ElementID="ABC.F5.BIGIP.View.Alert.F5Disk" Folder="ABC.F5.BIGIP.Folders.Alerts" ID="ABC.F5.BIGIP.View.Alert.F5Disk.FolderItem" />
      <FolderItem ElementID="ABC.F5.BIGIP.View.Alert.F5Memory" Folder="ABC.F5.BIGIP.Folders.Alerts" ID="ABC.F5.BIGIP.View.Alert.F5Memory.FolderItem" />
      <FolderItem ElementID="ABC.F5.BIGIP.View.Alert.F5NodeAddress" Folder="ABC.F5.BIGIP.Folders.Alerts" ID="ABC.F5.BIGIP.View.Alert.F5NodeAddress.FolderItem" />
      <FolderItem ElementID="ABC.F5.BIGIP.View.Alert.F5PoolStatus" Folder="ABC.F5.BIGIP.Folders.Alerts" ID="ABC.F5.BIGIP.View.Alert.F5PoolStatus.FolderItem" />
      <FolderItem ElementID="ABC.F5.BIGIP.View.Alert.F5SyncItemStatus" Folder="ABC.F5.BIGIP.Folders.Alerts" ID="ABC.F5.BIGIP.View.Alert.F5SyncItemStatus.FolderItem" />
      <FolderItem ElementID="ABC.F5.BIGIP.View.Alert.F5TrafficGroupItem" Folder="ABC.F5.BIGIP.Folders.Alerts" ID="ABC.F5.BIGIP.View.Alert.F5TrafficGroupItem.FolderItem" />
      <FolderItem ElementID="ABC.F5.BIGIP.View.State.F5CPU" Folder="ABC.F5.BIGIP.Folders.State" ID="ABC.F5.BIGIP.View.State.F5CPU.FolderItem" />
      <FolderItem ElementID="ABC.F5.BIGIP.View.State.F5Disk" Folder="ABC.F5.BIGIP.Folders.State" ID="ABC.F5.BIGIP.View.State.F5Disk.FolderItem" />
      <FolderItem ElementID="ABC.F5.BIGIP.View.State.F5Memory" Folder="ABC.F5.BIGIP.Folders.State" ID="ABC.F5.BIGIP.View.State.F5Memory.FolderItem" />
      <FolderItem ElementID="ABC.F5.BIGIP.View.State.F5NodeAddr" Folder="ABC.F5.BIGIP.Folders.State" ID="ABC.F5.BIGIP.View.State.F5NodeAddr.FolderItem" />
      <FolderItem ElementID="ABC.F5.BIGIP.View.State.F5PoolStatus" Folder="ABC.F5.BIGIP.Folders.State" ID="ABC.F5.BIGIP.View.State.F5PoolStatus.FolderItem" />
      <FolderItem ElementID="ABC.F5.BIGIP.View.State.F5SyncStatusItem" Folder="ABC.F5.BIGIP.Folders.State" ID="ABC.F5.BIGIP.View.State.F5SyncStatusItem.FolderItem" />
      <FolderItem ElementID="ABC.F5.BIGIP.View.State.F5SyncStatusItemGroup" Folder="ABC.F5.BIGIP.Folders.State" ID="ABC.F5.BIGIP.View.State.F5SyncStatusItemGroup.FolderItem" />
      <FolderItem ElementID="ABC.F5.BIGIP.View.State.F5System" Folder="ABC.F5.BIGIP.Folders.State" ID="ABC.F5.BIGIP.View.State.F5System.FolderItem" />
      <FolderItem ElementID="ABC.F5.BIGIP.View.State.F5TrafficGroupItem" Folder="ABC.F5.BIGIP.Folders.State" ID="ABC.F5.BIGIP.View.State.F5TrafficGroupItem.FolderItem" />
      <FolderItem ElementID="ABC.F5.BIGIP.View.State.F5TrafficGroupItemGroup" Folder="ABC.F5.BIGIP.Folders.State" ID="ABC.F5.BIGIP.View.State.F5TrafficGroupItemGroup.FolderItem" />
      <FolderItem ElementID="ABC.F5.BIGIP.View.State.MonitoringServer" Folder="ABC.F5.BIGIP.Folders.State" ID="ABC.F5.BIGIP.View.State.MonitoringServer.FolderItem" />
    </FolderItems>
    <ImageReferences>
      <ImageReference ElementID="ABC.F5.BIGIP.CPU" ImageID="ABC.F5.BIGIP.F5CPU.Icon" />
      <ImageReference ElementID="ABC.F5.BIGIP.Memory" ImageID="ABC.F5.BIGIP.F5Memory.Icon" />
      <ImageReference ElementID="ABC.F5.BIGIP.Disk" ImageID="ABC.F5.BIGIP.F5Disk.Icon" />
      <ImageReference ElementID="ABC.F5.BIGIP.PoolStatus" ImageID="ABC.F5.BIGIP.F5Pool.Icon" />
      <ImageReference ElementID="ABC.F5.BIGIP.NodeAddress" ImageID="ABC.F5.BIGIP.F5Node.Icon" />
      <ImageReference ElementID="ABC.F5.BIGIP.System" ImageID="ABC.F5.BIGIP.F5System.Icon" />
      <ImageReference ElementID="ABC.F5.BIGIP.PoolStatus.Group" ImageID="ABC.F5.BIGIP.F5PoolGroup.Icon" />
      <ImageReference ElementID="ABC.F5.BIGIP.NodeAddress.Group" ImageID="ABC.F5.BIGIP.F5NodeGroup.Icon" />
      <ImageReference ElementID="ABC.F5.BIGIP.TrafficGroupItem" ImageID="ABC.F5.BIGIP.F5TrafficGroupItem.Icon" />
      <ImageReference ElementID="ABC.F5.BIGIP.TrafficGroupItem.Group" ImageID="ABC.F5.BIGIP.F5TrafficGroupItemGroup.Icon" />
      <ImageReference ElementID="ABC.F5.BIGIP.SyncStatusItem" ImageID="ABC.F5.BIGIP.F5SyncStatus.Icon" />
      <ImageReference ElementID="ABC.F5.BIGIP.SyncStatusItem.Group" ImageID="ABC.F5.BIGIP.F5SyncStatusGroup.Icon" />
    </ImageReferences>
    <StringResources>
      <StringResource ID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.AlertMessage" />
      <StringResource ID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.NodeAddr.AlertMessage" />
      <StringResource ID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.Disk.AlertMessage" />
      <StringResource ID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.Memory.AlertMessage" />
      <StringResource ID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.TrafficGroupItem.AlertMessage" />
      <StringResource ID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.CPU.AlertMessage" />
      <StringResource ID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.SyncStatusItem.AlertMessage" />
      <StringResource ID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.PoolStatus.AlertMessage" />
    </StringResources>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System">
          <Name>Monitor F5 BIGIP System with PING</Name>
          <Description>Description for the new unit monitor.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.AlertMessage">
          <Name>F5 BIGIP - Not reachable</Name>
          <Description>F5 BIGIP System not reachable via PING</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System" SubElementID="ConditionTrue">
          <Name>ConditionTrue</Name>
          <Description>ConditionTrue</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System" SubElementID="ConditionFalse">
          <Name>ConditionFalse</Name>
          <Description>ConditionFalse</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.Aggregate.HealthState">
          <Name>Monitor F5 BIGIP System HealthState Aggregation</Name>
          <Description>Description for new aggregate monitor.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.NodeAddr">
          <Name>Monitor F5 BIGIP Application NodeAddr</Name>
          <Description>Description for the new unit monitor.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.NodeAddr.AlertMessage">
          <Name>NodeAddr Issue</Name>
          <Description>Please check. NodeAddress System abnormal.


TestedAt: {0}
Last check Result: {1}


Supplement: {2}

</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.NodeAddr" SubElementID="UnderThreshold">
          <Name>UnderThreshold</Name>
          <Description>UnderThreshold</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.NodeAddr" SubElementID="OverWarningThreshold">
          <Name>OverWarningThreshold</Name>
          <Description>OverWarningThreshold</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.NodeAddr" SubElementID="OverErrorThreshold">
          <Name>OverErrorThreshold</Name>
          <Description>OverErrorThreshold</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.Disk">
          <Name>Monitor F5 BIGIP System Disk</Name>
          <Description>Description for the new unit monitor.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.Disk.AlertMessage">
          <Name>F5 Disk Issue</Name>
          <Description>Please check. Disk System abnormal.


TestedAt: {0}
Last check Result: {1}


Supplement: {2}</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.Disk" SubElementID="Success">
          <Name>Success</Name>
          <Description>Success</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.Disk" SubElementID="Failure">
          <Name>Failure</Name>
          <Description>Failure</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.Memory">
          <Name>Monitor F5 BIGIP System Memory</Name>
          <Description>Description for the new unit monitor.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.Memory.AlertMessage">
          <Name>F5 Memory usage too high</Name>
          <Description>Please check. Memory usage abnormal.


TestedAt: {0}
Last check Result: {1}


Supplement: {2}
</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.Memory" SubElementID="Success">
          <Name>Success</Name>
          <Description>Success</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.Memory" SubElementID="Failure">
          <Name>Failure</Name>
          <Description>Failure</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.TrafficGroupItem">
          <Name>Monitor F5 BIGIP Application TrafficGroupItem</Name>
          <Description>Description for the new unit monitor.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.TrafficGroupItem.AlertMessage">
          <Name>TrafficGroupItem unhealthy state</Name>
          <Description>Please check. TrafficGroupItem abnormal.


TestedAt: {0}
Last check Result: {1}


Supplement: {2}

</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.TrafficGroupItem" SubElementID="UnderThreshold">
          <Name>UnderThreshold</Name>
          <Description>UnderThreshold</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.TrafficGroupItem" SubElementID="OverWarningThreshold">
          <Name>OverWarningThreshold</Name>
          <Description>OverWarningThreshold</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.TrafficGroupItem" SubElementID="OverErrorThreshold">
          <Name>OverErrorThreshold</Name>
          <Description>OverErrorThreshold</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.CPU">
          <Name>Monitor F5 BIGIP System CPU</Name>
          <Description>Description for the new unit monitor.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.CPU.AlertMessage">
          <Name>CPU usage too high</Name>
          <Description>Please check. CPU System abnormal.


TestedAt: {0}
Last check Result: {1}


Supplement: {2}</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.CPU" SubElementID="Success">
          <Name>Success</Name>
          <Description>Success</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.CPU" SubElementID="Failure">
          <Name>Failure</Name>
          <Description>Failure</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.SyncStatusItem">
          <Name>Monitor F5 BIGIP Application SyncStatusItem</Name>
          <Description>Description for the new unit monitor.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.SyncStatusItem.AlertMessage">
          <Name>SyncStatus Item unhealthy state</Name>
          <Description>Please check. SyncStatus Item abnormal.


TestedAt: {0}
Last check Result: {1}


Supplement: {2}

</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.SyncStatusItem" SubElementID="UnderThreshold">
          <Name>UnderThreshold</Name>
          <Description>UnderThreshold</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.SyncStatusItem" SubElementID="OverWarningThreshold">
          <Name>OverWarningThreshold</Name>
          <Description>OverWarningThreshold</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.SyncStatusItem" SubElementID="OverErrorThreshold">
          <Name>OverErrorThreshold</Name>
          <Description>OverErrorThreshold</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.PoolStatus">
          <Name>Monitor F5 BIGIP Application PoolStatus</Name>
          <Description>Description for the new unit monitor.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.PoolStatus.AlertMessage">
          <Name>PoolStatus Issue</Name>
          <Description>Please check. PoolStatus System abnormal.


TestedAt: {0}
Last check Result: {1}


Supplement: {2}

</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.PoolStatus" SubElementID="UnderThreshold">
          <Name>UnderThreshold</Name>
          <Description>UnderThreshold</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.PoolStatus" SubElementID="OverWarningThreshold">
          <Name>OverWarningThreshold</Name>
          <Description>OverWarningThreshold</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.PoolStatus" SubElementID="OverErrorThreshold">
          <Name>OverErrorThreshold</Name>
          <Description>OverErrorThreshold</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.NodeAddr.Group">
          <Name>Monitor F5 BIGIP Application NodeAddr Group</Name>
          <Description>Description for new dependency monitor.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.SysDepOn.SyncItm">
          <Name>Monitor F5 BIGIP System System Depends On SyncStatusItem Group</Name>
          <Description>Description for new dependency monitor.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.SysDepOn.TraffGrp">
          <Name>Monitor F5 BIGIP System System Depends On TrafficGroups</Name>
          <Description>Description for new dependency monitor.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.SysDepOn.CPU">
          <Name>Monitor F5 BIGIP System System Depends On CPU</Name>
          <Description>Description for new dependency monitor.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.SysDepOn.Disk">
          <Name>Monitor F5 BIGIP System System Depends On Disk</Name>
          <Description>Description for new dependency monitor.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.TrafficItemGroup.Group">
          <Name>Monitor F5 BIGIP Application TrafficItemGroup Group</Name>
          <Description>Description for new dependency monitor.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.PoolStatusGroup">
          <Name>Monitor F5 BIGIP Application PoolStatusGroup</Name>
          <Description>Description for new dependency monitor.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.Application.SyncStatusItem.Group">
          <Name>Monitor F5 BIGIP Application SyncStatusItem Group</Name>
          <Description>Description for new dependency monitor.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Monitor.F5.BIGIP.System.SysDepOn.Mem">
          <Name>Monitor F5 BIGIP System System Depends On Memory</Name>
          <Description>Description for new dependency monitor.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Folders">
          <Name>ABC F5 BIGIP</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Folders.Alerts">
          <Name>Alerts</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Folders.State">
          <Name>State</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.View.Alert.F5CPU">
          <Name>CPU</Name>
          <Description>Description for the new view</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.View.Alert.F5Disk">
          <Name>Disk</Name>
          <Description>Description for the new view</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.View.Alert.F5Memory">
          <Name>Memory</Name>
          <Description>Description for the new view</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.View.Alert.F5NodeAddress">
          <Name>NodeAddress</Name>
          <Description>Description for the new view</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.View.Alert.F5PoolStatus">
          <Name>PoolStatus</Name>
          <Description>Description for the new view</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.View.Alert.F5SyncItemStatus">
          <Name>SyncItems</Name>
          <Description>Description for the new view</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.View.Alert.F5TrafficGroupItem">
          <Name>TrafficGroups</Name>
          <Description>Description for the new view</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.View.State.F5CPU">
          <Name>CPU</Name>
          <Description>Description for the new view</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.View.State.F5Disk">
          <Name>Disk</Name>
          <Description>Description for the new view</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.View.State.F5Memory">
          <Name>Memory</Name>
          <Description>Description for the new view</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.View.State.F5NodeAddr">
          <Name>NodeAddrTable</Name>
          <Description>Description for the new view</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.View.State.F5PoolStatus">
          <Name>PoolStatus</Name>
          <Description>Description for the new view</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.View.State.F5SyncStatusItem">
          <Name>SyncStatusItem</Name>
          <Description>Description for the new view</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.View.State.F5SyncStatusItemGroup">
          <Name>SyncStatusItem Group</Name>
          <Description>Description for the new view</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.View.State.F5System">
          <Name>System / Appliance</Name>
          <Description>Description for the new view</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.View.State.F5TrafficGroupItem">
          <Name>TrafficGroupItem</Name>
          <Description>Description for the new view</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.View.State.F5TrafficGroupItemGroup">
          <Name>TrafficGroupItem Group</Name>
          <Description>Description for the new view</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.View.State.MonitoringServer">
          <Name>MonitoringServer - State (not monitored)</Name>
          <Description>Server that checks the F5.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP">
          <Name>ABC F5 BIGIP </Name>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.System">
          <Name>ABC.F5.BIGIP.System</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.System" SubElementID="SystemNodeName">
          <Name>SystemNodeName</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.System" SubElementID="SystemRelease">
          <Name>SystemRelease</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.System" SubElementID="SystemName">
          <Name>SystemName</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.System" SubElementID="ProductDate">
          <Name>ProductDate</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.System" SubElementID="ProductBuild">
          <Name>ProductBuild</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.System" SubElementID="ProductName">
          <Name>ProductName</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.System" SubElementID="ProductVersion">
          <Name>ProductVersion</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.System" SubElementID="IPAddress">
          <Name>IPAddress</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.CPU">
          <Name>ABC F5 BIGIP CPU</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.CPU" SubElementID="Id">
          <Name>Id</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.CPU" SubElementID="SystemNodeName">
          <Name>SystemNodeName</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.CPU" SubElementID="Key">
          <Name>Key</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Disk">
          <Name>ABC F5 BIGIP Disk</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Disk" SubElementID="FullPathAttr">
          <Name>FullPathAttr</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Disk" SubElementID="TotalSize">
          <Name>TotalSize</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Disk" SubElementID="SystemNodeName">
          <Name>SystemNodeName</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Disk" SubElementID="Key">
          <Name>Key</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Memory">
          <Name>ABC F5 BIGIP Memory</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Memory" SubElementID="MemoryTotal">
          <Name>MemoryTotal</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Memory" SubElementID="SystemNodeName">
          <Name>SystemNodeName</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Memory" SubElementID="Key">
          <Name>Key</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.PoolStatus.Group">
          <Name>ABC F5 BIGIP PoolStatus Group</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.PoolStatus.Group" SubElementID="Key">
          <Name>Key</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.PoolStatus.Group" SubElementID="SystemNodeName">
          <Name>SystemNodeName</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.NodeAddress.Group">
          <Name>ABC F5 BIGIP NodeAddress Group</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.NodeAddress.Group" SubElementID="Key">
          <Name>Key</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.NodeAddress.Group" SubElementID="SystemNodeName">
          <Name>SystemNodeName</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.SystemHostsCPU">
          <Name>ABC F5 BIGIP SystemHostsCPU</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.SystemHostsDisk">
          <Name>ABC F5 BIGIP SystemHostsDisk</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.SystemHostsMemory">
          <Name>ABC F5 BIGIP SystemHostsMemory</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.PoolStatusGroupHostsPoolStatus">
          <Name>ABC F5 BIGIP PoolStatusGroupHostsPoolStatus</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.MonitoringServer">
          <Name>ABC F5 BIGIP MonitoringServer</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.MonitoringServer" SubElementID="FilePath">
          <Name>File Path</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.MonitoringServerRuntimeInfo">
          <Name>ABC F5 BIGIP MonitoringServer RuntimeInfo</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.MonitoringServerRuntimeInfo" SubElementID="RemotePath">
          <Name>RemotePath</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.MonitoringServerRuntimeInfo" SubElementID="Key">
          <Name>Key</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.NodeAddress">
          <Name>ABC F5 BIGIP NodeAddress</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.NodeAddress" SubElementID="Key">
          <Name>Key</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.NodeAddress" SubElementID="NodeAddressEnabledState">
          <Name>NodeAddressEnabledState</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.NodeAddress" SubElementID="NodeAddressMonitorRule">
          <Name>NodeAddressMonitorRule</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.NodeAddress" SubElementID="NodeAddressSessionStatus">
          <Name>NodeAddressSessionStatus</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.NodeAddress" SubElementID="NodeAddressName">
          <Name>NodeAddressName</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.NodeAddress" SubElementID="SystemNodeName">
          <Name>SystemNodeName</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.PoolStatus">
          <Name>ABC F5 BIGIP PoolStatus</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.PoolStatus" SubElementID="Key">
          <Name>Key</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.PoolStatus" SubElementID="PoolStatusEnabledState">
          <Name>PoolStatusEnabledState</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.PoolStatus" SubElementID="PoolStatusName">
          <Name>PoolStatusName</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.PoolStatus" SubElementID="SystemNodeName">
          <Name>SystemNodeName</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.NodeAddressGroupHostsNodeAddress">
          <Name>ABC F5 BIGIP NodeAddressGroupHostsNodeAddress</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.SystemHostsPoolStatusGroup">
          <Name>ABC F5 BIGIP SystemHostsPoolStatusGroup</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.SystemHostsNodeAddressGroup">
          <Name>ABC F5 BIGIP SystemHostsNodeAddressGroup</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.TrafficGroupItem">
          <Name>ABC F5 BIGIP TrafficGroupItem</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.TrafficGroupItem" SubElementID="DeviceName">
          <Name>DeviceName</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.TrafficGroupItem" SubElementID="GroupName">
          <Name>GroupName</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.TrafficGroupItem" SubElementID="Key">
          <Name>Key</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.TrafficGroupItem" SubElementID="SystemNodeName">
          <Name>SystemNodeName</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.SyncStatusItem">
          <Name>ABC F5 BIGIP SyncStatusItem</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.SyncStatusItem" SubElementID="ItemName">
          <Name>ItemName</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.SyncStatusItem" SubElementID="Key">
          <Name>Key</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.SyncStatusItem" SubElementID="SystemNodeName">
          <Name>SystemNodeName</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.TrafficGroupItem.Group">
          <Name>ABC F5 BIGIP TrafficGroupItem Group</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.TrafficGroupItem.Group" SubElementID="GroupName">
          <Name>GroupName</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.TrafficGroupItem.Group" SubElementID="Key">
          <Name>Key</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.TrafficGroupItem.Group" SubElementID="SystemNodeName">
          <Name>SystemNodeName</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.SystemHostsTrafficGroupItemGroup">
          <Name>ABC F5 BIGIP SystemHostsTrafficGroupItemGroup</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.SyncStatusItem.Group">
          <Name>ABC F5 BIGIP SyncStatusItem Group</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.SyncStatusItem.Group" SubElementID="GroupName">
          <Name>GroupName</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.SyncStatusItem.Group" SubElementID="Key">
          <Name>Key</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.SyncStatusItem.Group" SubElementID="SystemNodeName">
          <Name>SystemNodeName</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Discovery.F5.BIGIP.System.System">
          <Name>Discover F5 BIGIP System - System</Name>
          <Description>Description for the new discovery.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Discovery.F5.BIGIP.System.RemotePath">
          <Name>Discover F5 BIGIP System - RemotePath</Name>
          <Description>Description for the new discovery.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Discovery.F5.BIGIP.System.Memory">
          <Name>Discover F5 BIGIP System - Memory</Name>
          <Description>Description for the new discovery.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Discovery.F5.BIGIP.System.HardwareRelations">
          <Name>Discover F5 BIGIP System - HardwareRelations</Name>
          <Description>Discover F5 System Hardware Relations</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Discovery.F5.BIGIP.System.Disks">
          <Name>Discover F5 BIGIP System - Disks</Name>
          <Description>Description for the new discovery.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Discovery.F5.BIGIP.System.CPU">
          <Name>Discover F5 BIGIP System - CPU</Name>
          <Description>Description for the new discovery.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Discovery.F5.BIGIP.MonitoringServer">
          <Name>Discover F5 BIGIP MonitoringServer</Name>
          <Description>Description for the new discovery.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Discovery.F5.BIGIP.Application.TrafficGroupItemGroups">
          <Name>Discover F5 BIGIP Application - TrafficItem Groups</Name>
          <Description>Description for the new discovery.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Discovery.F5.BIGIP.Application.TrafficGroupItem">
          <Name>Discover F5 BIGIP Application - TrafficGroupItem</Name>
          <Description>Description for the new discovery.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Discovery.F5.BIGIP.Application.SystemHostsTrafficGroupItemGroup">
          <Name>Discover F5 BIGIP Application - System Hosts TrafficGroupItem Group</Name>
          <Description>Description for the new discovery.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Discovery.F5.BIGIP.Application.SystemHostsSyncStatusItemGroup">
          <Name>Discover F5 BIGIP Application - System Hosts SyncStatusItem Group</Name>
          <Description>Description for the new discovery.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Discovery.F5.BIGIP.Application.SystemHostsPoolStatusGroup">
          <Name>Discover F5 BIGIP Application - System Hosts PoolStatus Group</Name>
          <Description>Description for the new discovery.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Discovery.F5.BIGIP.Application.SystemHostsNodeAddressGroup">
          <Name>Discover F5 BIGIP Application - System Hosts NodeAddress Group</Name>
          <Description>Description for the new discovery.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Discovery.F5.BIGIP.Application.SyncStatusItemGroups">
          <Name>Discover F5 BIGIP Application - SyncStatusItem Groups</Name>
          <Description>Description for the new discovery.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Discovery.F5.BIGIP.Application.SyncStatusItem">
          <Name>Discover F5 BIGIP Application - SyncStatusItem</Name>
          <Description>Description for the new discovery.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Discovery.F5.BIGIP.Application.PoolStatusGroups">
          <Name>Discover F5 BIGIP Application - PoolStatus Groups</Name>
          <Description>Description for the new discovery.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Discovery.F5.BIGIP.Application.PoolStatus">
          <Name>Discover F5 BIGIP Application - PoolStatus</Name>
          <Description>Description for the new discovery.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Discovery.F5.BIGIP.Application.NodeAddrTable">
          <Name>Discover F5 BIGIP Application - NodeAddrTable</Name>
          <Description>Description for the new discovery.</Description>
        </DisplayString>
        <DisplayString ElementID="ABC.F5.BIGIP.Discovery.F5.BIGIP.Application.NodeAddressGroups">
          <Name>Discover F5 BIGIP Application - NodeAddress Groups</Name>
          <Description>Description for the new discovery.</Description>
        </DisplayString>
      </DisplayStrings>
      <KnowledgeArticles></KnowledgeArticles>
    </LanguagePack>
  </LanguagePacks>
  <Resources>
    <Image ID="ABC.F5.BIGIP.F5CPU.Icon" FileName="f5cpu.png" Accessibility="Public" HasNullStream="false" Comment="F5 CPU Icon" />
    <Image ID="ABC.F5.BIGIP.F5Memory.Icon" FileName="f5memory.png" Accessibility="Public" HasNullStream="false" Comment="F5 CPU Memory" />
    <Image ID="ABC.F5.BIGIP.F5Disk.Icon" FileName="f5disk.png" Accessibility="Public" HasNullStream="false" Comment="F5 CPU Disk" />
    <Image ID="ABC.F5.BIGIP.F5Pool.Icon" FileName="f5pool.png" Accessibility="Public" HasNullStream="false" Comment="F5 Pool" />
    <Image ID="ABC.F5.BIGIP.F5Node.Icon" FileName="F5node.png" Accessibility="Public" HasNullStream="false" Comment="F5 Node" />
    <Image ID="ABC.F5.BIGIP.F5System.Icon" FileName="f5system.png" Accessibility="Public" HasNullStream="false" Comment="F5 F5System" />
    <Image ID="ABC.F5.BIGIP.F5PoolGroup.Icon" FileName="f5poolgroup.png" Accessibility="Public" HasNullStream="false" Comment="F5 Pool Group" />
    <Image ID="ABC.F5.BIGIP.F5NodeGroup.Icon" FileName="f5nodegroup.png" Accessibility="Public" HasNullStream="false" Comment="F5 Node Group" />
    <Image ID="ABC.F5.BIGIP.F5TrafficGroupItem.Icon" FileName="f5trafficgroupitem.png" Accessibility="Public" HasNullStream="false" Comment="F5 Traffic Group Item" />
    <Image ID="ABC.F5.BIGIP.F5TrafficGroupItemGroup.Icon" FileName="f5trafficgroupitemgroup.png" Accessibility="Public" HasNullStream="false" Comment="F5 Traffic Group Item Group" />
    <Image ID="ABC.F5.BIGIP.F5SyncStatus.Icon" FileName="f5syncstatus.png" Accessibility="Public" HasNullStream="false" Comment="F5 Sync Status Item" />
    <Image ID="ABC.F5.BIGIP.F5SyncStatusGroup.Icon" FileName="f5syncstatusgroup.png" Accessibility="Public" HasNullStream="false" Comment="F5 Sync Status Group" />
  </Resources>
</ManagementPack>